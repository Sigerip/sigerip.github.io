[
  {
    "objectID": "prev_exp_vida.html",
    "href": "prev_exp_vida.html",
    "title": "SIGERIP",
    "section": "",
    "text": "Previsão da expectativa de vida para 2024-2070\n\nGráficoTabela\n\n\n\nd3 = require(\"d3@7\")\ntabua_comb = await FileAttachment(\"dados/dados1/tabuas_combinad.csv\").csv()\ntabua_lm = await FileAttachment(\"dados/dados2/tabua_lm.csv\").csv()\ntabua_lc = await FileAttachment(\"dados/dados2/tabua_lc.csv\").csv()\nregioes = [\"Brasil\", \"Centro-Oeste\", \"Nordeste\", \"Norte\", \"Sudeste\", \"Sul\", \"Acre\", \"Alagoas\", \"Amapá\", \"Amazonas\", \"Bahia\", \"Ceará\", \"Distrito Federal\", \"Espírito Santo\", \"Goiás\", \"Maranhão\", \"Mato Grosso\", \"Mato Grosso do Sul\", \"Minas Gerais\", \"Pará\", \"Paraíba\", \"Paraná\", \"Pernambuco\", \"Piauí\", \"Rio de Janeiro\", \"Rio Grande do Norte\", \"Rio Grande do Sul\", \"Rondônia\", \"Roraima\", \"Santa Catarina\", \"São Paulo\", \"Sergipe\", \"Tocantins\"];\nanos = [...new Set(tabua_comb.map(d =&gt; d.Ano))].sort();\nfaixas_etaria = [...new Set(tabua_comb.map(d =&gt; d.faixa_etaria))]\n\nviewof seletores = {\n  const container = htl.html`\n    &lt;div style=\"\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      align-items: flex-start;\n      gap: 30px;\n      justify-content: center;\n    \"&gt;\n      &lt;div style=\"\n        min-width: 200px;\n        width: 100%;\n        max-width: 300px;\n        margin-bottom: 10px;\n      \"&gt;\n        &lt;div style=\"text-align: center;\"&gt;Local:&lt;/div&gt;\n        &lt;div style=\"display: flex; justify-content: center; width: 100%;\"&gt;\n          &lt;select id=\"regiao-select\" class=\"compact-select\" style=\"\n            padding: 6px 12px;\n            border: 1px solid #ccc;\n            border-radius: 20px;\n            font-size: 16px;\n            text-align: center;\n            width: fit-content;\n            min-width: 180px;\n            background-color: #f8f9fa;\n            cursor: pointer;\n            appearance: none;\n            background-image: url('data:image/svg+xml;charset=UTF-8,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23666\" stroke-width=\"2\"&gt;&lt;polyline points=\"6 9 12 15 18 9\"/&gt;&lt;/svg&gt;');\n            background-repeat: no-repeat;\n            background-position: right 8px center;\n            background-size: 16px;\n            margin-top: 10px;\"&gt;\n            ${regioes.map(regiao =&gt; \n              htl.html`&lt;option value=${regiao}&gt;${regiao}&lt;/option&gt;`\n            )}\n          &lt;/select&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      \n      &lt;div style=\"\n        min-width: 200px;\n        width: 100%;\n        max-width: 300px;\n        margin-bottom: 10px;\n      \"&gt;\n        &lt;div style=\"text-align: center;\"&gt;Faixa etária:&lt;/div&gt;\n        &lt;div style=\"display: flex; justify-content: center; width: 100%;\"&gt;\n          &lt;select id=\"faixa-select\" class=\"compact-select\" style=\"\n            padding: 6px 12px;\n            border: 1px solid #ccc;\n            border-radius: 20px;\n            font-size: 16px;\n            text-align: center;\n            width: fit-content;\n            min-width: 150px;\n            background-color: #f8f9fa;\n            cursor: pointer;\n            appearance: none;\n            background-image: url('data:image/svg+xml;charset=UTF-8,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23666\" stroke-width=\"2\"&gt;&lt;polyline points=\"6 9 12 15 18 9\"/&gt;&lt;/svg&gt;');\n            background-repeat: no-repeat;\n            background-position: right 8px center;\n            background-size: 16px;\n            margin-top: 10px;\"&gt;\n            ${faixas_etaria.map(faixa =&gt; \n              htl.html`&lt;option value=${faixa}&gt;${faixa}&lt;/option&gt;`\n            )}\n          &lt;/select&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      \n      &lt;div style=\"\n        min-width: 200px;\n        width: 100%;\n        max-width: 300px;\n        margin-bottom: 10px;\n      \"&gt;\n        &lt;div style=\"text-align: center;\"&gt;Modelo:&lt;/div&gt;\n        &lt;div style=\"display: flex; justify-content: center; width: 100%;\"&gt;\n          &lt;select id=\"modelo-select\" class=\"compact-select\" style=\"\n            padding: 6px 12px;\n            border: 1px solid #ccc;\n            border-radius: 20px;\n            font-size: 16px;\n            text-align: center;\n            width: fit-content;\n            min-width: 180px;\n            background-color: #f8f9fa;\n            cursor: pointer;\n            appearance: none;\n            background-image: url('data:image/svg+xml;charset=UTF-8,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23666\" stroke-width=\"2\"&gt;&lt;polyline points=\"6 9 12 15 18 9\"/&gt;&lt;/svg&gt;');\n            background-repeat: no-repeat;\n            background-position: right 8px center;\n            background-size: 16px;\n            margin-top: 10px;\"&gt;\n            &lt;option value=\"ARIMA+ETS\"&gt;ARIMA+ETS&lt;/option&gt;\n            &lt;option value=\"Lee-Carter\"&gt;Lee-Carter&lt;/option&gt;\n            &lt;option value=\"Lee-Miller\"&gt;Lee-Miller&lt;/option&gt;\n          &lt;/select&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  `;\n  \n  // Adiciona código para detectar a largura da tela e ajustar o layout\n  const mediaQuery = window.matchMedia('(max-width: 650px)');\n  \n  // Função para ajustar o layout baseado na largura da tela\n  const handleScreenChange = (e) =&gt; {\n    if (e.matches) {\n      // Tela pequena - coloca os elementos em coluna\n      container.style.flexDirection = 'column';\n      container.style.alignItems = 'center';\n    } else {\n      // Tela grande - mantém em linha\n      container.style.flexDirection = 'row';\n      container.style.alignItems = 'flex-start';\n    }\n  };\n  \n  // Verifica inicialmente\n  handleScreenChange(mediaQuery);\n  \n  // Adiciona o listener para mudanças de tamanho\n  mediaQuery.addEventListener('change', handleScreenChange);\n  \n  // Captura os elementos select para manipulação\n  const regiaoSelect = container.querySelector('#regiao-select');\n  const faixaSelect = container.querySelector('#faixa-select');\n  const modeloSelect = container.querySelector('#modelo-select');\n  \n  // Define o valor do objeto retornado\n  container.value = {\n    regiao: regiaoSelect.value,\n    faixa: faixaSelect.value,\n    modelo: modeloSelect.value\n  };\n  \n  // Atualiza os valores quando houver mudança\n  regiaoSelect.addEventListener('change', () =&gt; {\n    container.value.regiao = regiaoSelect.value;\n    container.dispatchEvent(new CustomEvent('input'));\n  });\n  \n  faixaSelect.addEventListener('change', () =&gt; {\n    container.value.faixa = faixaSelect.value;\n    container.dispatchEvent(new CustomEvent('input'));\n  });\n  \n  modeloSelect.addEventListener('change', () =&gt; {\n    container.value.modelo = modeloSelect.value;\n    container.dispatchEvent(new CustomEvent('input'));\n  });\n  \n  return container;\n}\n\n// Você pode acessar os valores selecionados assim:\nregiao = seletores.regiao\nfaixa = seletores.faixa\nmodelo = seletores.modelo\n\nex_comb = tabua_comb.filter(d =&gt; d.faixa_etaria === faixa && d.Local === regiao && d.sexo ==='Ambos').map(d =&gt; ({\n    ano: +d.Ano,\n    ex: +d.ex,\n    faixa: d.faixa_etaria\n})\n)\n\nex_lm = tabua_lm.filter(d =&gt; d.faixa_etaria === faixa && d.local === regiao && d.sexo ==='Total').map(d =&gt; ({\n    ano: +d.ano,\n    ex: +d.ex,\n    faixa: d.faixa_etaria\n})\n)\n\nex_lc = tabua_lc.filter(d =&gt; d.faixa_etaria === faixa && d.local === regiao && d.sexo ==='Total').map(d =&gt; ({\n    ano: +d.ano,\n    ex: +d.ex,\n    faixa: d.faixa_etaria\n})\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{\n  const ptBRLocaleDefinition = {\n    decimal: \",\",\n    thousands: \"\",\n    grouping: [3],\n    currency: [\"R$\", \"\"]\n  };\n  d3.formatDefaultLocale(ptBRLocaleDefinition);\n\n  //Combinado\n  if (modelo.includes('ARIMA+ETS')){\n    // Declare the chart dimensions and margins.\n    const width = 760;\n    const height = 500;\n    const marginTop = 20;\n    const marginRight = 30;\n    const marginBottom = 30;\n    const marginLeft = 40;\n\n    // Declare the x (horizontal position) scale.\n    const x = d3.scaleLinear(d3.extent(ex_comb, d =&gt; d.ano), [marginLeft, width - marginRight]);\n\n    // Declare the y (vertical position) scale.\n    const y = d3.scaleLinear([d3.min(ex_comb, d =&gt; d.ex)-1, d3.max(ex_comb, d =&gt; d.ex)+1], [height - marginBottom, marginTop]);\n\n    // Declare the line generator.\n    const line = d3.line()\n        .x(d =&gt; x(d.ano))\n        .y(d =&gt; y(d.ex));\n\n    // Create the SVG container.\n    const svg = d3.create(\"svg\")\n        .attr(\"viewBox\", [0, 0, width, height])\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic; font: 10px sans-serif;\")\n        .style(\"-webkit-tap-highlight-color\", \"transparent\")\n        .style(\"overflow\", \"visible\")\n        //.on(\"pointerenter pointermove\", pointermoved)\n        //.on(\"pointerleave\", pointerleft)\n        .on(\"touchstart\", event =&gt; event.preventDefault());\n\n    // Add the x-axis.\n    svg.append(\"g\")\n        .attr(\"transform\", `translate(0,${height - marginBottom})`)\n        .call(d3.axisBottom(x).ticks(width / 80).tickSizeOuter(0));\n        \n    svg.append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", height) // Posição abaixo do eixo\n      .style(\"font-size\", \"14px\")\n      .style(\"fill\", \"currentColor\")\n      .text(\"Ano\");\n\n    // Add the y-axis, remove the domain line, add grid lines and a label.\n    svg.append(\"g\")\n        .attr(\"transform\", `translate(${marginLeft},0)`)\n        .call(d3.axisLeft(y).ticks(height / 40))\n        .call(g =&gt; g.select(\".domain\").remove())\n        .style(\"font-size\", \"12px\")\n        .call(g =&gt; g.selectAll(\".tick line\").clone()\n            .attr(\"x2\", width - marginLeft - marginRight)\n            .attr(\"stroke-opacity\", 0.1))\n        .call(g =&gt; g.append(\"text\")\n            .attr(\"x\", -marginLeft)\n            .attr(\"y\", 10)\n            .attr(\"fill\", \"currentColor\")\n            .attr(\"text-anchor\", \"start\")\n            .style(\"font-size\", \"18px\")\n            .text(\"ex\"));\n\n    // Append a path for the line.\n    svg.append(\"path\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"steelblue\")\n        .attr(\"stroke-width\", 1.5)\n        .attr(\"d\", line(ex_comb));\n\n    // Create the tooltip container.\n    /*const tooltip = svg.append(\"g\");\n\n    function formatValue(value) {\n      return value.toLocaleString(\"en\", {\n        style: \"decimal\", // Altera para estilo numérico\n        minimumFractionDigits: 2, // Mantém 2 casas decimais\n        maximumFractionDigits: 2\n      });\n    }\n    \n    function formatDate(date) {\n      return date.toLocaleString(\"en\", {\n        month: \"short\",\n        day: \"numeric\",\n        year: \"numeric\",\n        timeZone: \"UTC\"\n      });\n    }\n    \n    // Add the event listeners that show or hide the tooltip.\n    const bisect = d3.bisector(d =&gt; d.ano).center;\n    function pointermoved(event) {\n      const i = bisect(ex_comb, x.invert(d3.pointer(event)[0]));\n      tooltip.style(\"display\", null);\n      tooltip.attr(\"transform\", `translate(${x(ex_comb[i].ano)},${y(ex_comb[i].ex)})`);\n\n      const path = tooltip.selectAll(\"path\")\n        .data([,])\n        .join(\"path\")\n          .attr(\"fill\", \"white\")\n          .attr(\"stroke\", \"black\");\n\n      const text = tooltip.selectAll(\"text\")\n        .data([,])\n        .join(\"text\")\n        .call(text =&gt; text\n          .selectAll(\"tspan\")\n          .data([formatDate(ex_comb[i].ano), formatValue(ex_comb[i].ex)])\n          .join(\"tspan\")\n            .attr(\"x\", 0)\n            .attr(\"y\", (_, i) =&gt; `${i * 1.1}em`)\n            .attr(\"font-weight\", (_, i) =&gt; i ? null : \"bold\")\n            .text(d =&gt; d));\n\n      size(text, path);\n    }\n\n    function pointerleft() {\n      tooltip.style(\"display\", \"none\");\n    }*/\n\n    // Wraps the text with a callout path of the correct size, as measured in the page.\n    function size(text, path) {\n      const {x, y, width: w, height: h} = text.node().getBBox();\n      text.attr(\"transform\", `translate(${-w / 2},${15 - y})`);\n      path.attr(\"d\", `M${-w / 2 - 10},5H-5l5,-5l5,5H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n    }\n\n    return svg.node();\n  }\n\n  //Lee-Miller\n  else if (modelo.includes('Lee-Miller')){\n    const ptBRLocaleDefinition = {\n      decimal: \",\",\n      thousands: \"\",\n      grouping: [3],\n      currency: [\"R$\", \"\"]\n    };\n    d3.formatDefaultLocale(ptBRLocaleDefinition);\n    // Declare the chart dimensions and margins.\n    const width = 760;\n    const height = 500;\n    const marginTop = 20;\n    const marginRight = 30;\n    const marginBottom = 30;\n    const marginLeft = 40;\n\n    // Declare the x (horizontal position) scale.\n    const x = d3.scaleLinear(d3.extent(ex_lm, d =&gt; d.ano), [marginLeft, width - marginRight]);\n\n    // Declare the y (vertical position) scale.\n    const y = d3.scaleLinear([d3.min(ex_lm, d =&gt; d.ex)-1, d3.max(ex_lm, d =&gt; d.ex)+1], [height - marginBottom, marginTop]);\n\n    // Declare the line generator.\n    const line = d3.line()\n        .x(d =&gt; x(d.ano))\n        .y(d =&gt; y(d.ex));\n\n    // Create the SVG container.\n    const svg = d3.create(\"svg\")\n        .attr(\"viewBox\", [0, 0, width, height])\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic; font: 10px sans-serif;\")\n        .style(\"-webkit-tap-highlight-color\", \"transparent\")\n        .style(\"overflow\", \"visible\")\n        //.on(\"pointerenter pointermove\", pointermoved)\n        //.on(\"pointerleave\", pointerleft)\n        .on(\"touchstart\", event =&gt; event.preventDefault());\n\n    // Add the x-axis.\n    svg.append(\"g\")\n        .attr(\"transform\", `translate(0,${height - marginBottom})`)\n        .call(d3.axisBottom(x).ticks(width / 80).tickSizeOuter(0));\n\n    // Add the y-axis, remove the domain line, add grid lines and a label.\n    svg.append(\"g\")\n        .attr(\"transform\", `translate(${marginLeft},0)`)\n        .call(d3.axisLeft(y).ticks(height / 40))\n        .call(g =&gt; g.select(\".domain\").remove())\n        .style(\"font-size\", \"12px\")\n        .call(g =&gt; g.selectAll(\".tick line\").clone()\n            .attr(\"x2\", width - marginLeft - marginRight)\n            .attr(\"stroke-opacity\", 0.1))\n        .call(g =&gt; g.append(\"text\")\n            .attr(\"x\", -marginLeft)\n            .attr(\"y\", 10)\n            .attr(\"fill\", \"currentColor\")\n            .attr(\"text-anchor\", \"start\")\n            .style(\"font-size\", \"18px\")\n            .text(\"ex\"));\n\n    // Append a path for the line.\n    svg.append(\"path\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"steelblue\")\n        .attr(\"stroke-width\", 1.5)\n        .attr(\"d\", line(ex_lm));\n\n    // Create the tooltip container.\n    /*const tooltip = svg.append(\"g\");\n\n    function formatValue(value) {\n      return value.toLocaleString(\"pt-BR\", {\n        style: \"decimal\", // Altera para estilo numérico\n        minimumFractionDigits: 2, // Mantém 2 casas decimais\n        maximumFractionDigits: 2\n      });\n    }\n    \n    function formatDate(date) {\n      return date.toLocaleString(\"pt-BR\", {\n        month: \"short\",\n        day: \"numeric\",\n        year: \"numeric\",\n        timeZone: \"UTC\"\n      });\n    }\n    \n    // Add the event listeners that show or hide the tooltip.\n    const bisect = d3.bisector(d =&gt; d.ano).center;\n    function pointermoved(event) {\n      const i = bisect(ex_lm, x.invert(d3.pointer(event)[0]));\n      tooltip.style(\"display\", null);\n      tooltip.attr(\"transform\", `translate(${x(ex_lm[i].ano)},${y(ex_lm[i].ex)})`);\n\n      const path = tooltip.selectAll(\"path\")\n        .data([,])\n        .join(\"path\")\n          .attr(\"fill\", \"white\")\n          .attr(\"stroke\", \"black\");\n\n      const text = tooltip.selectAll(\"text\")\n        .data([,])\n        .join(\"text\")\n        .call(text =&gt; text\n          .selectAll(\"tspan\")\n          .data([formatDate(ex_lm[i].ano), formatValue(ex_lm[i].ex)])\n          .join(\"tspan\")\n            .attr(\"x\", 0)\n            .attr(\"y\", (_, i) =&gt; `${i * 1.1}em`)\n            .attr(\"font-weight\", (_, i) =&gt; i ? null : \"bold\")\n            .text(d =&gt; d));\n\n      size(text, path);\n    }\n\n    function pointerleft() {\n      tooltip.style(\"display\", \"none\");\n    }*/\n\n    // Wraps the text with a callout path of the correct size, as measured in the page.\n    function size(text, path) {\n      const {x, y, width: w, height: h} = text.node().getBBox();\n      text.attr(\"transform\", `translate(${-w / 2},${15 - y})`);\n      path.attr(\"d\", `M${-w / 2 - 10},5H-5l5,-5l5,5H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n    }\n\n    return svg.node();\n  }\n\n  //Lee-Carter\n  else if (modelo.includes('Lee-Carter')){\n    const ptBRLocaleDefinition = {\n      decimal: \",\",\n      thousands: \"\",\n      grouping: [3],\n      currency: [\"R$\", \"\"]\n    };\n    d3.formatDefaultLocale(ptBRLocaleDefinition);\n\n    // Declare the chart dimensions and margins.\n    const width = 760;\n    const height = 500;\n    const marginTop = 20;\n    const marginRight = 30;\n    const marginBottom = 30;\n    const marginLeft = 40;\n\n    // Declare the x (horizontal position) scale.\n    const x = d3.scaleLinear(d3.extent(ex_lc, d =&gt; d.ano), [marginLeft, width - marginRight]);\n\n    // Declare the y (vertical position) scale.\n    const y = d3.scaleLinear([d3.min(ex_lc, d =&gt; d.ex)-1, d3.max(ex_lc, d =&gt; d.ex)+1], [height - marginBottom, marginTop]);\n\n    // Declare the line generator.\n    const line = d3.line()\n        .x(d =&gt; x(d.ano))\n        .y(d =&gt; y(d.ex));\n\n    // Create the SVG container.\n    const svg = d3.create(\"svg\")\n        .attr(\"viewBox\", [0, 0, width, height])\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic; font: 10px sans-serif;\")\n        .style(\"-webkit-tap-highlight-color\", \"transparent\")\n        .style(\"overflow\", \"visible\")\n        //.on(\"pointerenter pointermove\", pointermoved)\n        //.on(\"pointerleave\", pointerleft)\n        .on(\"touchstart\", event =&gt; event.preventDefault());\n\n    // Add the x-axis.\n    svg.append(\"g\")\n        .attr(\"transform\", `translate(0,${height - marginBottom})`)\n        .call(d3.axisBottom(x).ticks(width / 80).tickSizeOuter(0));\n\n    // Add the y-axis, remove the domain line, add grid lines and a label.\n    svg.append(\"g\")\n        .attr(\"transform\", `translate(${marginLeft},0)`)\n        .call(d3.axisLeft(y).ticks(height / 40))\n        .call(g =&gt; g.select(\".domain\").remove())\n        .style(\"font-size\", \"12px\")\n        .call(g =&gt; g.selectAll(\".tick line\").clone()\n            .attr(\"x2\", width - marginLeft - marginRight)\n            .attr(\"stroke-opacity\", 0.1))\n        .call(g =&gt; g.append(\"text\")\n            .attr(\"x\", -marginLeft)\n            .attr(\"y\", 10)\n            .attr(\"fill\", \"currentColor\")\n            .attr(\"text-anchor\", \"start\")\n            .style(\"font-size\", \"18px\")\n            .text(\"ex\"));\n\n    // Append a path for the line.\n    svg.append(\"path\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"steelblue\")\n        .attr(\"stroke-width\", 1.5)\n        .attr(\"d\", line(ex_lc));\n\n    // Create the tooltip container.\n    /*const tooltip = svg.append(\"g\");\n\n    function formatValue(value) {\n      return value.toLocaleString(\"en\", {\n        style: \"decimal\", // Altera para estilo numérico\n        minimumFractionDigits: 2, // Mantém 2 casas decimais\n        maximumFractionDigits: 2\n      });\n    }\n    \n    function formatDate(date) {\n      return date.toLocaleString(\"pt-BR\", {\n        month: \"short\",\n        day: \"numeric\",\n        year: \"numeric\",\n        timeZone: \"UTC\"\n      });\n    }\n    \n    // Add the event listeners that show or hide the tooltip.\n    const bisect = d3.bisector(d =&gt; d.ano).center;\n    function pointermoved(event) {\n      const i = bisect(ex_lc, x.invert(d3.pointer(event)[0]));\n      tooltip.style(\"display\", null);\n      tooltip.attr(\"transform\", `translate(${x(ex_lc[i].ano)},${y(ex_lc[i].ex)})`);\n\n      const path = tooltip.selectAll(\"path\")\n        .data([,])\n        .join(\"path\")\n          .attr(\"fill\", \"white\")\n          .attr(\"stroke\", \"black\");\n\n      const text = tooltip.selectAll(\"text\")\n        .data([,])\n        .join(\"text\")\n        .call(text =&gt; text\n          .selectAll(\"tspan\")\n          .data([formatDate(ex_lc[i].ano), formatValue(ex_lc[i].ex)])\n          .join(\"tspan\")\n            .attr(\"x\", 0)\n            .attr(\"y\", (_, i) =&gt; `${i * 1.1}em`)\n            .attr(\"font-weight\", (_, i) =&gt; i ? null : \"bold\")\n            .text(d =&gt; d));\n\n      size(text, path);\n    }\n\n    function pointerleft() {\n      tooltip.style(\"display\", \"none\");\n    }*/\n\n    // Wraps the text with a callout path of the correct size, as measured in the page.\n    function size(text, path) {\n      const {x, y, width: w, height: h} = text.node().getBBox();\n      text.attr(\"transform\", `translate(${-w / 2},${15 - y})`);\n      path.attr(\"d\", `M${-w / 2 - 10},5H-5l5,-5l5,5H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n    }\n\n    return svg.node();\n  }\n}\n\n\n\n\n\n\n\n{  \n  if (modelo.includes(\"ARIMA+ETS\")) {\n    return html`&lt;p&gt;Para acessar a metodologia utilizada no modelo combinado ARIMA com ETS, &lt;a href=\"metodologia.html#modelo-h%C3%ADbrido-arima-ets-com-pondera%C3%A7%C3%A3o-din%C3%A2mica\"&gt;clique aqui&lt;/a&gt;.&lt;/p&gt;`;\n  }\n  else if (modelo.includes(\"Lee-Miller\")) {\n    return html`&lt;p&gt;Para acessar a metodologia utilizada no modelo Lee-Miller, &lt;a href=\"metodologia.html#modelo-lee-carter\"&gt;clique aqui&lt;/a&gt;.&lt;/p&gt;`;\n  }\n  else if (modelo.includes(\"Lee-Carter\")) {\n    return html`&lt;p&gt;Para acessar a metodologia utilizada no modelo Lee-Carter, &lt;a href=\"metodologia.html#modelo-lee-carter\"&gt;clique aqui&lt;/a&gt;.&lt;/p&gt;`;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\nhtml`&lt;h2&gt;Tábua prevista pelo modelo combinado (ARIMA+ETS)&lt;/h2&gt;`\n\n\n\n\n\n\n\nInputs.table(tabua_comb)\n\n\n\n\n\n\n\nhtml`&lt;h2&gt;Tábua prevista pelo modelo Lee-Miller&lt;/h2&gt;`\n\n\n\n\n\n\n\nInputs.table(tabua_lm)\n\n\n\n\n\n\n\nhtml`&lt;h2&gt;Tábua prevista pelo modelo Lee-Carter&lt;/h2&gt;`\n\n\n\n\n\n\n\nInputs.table(tabua_lc)\n\n\n\n\n\n\n\nhtml`\n&lt;body&gt;\n    &lt;br&gt;\n    &lt;p&gt;Baixar tábua de previsão do modelo combinado\n    &lt;a href=\"dados/dados1/tabua_comb.csv\" download&gt;\n        ARIMA+ETS.\n    &lt;/a&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n\n&lt;body&gt;\n    &lt;br&gt;\n    &lt;p&gt;Baixar tábua de previsão do modelo \n    &lt;a href=\"dados/dados2/tabua_lm.csv\" download&gt;\n        Lee-Miller.\n    &lt;/a&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n\n&lt;body&gt;\n    &lt;br&gt;\n    &lt;p&gt;Baixar tábua de previsão do modelo \n    &lt;a href=\"dados/dados2/tabua_lc.csv\" download&gt;\n        Lee-Carter.\n    &lt;/a&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n`"
  },
  {
    "objectID": "previsao.html",
    "href": "previsao.html",
    "title": "Previsões",
    "section": "",
    "text": "data = await FileAttachment(\"dados/dados2/erros.csv\").csv()\ntabua_comb = await FileAttachment(\"dados/dados1/previsoes_combinado.csv\").csv()"
  },
  {
    "objectID": "previsao.html#taxa-central-de-mortalidade-de-2000-à-2023-para-os-modelos-de-lee-miler-e-lee-carter",
    "href": "previsao.html#taxa-central-de-mortalidade-de-2000-à-2023-para-os-modelos-de-lee-miler-e-lee-carter",
    "title": "Previsões",
    "section": "Taxa central de mortalidade de 2000 à 2023 para os modelos de Lee-Miler e Lee-Carter",
    "text": "Taxa central de mortalidade de 2000 à 2023 para os modelos de Lee-Miler e Lee-Carter\n\nviewof qual = Inputs.checkbox(['Lee-Carter', 'Lee-Miler'], {value: ['Lee-Miler', 'Lee-Carter'], label: 'Modelos:'}) \n\nviewof regiao = Inputs.select([\n  \"Brasil\",\n  \"Norte\",\n  \"Nordeste\",\n  \"Centro-Oeste\",\n  \"Sudeste\",\n  \"Sul\",\n  \"Acre\",\n  \"Alagoas\",\n  \"Amapá\",\n  \"Amazonas\",\n  \"Bahia\",\n  \"Ceará\",\n  \"Distrito Federal\",\n  \"Espírito Santo\",\n  \"Goiás\",\n  \"Maranhão\",\n  \"Mato Grosso\",\n  \"Mato Grosso do Sul\",\n  \"Minas Gerais\",\n  \"Pará\",\n  \"Paraíba\",\n  \"Paraná\",\n  \"Pernambuco\",\n  \"Piauí\",\n  \"Rio de Janeiro\",\n  \"Rio Grande do Norte\",\n  \"Rio Grande do Sul\",\n  \"Rondônia\",\n  \"Roraima\",\n  \"Santa Catarina\",\n  \"São Paulo\",\n  \"Sergipe\",\n  \"Tocantins\"],\n  {\n        value: ['Brasil'],\n        label: \"Local: \"\n    })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGráficoDados\n\n\n\nfunction lm_lc(){\n  //lm e lc\n  {\n  const width = 800;\n  const height = 700; // Aumentei a altura total para acomodar a legenda\n  const legendHeight = 50; // Altura dedicada para a legenda\n  const margin = { top: 30, right: 20, bottom: 40, left: 50 };\n  const numRows = 5;\n  const numCols = 4;\n  \n  // Cores para cada série\n  const cores = {\n    mx_lm: \"blue\",\n    mx_lc: \"darkred\"\n  };\n  \n  const estilos = {\n  mx_lm: \"solid\",      // Linha sólida\n  mx_lc: \"dashed\"      // Linha tracejada\n  };\n\n  const svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\n  const ageGroups = [...new Set(data.map(d =&gt; d.faixa_etaria))].sort();\n  \n  // Título geral\n  svg.append(\"text\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .text(\"Mortalidade por Faixa Etária no Brasil (2000 - 2023) por Modelos de Previsão\")\n    .attr(\"font-size\", \"16px\")\n    .attr(\"font-weight\", \"bold\");\n    \n  // Adiciona legenda em linha horizontal acima dos gráficos\n  const legend = svg.append(\"g\")\n    .attr(\"transform\", `translate(${width/2 - 150}, 35)`);\n    \n  const legendItems = Object.entries(cores);\n  const legendItemWidth = 100; // Largura de cada item da legenda\n  \n  legendItems.forEach(([key, color], i) =&gt; {\n    const itemX = i * legendItemWidth;\n    \n    legend.append(\"rect\")\n      .attr(\"x\", itemX)\n      .attr(\"y\", 0)\n      .attr(\"width\", 15)\n      .attr(\"height\", 15)\n      .attr(\"fill\", color);\n      \n    legend.append(\"text\")\n      .attr(\"x\", itemX + 20)\n      .attr(\"y\", 12)\n      .text(key.charAt(0).toUpperCase() + key.slice(1))\n      .attr(\"font-size\", \"12px\");\n  });\n\n  // Ajuste a área dos gráficos para começar após a legenda\n  const graphsStartY = legendHeight + 10;\n  \n  const subplotWidth = width / numCols;\n  const subplotHeight = (height - graphsStartY) / numRows;\n\n  for (let row = 0; row &lt; numRows; row++) {\n    for (let col = 0; col &lt; numCols; col++) {\n      const index = row * numCols + col;\n      if (index &gt;= ageGroups.length) continue;\n      \n      const currentAge = ageGroups[index];\n      const subplot = svg.append(\"g\")\n        .attr(\"transform\", `translate(${col * subplotWidth}, ${graphsStartY + row * subplotHeight})`);\n      \n      // Processamento dos dados - filtrando por faixa etária\n      const filteredData = data.filter(d =&gt; \n          d.faixa_etaria === currentAge && \n          d.regiao === regiao && \n          d.taxa === 'Total'\n        ).map(d =&gt; ({\n          ...d,\n          ano: +d.ano,\n          mx_lm: Math.log(+d.mx_lm),\n          mx_lc: Math.log(+d.mx_lc)  // Adiciona transformação\n        })).sort((a, b) =&gt; a.ano - b.ano);\n      \n      // Verifica se existem dados para esta faixa etária\n      if (filteredData.length === 0) {\n        subplot.append(\"text\")\n          .attr(\"x\", subplotWidth / 2)\n          .attr(\"y\", subplotHeight / 2)\n          .attr(\"text-anchor\", \"middle\")\n          .text(`Sem dados para: ${currentAge}`)\n          .attr(\"font-size\", \"12px\");\n        continue;\n      }\n      \n      // Escalas atualizadas\n      const xScale = d3.scaleLinear()\n        .domain(d3.extent(filteredData, d =&gt; d.ano))\n        .range([margin.left, subplotWidth - margin.right]);\n\n      const yValues = filteredData.flatMap(d =&gt; [d.mx_lm, d.mx_lc]);\n      const yScale = d3.scaleLinear()\n        .domain([d3.min(yValues), d3.max(yValues)]).nice()\n        .range([subplotHeight - margin.bottom, margin.top]);\n      \n      // Eixos\n      subplot.append(\"g\")\n        .attr(\"transform\", `translate(0, ${subplotHeight - margin.bottom})`)\n        .call(d3.axisBottom(xScale).ticks(5))\n        .append(\"text\")\n        .attr(\"x\", subplotWidth / 2)\n        .attr(\"y\", 30)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Ano\")\n        .attr(\"fill\", \"black\");\n\n      subplot.append(\"g\")\n        .attr(\"transform\", `translate(${margin.left}, 0)`)\n        .call(d3.axisLeft(yScale).ticks(5))\n        .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", -30)\n        .attr(\"x\", -subplotHeight / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"log(Mx)\")\n        .attr(\"fill\", \"black\");\n\n      // Função para gerar linhas\n      const gerarLinha = (variavel, cor, estilo) =&gt; {\n        const linha = d3.line()\n          .x(d =&gt; xScale(d.ano))\n          .y(d =&gt; yScale(d[variavel]));\n          //.curve(d3.curveMonotoneX); // Adiciona suavização para as linhas\n        \n        subplot.append(\"path\")\n          .datum(filteredData)\n          .attr(\"d\", linha)\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", cor)\n          .attr(\"stroke-dasharray\", estilo === \"dashed\" ? \"5,5\" : \"0\")\n          .attr(\"stroke-width\", 2);\n\n      };\n\n      // Adiciona as três linhas\n      gerarLinha(\"mx_lm\", cores.mx_lm, estilos.mx_lm);\n      gerarLinha(\"mx_lc\", cores.mx_lc, estilos.mx_lc);\n      \n      // Título\n      subplot.append(\"text\")\n        .attr(\"x\", subplotWidth / 2)\n        .attr(\"y\", margin.top / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(`Faixa: ${currentAge}`)\n        .attr(\"font-size\", \"12px\")\n        .attr(\"font-weight\", \"bold\");\n    }\n  }\n    \n  return svg.node();\n}}\n\nfunction mx_lm(){\n  //real e lm\n  {\n  const width = 800;\n  const height = 700; // Aumentei a altura total para acomodar a legenda\n  const legendHeight = 50; // Altura dedicada para a legenda\n  const margin = { top: 30, right: 20, bottom: 40, left: 50 };\n  const numRows = 5;\n  const numCols = 4;\n  \n  // Cores para cada série\n  const cores = {\n    mx_lm: \"blue\",\n    mx_lc: \"darckred\"\n  };\n  \n  const estilos = {\n  mx_lm: \"solid\",      // Linha sólida\n  mx_lc: \"dashed\"      // Linha tracejada\n  };\n\n  const svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\n  const ageGroups = [...new Set(data.map(d =&gt; d.faixa_etaria))].sort();\n  \n  // Título geral\n  svg.append(\"text\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .text(\"Mortalidade por Faixa Etária no Brasil (2000 - 2023) por Modelos de Previsão\")\n    .attr(\"font-size\", \"16px\")\n    .attr(\"font-weight\", \"bold\");\n    \n  // Adiciona legenda em linha horizontal acima dos gráficos\n  const legend = svg.append(\"g\")\n    .attr(\"transform\", `translate(${width/2 - 150}, 35)`);\n    \n  const legendItems = Object.entries(cores);\n  const legendItemWidth = 100; // Largura de cada item da legenda\n  \n  legendItems.forEach(([key, color], i) =&gt; {\n    const itemX = i * legendItemWidth;\n    \n    legend.append(\"rect\")\n      .attr(\"x\", itemX)\n      .attr(\"y\", 0)\n      .attr(\"width\", 15)\n      .attr(\"height\", 15)\n      .attr(\"fill\", color);\n      \n    legend.append(\"text\")\n      .attr(\"x\", itemX + 20)\n      .attr(\"y\", 12)\n      .text(key.charAt(0).toUpperCase() + key.slice(1))\n      .attr(\"font-size\", \"12px\");\n  });\n\n  // Ajuste a área dos gráficos para começar após a legenda\n  const graphsStartY = legendHeight + 10;\n  \n  const subplotWidth = width / numCols;\n  const subplotHeight = (height - graphsStartY) / numRows;\n\n  for (let row = 0; row &lt; numRows; row++) {\n    for (let col = 0; col &lt; numCols; col++) {\n      const index = row * numCols + col;\n      if (index &gt;= ageGroups.length) continue;\n      \n      const currentAge = ageGroups[index];\n      const subplot = svg.append(\"g\")\n        .attr(\"transform\", `translate(${col * subplotWidth}, ${graphsStartY + row * subplotHeight})`);\n      \n      // Processamento dos dados - filtrando por faixa etária\n      const filteredData = data.filter(d =&gt; \n          d.faixa_etaria === currentAge && \n          d.regiao === regiao && \n          d.taxa === 'Total'\n        ).map(d =&gt; ({\n          ...d,\n          ano: +d.ano,\n          mx_lm: Math.log(+d.mx_lm),\n          mx_lc: Math.log(+d.mx_lc)  // Adiciona transformação\n        })).sort((a, b) =&gt; a.ano - b.ano);\n      \n      // Verifica se existem dados para esta faixa etária\n      if (filteredData.length === 0) {\n        subplot.append(\"text\")\n          .attr(\"x\", subplotWidth / 2)\n          .attr(\"y\", subplotHeight / 2)\n          .attr(\"text-anchor\", \"middle\")\n          .text(`Sem dados para: ${currentAge}`)\n          .attr(\"font-size\", \"12px\");\n        continue;\n      }\n      \n      // Escalas atualizadas\n      const xScale = d3.scaleLinear()\n        .domain(d3.extent(filteredData, d =&gt; d.ano))\n        .range([margin.left, subplotWidth - margin.right]);\n\n      const yValues = filteredData.flatMap(d =&gt; [d.mx_lm, d.mx_lc]);\n      const yScale = d3.scaleLinear()\n        .domain([d3.min(yValues), d3.max(yValues)]).nice()\n        .range([subplotHeight - margin.bottom, margin.top]);\n      \n      // Eixos\n      subplot.append(\"g\")\n        .attr(\"transform\", `translate(0, ${subplotHeight - margin.bottom})`)\n        .call(d3.axisBottom(xScale).ticks(5))\n        .append(\"text\")\n        .attr(\"x\", subplotWidth / 2)\n        .attr(\"y\", 30)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Ano\")\n        .attr(\"fill\", \"black\");\n\n      subplot.append(\"g\")\n        .attr(\"transform\", `translate(${margin.left}, 0)`)\n        .call(d3.axisLeft(yScale).ticks(5))\n        .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", -30)\n        .attr(\"x\", -subplotHeight / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"log(Mx)\")\n        .attr(\"fill\", \"black\");\n\n      // Função para gerar linhas\n      const gerarLinha = (variavel, cor, estilo) =&gt; {\n        const linha = d3.line()\n          .x(d =&gt; xScale(d.ano))\n          .y(d =&gt; yScale(d[variavel]));\n          //.curve(d3.curveMonotoneX); // Adiciona suavização para as linhas\n        \n        subplot.append(\"path\")\n          .datum(filteredData)\n          .attr(\"d\", linha)\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", cor)\n          .attr(\"stroke-dasharray\", estilo === \"dashed\" ? \"5,5\" : \"0\")\n          .attr(\"stroke-width\", 2);\n\n      };\n\n      // Adiciona as três linhas\n      gerarLinha(\"mx_lm\", cores.mx_lm, estilos.mx_lm);\n      //gerarLinha(\"mx_lc\", cores.mx_lc, estilos.mx_lc);\n      \n      // Título\n      subplot.append(\"text\")\n        .attr(\"x\", subplotWidth / 2)\n        .attr(\"y\", margin.top / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(`Faixa: ${currentAge}`)\n        .attr(\"font-size\", \"12px\")\n        .attr(\"font-weight\", \"bold\");\n    }\n  }\n    \n  return svg.node();\n}\n}\n\nfunction mx_lc(){\n  //real e lc\n  {\n  const width = 800;\n  const height = 700; // Aumentei a altura total para acomodar a legenda\n  const legendHeight = 50; // Altura dedicada para a legenda\n  const margin = { top: 30, right: 20, bottom: 40, left: 50 };\n  const numRows = 5;\n  const numCols = 4;\n  \n  // Cores para cada série\n  const cores = {\n    mx_lm: \"blue\",\n    mx_lc: \"darckred\"\n  };\n  \n  const estilos = {\n  mx_lm: \"solid\",      // Linha sólida\n  mx_lc: \"solid\"      // Linha tracejada\n  };\n\n  const svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\n  const ageGroups = [...new Set(data.map(d =&gt; d.faixa_etaria))].sort();\n  \n  // Título geral\n  svg.append(\"text\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .text(\"Mortalidade por Faixa Etária no Brasil (2000 - 2023) por Modelos de Previsão\")\n    .attr(\"font-size\", \"16px\")\n    .attr(\"font-weight\", \"bold\");\n    \n  // Adiciona legenda em linha horizontal acima dos gráficos\n  const legend = svg.append(\"g\")\n    .attr(\"transform\", `translate(${width/2 - 150}, 35)`);\n    \n  const legendItems = Object.entries(cores);\n  const legendItemWidth = 100; // Largura de cada item da legenda\n  \n  legendItems.forEach(([key, color], i) =&gt; {\n    const itemX = i * legendItemWidth;\n    \n    legend.append(\"rect\")\n      .attr(\"x\", itemX)\n      .attr(\"y\", 0)\n      .attr(\"width\", 15)\n      .attr(\"height\", 15)\n      .attr(\"fill\", color);\n      \n    legend.append(\"text\")\n      .attr(\"x\", itemX + 20)\n      .attr(\"y\", 12)\n      .text(key.charAt(0).toUpperCase() + key.slice(1))\n      .attr(\"font-size\", \"12px\");\n  });\n\n  // Ajuste a área dos gráficos para começar após a legenda\n  const graphsStartY = legendHeight + 10;\n  \n  const subplotWidth = width / numCols;\n  const subplotHeight = (height - graphsStartY) / numRows;\n\n  for (let row = 0; row &lt; numRows; row++) {\n    for (let col = 0; col &lt; numCols; col++) {\n      const index = row * numCols + col;\n      if (index &gt;= ageGroups.length) continue;\n      \n      const currentAge = ageGroups[index];\n      const subplot = svg.append(\"g\")\n        .attr(\"transform\", `translate(${col * subplotWidth}, ${graphsStartY + row * subplotHeight})`);\n      \n      // Processamento dos dados - filtrando por faixa etária\n      const filteredData = data.filter(d =&gt; \n          d.faixa_etaria === currentAge && \n          d.regiao === regiao && \n          d.taxa === 'Total'\n        ).map(d =&gt; ({\n          ...d,\n          ano: +d.ano,\n          mx_lm: Math.log(+d.mx_lm),\n          mx_lc: Math.log(+d.mx_lc)  // Adiciona transformação\n        })).sort((a, b) =&gt; a.ano - b.ano);\n      \n      // Verifica se existem dados para esta faixa etária\n      if (filteredData.length === 0) {\n        subplot.append(\"text\")\n          .attr(\"x\", subplotWidth / 2)\n          .attr(\"y\", subplotHeight / 2)\n          .attr(\"text-anchor\", \"middle\")\n          .text(`Sem dados para: ${currentAge}`)\n          .attr(\"font-size\", \"12px\");\n        continue;\n      }\n      \n      // Escalas atualizadas\n      const xScale = d3.scaleLinear()\n        .domain(d3.extent(filteredData, d =&gt; d.ano))\n        .range([margin.left, subplotWidth - margin.right]);\n\n      const yValues = filteredData.flatMap(d =&gt; [d.mx_lm, d.mx_lc]);\n      const yScale = d3.scaleLinear()\n        .domain([d3.min(yValues), d3.max(yValues)]).nice()\n        .range([subplotHeight - margin.bottom, margin.top]);\n      \n      // Eixos\n      subplot.append(\"g\")\n        .attr(\"transform\", `translate(0, ${subplotHeight - margin.bottom})`)\n        .call(d3.axisBottom(xScale).ticks(5))\n        .append(\"text\")\n        .attr(\"x\", subplotWidth / 2)\n        .attr(\"y\", 30)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Ano\")\n        .attr(\"fill\", \"black\");\n\n      subplot.append(\"g\")\n        .attr(\"transform\", `translate(${margin.left}, 0)`)\n        .call(d3.axisLeft(yScale).ticks(5))\n        .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", -30)\n        .attr(\"x\", -subplotHeight / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"log(Mx)\")\n        .attr(\"fill\", \"black\");\n\n      // Função para gerar linhas\n      const gerarLinha = (variavel, cor, estilo) =&gt; {\n        const linha = d3.line()\n          .x(d =&gt; xScale(d.ano))\n          .y(d =&gt; yScale(d[variavel]));\n          //.curve(d3.curveMonotoneX); // Adiciona suavização para as linhas\n        \n        subplot.append(\"path\")\n          .datum(filteredData)\n          .attr(\"d\", linha)\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", cor)\n          .attr(\"stroke-dasharray\", estilo === \"dashed\" ? \"5,5\" : \"0\")\n          .attr(\"stroke-width\", 2);\n\n      };\n\n      // Adiciona as três linhas\n      //gerarLinha(\"mx_lm\", cores.mx_lm, estilos.mx_lm);\n      gerarLinha(\"mx_lc\", cores.mx_lc, estilos.mx_lc);\n      \n      // Título\n      subplot.append(\"text\")\n        .attr(\"x\", subplotWidth / 2)\n        .attr(\"y\", margin.top / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(`Faixa: ${currentAge}`)\n        .attr(\"font-size\", \"12px\")\n        .attr(\"font-weight\", \"bold\");\n    }\n  }\n    \n  return svg.node();\n}}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntotalSelecionado = qual.length;\nrea = qual.includes(\"Observado\")\nlm = qual.includes(\"Lee-Miler\")\nlc = qual.includes(\"Lee-Carter\")\n\n{\n  if(totalSelecionado === 1 ){\n    if (lm) return mx_lm();\n    if (lc) return mx_lc();\n  }else if (totalSelecionado === 2){\n    if (lm && lc) return lm_lc();\n  }else if (totalSelecionado == 0){\n    return html`&lt;p&gt;Nenhum dado selecionado.&lt;/p&gt;`\n  }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhtml`&lt;h1&gt;Modelos&lt;/h1&gt;`\n\n\n\n\n\n\n\nInputs.table(data)\n\n\n\n\n\n\n\nhtml`\n&lt;body&gt;\n    &lt;br&gt;\n    &lt;p&gt;Baixar \n    &lt;a href=\"dados/dados2/erros.csv\" download&gt;\n        dados.\n    &lt;/a&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n`\n\n\n\n\n\n\n\n\n\nGráficosDados\n\n\n\nd3 = require(\"d3@7\")\n\n// Dados e filtros\nprev_comb = await FileAttachment('dados/dados1/previsoes_combinado.csv').csv()\nprev_lm = await FileAttachment('dados/dados2/tabuas_lc.csv').csv() \nprev_lc = await FileAttachment('dados/dados2/tabuas_lm.csv').csv()\n\nviewof sexo = Inputs.radio([\"Ambos\", \"Homens\", \"Mulheres\"], {label: \"Sexo\", value: \"Homens\"})\n\nviewof regiao1 = Inputs.select([\n  \"Brasil\",\n  \"Norte\",\n  \"Nordeste\",\n  \"Centro-Oeste\",\n  \"Sudeste\",\n  \"Sul\",\n  \"Acre\",\n  \"Alagoas\",\n  \"Amapá\",\n  \"Amazonas\",\n  \"Bahia\",\n  \"Ceará\",\n  \"Distrito Federal\",\n  \"Espírito Santo\",\n  \"Goiás\",\n  \"Maranhão\",\n  \"Mato Grosso\",\n  \"Mato Grosso do Sul\",\n  \"Minas Gerais\",\n  \"Pará\",\n  \"Paraíba\",\n  \"Paraná\",\n  \"Pernambuco\",\n  \"Piauí\",\n  \"Rio de Janeiro\",\n  \"Rio Grande do Norte\",\n  \"Rio Grande do Sul\",\n  \"Rondônia\",\n  \"Roraima\",\n  \"Santa Catarina\",\n  \"São Paulo\",\n  \"Sergipe\",\n  \"Tocantins\"],\n  {\n        value: ['Brasil'],\n        label: \"Local: \"\n    })\n\ndata_filter1 = prev_comb.filter(d =&gt; d.Local === regiao1 && d.Sexo === sexo).map(d =&gt; ({\n  ano: +d.Ano,\n  faixa: d.faixa_etaria,\n  prev: Math.log(d.nMx_previsão)\n}))\n\ndata_filter2 = prev_lm.filter(d =&gt; d.local === regiao1 && d.sexo === sexo).map(d =&gt; ({\n  ano: +d.ano,\n  faixa: d.faixa_etaria,\n  prev: Math.log(d.mx_previsto)\n}))\n\ndata_filter3 = prev_lc.filter(d =&gt; d.local === regiao1 && d.sexo === sexo).map(d =&gt; ({\n  ano: +d.ano,\n  faixa: d.faixa_etaria,\n  prev: Math.log(d.mx_previsto)\n}))\n\nviewof qual1 = Inputs.checkbox(\n  ['Combinado', 'Lee-Carter', 'Lee-Miler'], \n  {value: ['Combinado'], label: 'Modelos:'}\n)\n\n// Função principal para criar gráficos\nfunction createChart(data, title) {\n  const width = 800;\n  const height = 550;\n  const margin = {top: 30, right: 20, bottom: 40, left: 50};\n  \n  const svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"viewBox\", [0, 0, width, height])\n    .attr(\"style\", \"max-width: 100%; height: auto;\");\n\n  // Escalas\n  const x = d3.scalePoint()\n    .domain([...new Set(data.map(d =&gt; d.faixa))])\n    .range([margin.left, width - margin.right])\n    .padding(0.5);\n\n  const y = d3.scaleLinear()\n    .domain(d3.extent(data, d =&gt; d.prev)).nice()\n    .range([height - margin.bottom, margin.top]);\n\n  // Eixos\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n    .call(d3.axisBottom(x))\n    .selectAll(\"text\")\n    .style(\"text-anchor\", \"end\")\n    .attr(\"dx\", \"-.8em\")\n    .attr(\"dy\", \".15em\")\n    .attr(\"transform\", \"rotate(-45)\");\n\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},0)`)\n    .call(d3.axisLeft(y).ticks(height / 40))\n    .call(g =&gt; g.select(\".domain\").remove())\n    .call(g =&gt; g.selectAll(\".tick line\").clone()\n      .attr(\"x2\", width - margin.left - margin.right)\n      .attr(\"stroke-opacity\", 0.1));\n\n  // Gradiente e cores\n  const colorScale = d3.scaleSequential(d3.interpolateViridis)\n    .domain([2024, 2070]);\n\n  const defs = svg.append(\"defs\");\n  const nestedData = d3.groups(data, d =&gt; d.ano);\n\n  nestedData.forEach(([year, values]) =&gt; {\n    const gradientId = `gradient-${title}-${year}`;\n    \n    const gradient = defs.append(\"linearGradient\")\n      .attr(\"id\", gradientId)\n      .attr(\"gradientUnits\", \"userSpaceOnUse\")\n      .attr(\"x1\", margin.left)\n      .attr(\"y1\", 0)\n      .attr(\"x2\", width - margin.right)\n      .attr(\"y2\", 0);\n\n    gradient.append(\"stop\")\n      .attr(\"offset\", \"0%\")\n      .attr(\"stop-color\", colorScale(year));\n\n    gradient.append(\"stop\")\n      .attr(\"offset\", \"100%\")\n      .attr(\"stop-color\", colorScale(Math.min(year + 10, 2070)));\n  });\n\n  // Linhas\n  const line = d3.line()\n    .x(d =&gt; x(d.faixa))\n    .y(d =&gt; y(d.prev));\n\n  nestedData.forEach(([year, values]) =&gt; {\n    svg.append(\"path\")\n      .datum(values)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", `url(#gradient-${title}-${year})`)\n      .attr(\"stroke-width\", 2.5)\n      .attr(\"d\", line);\n  });\n\n  // Legenda\n  const legendWidth = 200;\n  const legendHeight = 20;\n  const legendX = width - margin.right - legendWidth;\n  const legendY = margin.top;\n\n  const legendGradient = defs.append(\"linearGradient\")\n    .attr(\"id\", `legend-${title}`)\n    .attr(\"x1\", \"0%\")\n    .attr(\"y1\", \"0%\")\n    .attr(\"x2\", \"100%\")\n    .attr(\"y2\", \"0%\");\n\n  const years = [2024, 2035, 2045, 2055, 2070];\n  years.forEach((year, i) =&gt; {\n    legendGradient.append(\"stop\")\n      .attr(\"offset\", `${i * 100 / (years.length - 1)}%`)\n      .attr(\"stop-color\", colorScale(year));\n  });\n\n  svg.append(\"rect\")\n    .attr(\"x\", legendX)\n    .attr(\"y\", legendY)\n    .attr(\"width\", legendWidth)\n    .attr(\"height\", legendHeight)\n    .style(\"fill\", `url(#legend-${title})`);\n\n  svg.append(\"text\")\n    .attr(\"x\", legendX)\n    .attr(\"y\", legendY - 5)\n    .attr(\"font-size\", \"12px\")\n    .text(\"Anos (2024-2070)\");\n\n  years.forEach((year, i) =&gt; {\n    svg.append(\"text\")\n      .attr(\"x\", legendX + (i * legendWidth / (years.length - 1)))\n      .attr(\"y\", legendY + legendHeight + 15)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", \"10px\")\n      .text(year);\n  });\n\n  // Título\n  svg.append(\"text\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .style(\"font-size\", \"1.2em\")\n    .text(title);\n\n  return svg.node();\n}\n\n// Renderização dos gráficos\n{\n  const container = document.createElement('div');\n  container.style.display = \"grid\";\n  container.style.gap = \"2rem\";\n  container.style.justifyContent = \"center\";\n\n  if (qual1.includes(\"Combinado\")) {\n    container.appendChild(createChart(data_filter1, \"Combinado\"));\n  }\n  if (qual1.includes(\"Lee-Miler\")) {\n    container.appendChild(createChart(data_filter2, \"Lee-Miller\"));\n  }\n  if (qual1.includes(\"Lee-Carter\")) {\n    container.appendChild(createChart(data_filter3, \"Lee-Carter\"));\n  }\n\n  return qual1.length === 0 \n    ? html`&lt;p&gt;Nenhum dado selecionado.&lt;/p&gt;`\n    : container;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhtml`&lt;h1&gt;Tábua Conbiada (Arima + ETS)&lt;/h1&gt;`\n\n\n\n\n\n\n\nInputs.table(prev_comb)\n\n\n\n\n\n\n\nhtml`\n&lt;body&gt;\n    &lt;br&gt;\n    &lt;p&gt;Baixar \n    &lt;a href=\"dados/dados1/tabuas_combinado.csv\" download&gt;\n        dados combinado.\n    &lt;/a&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n`\n\n\n\n\n\n\n\nhtml`&lt;h1&gt;Tábua Lee-Miller&lt;/h1&gt;`\n\n\n\n\n\n\n\nInputs.table(prev_lm)\n\n\n\n\n\n\n\nhtml`\n&lt;body&gt;\n    &lt;br&gt;\n    &lt;p&gt;Baixar \n    &lt;a href=\"dados/dados2/tabuas_lm.csv\" download&gt;\n        dados Lee-Miller.\n    &lt;/a&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n`\n\n\n\n\n\n\n\nhtml`&lt;h1&gt;Tábua Lee-Carter&lt;/h1&gt;`\n\n\n\n\n\n\n\nInputs.table(prev_lc)\n\n\n\n\n\n\n\nhtml`\n&lt;body&gt;\n    &lt;br&gt;\n    &lt;p&gt;Baixar \n    &lt;a href=\"dados/dados2/tabuas_lc.csv\" download&gt;\n        dados Lee-Carter.\n    &lt;/a&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n`"
  },
  {
    "objectID": "modelos.html",
    "href": "modelos.html",
    "title": "Modelos",
    "section": "",
    "text": "d3 = require(\"d3@7\")\n\ndata = await FileAttachment(\"dados/dados2/erros.csv\").csv()\ntabua_comb = await FileAttachment(\"dados/dados1/previsoes_combinado.csv\").csv()"
  },
  {
    "objectID": "modelos.html#taxa-central-de-mortalidade-de-2000-à-2023-para-os-modelos-de-lee-miler-e-lee-carter",
    "href": "modelos.html#taxa-central-de-mortalidade-de-2000-à-2023-para-os-modelos-de-lee-miler-e-lee-carter",
    "title": "Modelos",
    "section": "Taxa central de mortalidade de 2000 à 2023 para os modelos de Lee-Miler e Lee-Carter",
    "text": "Taxa central de mortalidade de 2000 à 2023 para os modelos de Lee-Miler e Lee-Carter\n\nviewof qual = Inputs.checkbox(['Lee-Carter', 'Lee-Miler'], {value: ['Lee-Miler', 'Lee-Carter'], label: 'Modelos:'}) \n\nviewof regiao = Inputs.select([\n  \"Brasil\",\n  \"Norte\",\n  \"Nordeste\",\n  \"Centro-Oeste\",\n  \"Sudeste\",\n  \"Sul\",\n  \"Acre\",\n  \"Alagoas\",\n  \"Amapá\",\n  \"Amazonas\",\n  \"Bahia\",\n  \"Ceará\",\n  \"Distrito Federal\",\n  \"Espírito Santo\",\n  \"Goiás\",\n  \"Maranhão\",\n  \"Mato Grosso\",\n  \"Mato Grosso do Sul\",\n  \"Minas Gerais\",\n  \"Pará\",\n  \"Paraíba\",\n  \"Paraná\",\n  \"Pernambuco\",\n  \"Piauí\",\n  \"Rio de Janeiro\",\n  \"Rio Grande do Norte\",\n  \"Rio Grande do Sul\",\n  \"Rondônia\",\n  \"Roraima\",\n  \"Santa Catarina\",\n  \"São Paulo\",\n  \"Sergipe\",\n  \"Tocantins\"],\n  {\n        value: ['Brasil'],\n        label: \"Local: \"\n    })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGráficoDados\n\n\n\nfunction lm_lc(){\n  //lm e lc\n  {\n  const width = 800;\n  const height = 700; // Aumentei a altura total para acomodar a legenda\n  const legendHeight = 50; // Altura dedicada para a legenda\n  const margin = { top: 30, right: 20, bottom: 40, left: 50 };\n  const numRows = 5;\n  const numCols = 4;\n  \n  // Cores para cada série\n  const cores = {\n    mx_lm: \"blue\",\n    mx_lc: \"darkred\"\n  };\n  \n  const estilos = {\n  mx_lm: \"solid\",      // Linha sólida\n  mx_lc: \"dashed\"      // Linha tracejada\n  };\n\n  const svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\n  const ageGroups = [...new Set(data.map(d =&gt; d.faixa_etaria))].sort();\n  \n  // Título geral\n  svg.append(\"text\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .text(\"Mortalidade por Faixa Etária no Brasil (2000 - 2023) por Modelos de Previsão\")\n    .attr(\"font-size\", \"16px\")\n    .attr(\"font-weight\", \"bold\");\n    \n  // Adiciona legenda em linha horizontal acima dos gráficos\n  const legend = svg.append(\"g\")\n    .attr(\"transform\", `translate(${width/2 - 150}, 35)`);\n    \n  const legendItems = Object.entries(cores);\n  const legendItemWidth = 100; // Largura de cada item da legenda\n  \n  legendItems.forEach(([key, color], i) =&gt; {\n    const itemX = i * legendItemWidth;\n    \n    legend.append(\"rect\")\n      .attr(\"x\", itemX)\n      .attr(\"y\", 0)\n      .attr(\"width\", 15)\n      .attr(\"height\", 15)\n      .attr(\"fill\", color);\n      \n    legend.append(\"text\")\n      .attr(\"x\", itemX + 20)\n      .attr(\"y\", 12)\n      .text(key.charAt(0).toUpperCase() + key.slice(1))\n      .attr(\"font-size\", \"12px\");\n  });\n\n  // Ajuste a área dos gráficos para começar após a legenda\n  const graphsStartY = legendHeight + 10;\n  \n  const subplotWidth = width / numCols;\n  const subplotHeight = (height - graphsStartY) / numRows;\n\n  for (let row = 0; row &lt; numRows; row++) {\n    for (let col = 0; col &lt; numCols; col++) {\n      const index = row * numCols + col;\n      if (index &gt;= ageGroups.length) continue;\n      \n      const currentAge = ageGroups[index];\n      const subplot = svg.append(\"g\")\n        .attr(\"transform\", `translate(${col * subplotWidth}, ${graphsStartY + row * subplotHeight})`);\n      \n      // Processamento dos dados - filtrando por faixa etária\n      const filteredData = data.filter(d =&gt; \n          d.faixa_etaria === currentAge && \n          d.regiao === regiao && \n          d.taxa === 'Total'\n        ).map(d =&gt; ({\n          ...d,\n          ano: +d.ano,\n          mx_lm: Math.log(+d.mx_lm),\n          mx_lc: Math.log(+d.mx_lc)  // Adiciona transformação\n        })).sort((a, b) =&gt; a.ano - b.ano);\n      \n      // Verifica se existem dados para esta faixa etária\n      if (filteredData.length === 0) {\n        subplot.append(\"text\")\n          .attr(\"x\", subplotWidth / 2)\n          .attr(\"y\", subplotHeight / 2)\n          .attr(\"text-anchor\", \"middle\")\n          .text(`Sem dados para: ${currentAge}`)\n          .attr(\"font-size\", \"12px\");\n        continue;\n      }\n      \n      // Escalas atualizadas\n      const xScale = d3.scaleLinear()\n        .domain(d3.extent(filteredData, d =&gt; d.ano))\n        .range([margin.left, subplotWidth - margin.right]);\n\n      const yValues = filteredData.flatMap(d =&gt; [d.mx_lm, d.mx_lc]);\n      const yScale = d3.scaleLinear()\n        .domain([d3.min(yValues), d3.max(yValues)]).nice()\n        .range([subplotHeight - margin.bottom, margin.top]);\n      \n      // Eixos\n      subplot.append(\"g\")\n        .attr(\"transform\", `translate(0, ${subplotHeight - margin.bottom})`)\n        .call(d3.axisBottom(xScale).ticks(5))\n        .append(\"text\")\n        .attr(\"x\", subplotWidth / 2)\n        .attr(\"y\", 30)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Ano\")\n        .attr(\"fill\", \"black\");\n\n      subplot.append(\"g\")\n        .attr(\"transform\", `translate(${margin.left}, 0)`)\n        .call(d3.axisLeft(yScale).ticks(5))\n        .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", -30)\n        .attr(\"x\", -subplotHeight / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"log(Mx)\")\n        .attr(\"fill\", \"black\");\n\n      // Função para gerar linhas\n      const gerarLinha = (variavel, cor, estilo) =&gt; {\n        const linha = d3.line()\n          .x(d =&gt; xScale(d.ano))\n          .y(d =&gt; yScale(d[variavel]));\n          //.curve(d3.curveMonotoneX); // Adiciona suavização para as linhas\n        \n        subplot.append(\"path\")\n          .datum(filteredData)\n          .attr(\"d\", linha)\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", cor)\n          .attr(\"stroke-dasharray\", estilo === \"dashed\" ? \"5,5\" : \"0\")\n          .attr(\"stroke-width\", 2);\n\n      };\n\n      // Adiciona as três linhas\n      gerarLinha(\"mx_lm\", cores.mx_lm, estilos.mx_lm);\n      gerarLinha(\"mx_lc\", cores.mx_lc, estilos.mx_lc);\n      \n      // Título\n      subplot.append(\"text\")\n        .attr(\"x\", subplotWidth / 2)\n        .attr(\"y\", margin.top / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(`Faixa: ${currentAge}`)\n        .attr(\"font-size\", \"12px\")\n        .attr(\"font-weight\", \"bold\");\n    }\n  }\n    \n  return svg.node();\n}}\n\nfunction mx_lm(){\n  //real e lm\n  {\n  const width = 800;\n  const height = 700; // Aumentei a altura total para acomodar a legenda\n  const legendHeight = 50; // Altura dedicada para a legenda\n  const margin = { top: 30, right: 20, bottom: 40, left: 50 };\n  const numRows = 5;\n  const numCols = 4;\n  \n  // Cores para cada série\n  const cores = {\n    mx_lm: \"blue\",\n    mx_lc: \"darckred\"\n  };\n  \n  const estilos = {\n  mx_lm: \"solid\",      // Linha sólida\n  mx_lc: \"dashed\"      // Linha tracejada\n  };\n\n  const svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\n  const ageGroups = [...new Set(data.map(d =&gt; d.faixa_etaria))].sort();\n  \n  // Título geral\n  svg.append(\"text\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .text(\"Mortalidade por Faixa Etária no Brasil (2000 - 2023) por Modelos de Previsão\")\n    .attr(\"font-size\", \"16px\")\n    .attr(\"font-weight\", \"bold\");\n    \n  // Adiciona legenda em linha horizontal acima dos gráficos\n  const legend = svg.append(\"g\")\n    .attr(\"transform\", `translate(${width/2 - 150}, 35)`);\n    \n  const legendItems = Object.entries(cores);\n  const legendItemWidth = 100; // Largura de cada item da legenda\n  \n  legendItems.forEach(([key, color], i) =&gt; {\n    const itemX = i * legendItemWidth;\n    \n    legend.append(\"rect\")\n      .attr(\"x\", itemX)\n      .attr(\"y\", 0)\n      .attr(\"width\", 15)\n      .attr(\"height\", 15)\n      .attr(\"fill\", color);\n      \n    legend.append(\"text\")\n      .attr(\"x\", itemX + 20)\n      .attr(\"y\", 12)\n      .text(key.charAt(0).toUpperCase() + key.slice(1))\n      .attr(\"font-size\", \"12px\");\n  });\n\n  // Ajuste a área dos gráficos para começar após a legenda\n  const graphsStartY = legendHeight + 10;\n  \n  const subplotWidth = width / numCols;\n  const subplotHeight = (height - graphsStartY) / numRows;\n\n  for (let row = 0; row &lt; numRows; row++) {\n    for (let col = 0; col &lt; numCols; col++) {\n      const index = row * numCols + col;\n      if (index &gt;= ageGroups.length) continue;\n      \n      const currentAge = ageGroups[index];\n      const subplot = svg.append(\"g\")\n        .attr(\"transform\", `translate(${col * subplotWidth}, ${graphsStartY + row * subplotHeight})`);\n      \n      // Processamento dos dados - filtrando por faixa etária\n      const filteredData = data.filter(d =&gt; \n          d.faixa_etaria === currentAge && \n          d.regiao === regiao && \n          d.taxa === 'Total'\n        ).map(d =&gt; ({\n          ...d,\n          ano: +d.ano,\n          mx_lm: Math.log(+d.mx_lm),\n          mx_lc: Math.log(+d.mx_lc)  // Adiciona transformação\n        })).sort((a, b) =&gt; a.ano - b.ano);\n      \n      // Verifica se existem dados para esta faixa etária\n      if (filteredData.length === 0) {\n        subplot.append(\"text\")\n          .attr(\"x\", subplotWidth / 2)\n          .attr(\"y\", subplotHeight / 2)\n          .attr(\"text-anchor\", \"middle\")\n          .text(`Sem dados para: ${currentAge}`)\n          .attr(\"font-size\", \"12px\");\n        continue;\n      }\n      \n      // Escalas atualizadas\n      const xScale = d3.scaleLinear()\n        .domain(d3.extent(filteredData, d =&gt; d.ano))\n        .range([margin.left, subplotWidth - margin.right]);\n\n      const yValues = filteredData.flatMap(d =&gt; [d.mx_lm, d.mx_lc]);\n      const yScale = d3.scaleLinear()\n        .domain([d3.min(yValues), d3.max(yValues)]).nice()\n        .range([subplotHeight - margin.bottom, margin.top]);\n      \n      // Eixos\n      subplot.append(\"g\")\n        .attr(\"transform\", `translate(0, ${subplotHeight - margin.bottom})`)\n        .call(d3.axisBottom(xScale).ticks(5))\n        .append(\"text\")\n        .attr(\"x\", subplotWidth / 2)\n        .attr(\"y\", 30)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Ano\")\n        .attr(\"fill\", \"black\");\n\n      subplot.append(\"g\")\n        .attr(\"transform\", `translate(${margin.left}, 0)`)\n        .call(d3.axisLeft(yScale).ticks(5))\n        .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", -30)\n        .attr(\"x\", -subplotHeight / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"log(Mx)\")\n        .attr(\"fill\", \"black\");\n\n      // Função para gerar linhas\n      const gerarLinha = (variavel, cor, estilo) =&gt; {\n        const linha = d3.line()\n          .x(d =&gt; xScale(d.ano))\n          .y(d =&gt; yScale(d[variavel]));\n          //.curve(d3.curveMonotoneX); // Adiciona suavização para as linhas\n        \n        subplot.append(\"path\")\n          .datum(filteredData)\n          .attr(\"d\", linha)\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", cor)\n          .attr(\"stroke-dasharray\", estilo === \"dashed\" ? \"5,5\" : \"0\")\n          .attr(\"stroke-width\", 2);\n\n      };\n\n      // Adiciona as três linhas\n      gerarLinha(\"mx_lm\", cores.mx_lm, estilos.mx_lm);\n      //gerarLinha(\"mx_lc\", cores.mx_lc, estilos.mx_lc);\n      \n      // Título\n      subplot.append(\"text\")\n        .attr(\"x\", subplotWidth / 2)\n        .attr(\"y\", margin.top / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(`Faixa: ${currentAge}`)\n        .attr(\"font-size\", \"12px\")\n        .attr(\"font-weight\", \"bold\");\n    }\n  }\n    \n  return svg.node();\n}\n}\n\nfunction mx_lc(){\n  //real e lc\n  {\n  const width = 800;\n  const height = 700; // Aumentei a altura total para acomodar a legenda\n  const legendHeight = 50; // Altura dedicada para a legenda\n  const margin = { top: 30, right: 20, bottom: 40, left: 50 };\n  const numRows = 5;\n  const numCols = 4;\n  \n  // Cores para cada série\n  const cores = {\n    mx_lm: \"blue\",\n    mx_lc: \"darckred\"\n  };\n  \n  const estilos = {\n  mx_lm: \"solid\",      // Linha sólida\n  mx_lc: \"solid\"      // Linha tracejada\n  };\n\n  const svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\n  const ageGroups = [...new Set(data.map(d =&gt; d.faixa_etaria))].sort();\n  \n  // Título geral\n  svg.append(\"text\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .text(\"Mortalidade por Faixa Etária no Brasil (2000 - 2023) por Modelos de Previsão\")\n    .attr(\"font-size\", \"16px\")\n    .attr(\"font-weight\", \"bold\");\n    \n  // Adiciona legenda em linha horizontal acima dos gráficos\n  const legend = svg.append(\"g\")\n    .attr(\"transform\", `translate(${width/2 - 150}, 35)`);\n    \n  const legendItems = Object.entries(cores);\n  const legendItemWidth = 100; // Largura de cada item da legenda\n  \n  legendItems.forEach(([key, color], i) =&gt; {\n    const itemX = i * legendItemWidth;\n    \n    legend.append(\"rect\")\n      .attr(\"x\", itemX)\n      .attr(\"y\", 0)\n      .attr(\"width\", 15)\n      .attr(\"height\", 15)\n      .attr(\"fill\", color);\n      \n    legend.append(\"text\")\n      .attr(\"x\", itemX + 20)\n      .attr(\"y\", 12)\n      .text(key.charAt(0).toUpperCase() + key.slice(1))\n      .attr(\"font-size\", \"12px\");\n  });\n\n  // Ajuste a área dos gráficos para começar após a legenda\n  const graphsStartY = legendHeight + 10;\n  \n  const subplotWidth = width / numCols;\n  const subplotHeight = (height - graphsStartY) / numRows;\n\n  for (let row = 0; row &lt; numRows; row++) {\n    for (let col = 0; col &lt; numCols; col++) {\n      const index = row * numCols + col;\n      if (index &gt;= ageGroups.length) continue;\n      \n      const currentAge = ageGroups[index];\n      const subplot = svg.append(\"g\")\n        .attr(\"transform\", `translate(${col * subplotWidth}, ${graphsStartY + row * subplotHeight})`);\n      \n      // Processamento dos dados - filtrando por faixa etária\n      const filteredData = data.filter(d =&gt; \n          d.faixa_etaria === currentAge && \n          d.regiao === regiao && \n          d.taxa === 'Total'\n        ).map(d =&gt; ({\n          ...d,\n          ano: +d.ano,\n          mx_lm: Math.log(+d.mx_lm),\n          mx_lc: Math.log(+d.mx_lc)  // Adiciona transformação\n        })).sort((a, b) =&gt; a.ano - b.ano);\n      \n      // Verifica se existem dados para esta faixa etária\n      if (filteredData.length === 0) {\n        subplot.append(\"text\")\n          .attr(\"x\", subplotWidth / 2)\n          .attr(\"y\", subplotHeight / 2)\n          .attr(\"text-anchor\", \"middle\")\n          .text(`Sem dados para: ${currentAge}`)\n          .attr(\"font-size\", \"12px\");\n        continue;\n      }\n      \n      // Escalas atualizadas\n      const xScale = d3.scaleLinear()\n        .domain(d3.extent(filteredData, d =&gt; d.ano))\n        .range([margin.left, subplotWidth - margin.right]);\n\n      const yValues = filteredData.flatMap(d =&gt; [d.mx_lm, d.mx_lc]);\n      const yScale = d3.scaleLinear()\n        .domain([d3.min(yValues), d3.max(yValues)]).nice()\n        .range([subplotHeight - margin.bottom, margin.top]);\n      \n      // Eixos\n      subplot.append(\"g\")\n        .attr(\"transform\", `translate(0, ${subplotHeight - margin.bottom})`)\n        .call(d3.axisBottom(xScale).ticks(5))\n        .append(\"text\")\n        .attr(\"x\", subplotWidth / 2)\n        .attr(\"y\", 30)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Ano\")\n        .attr(\"fill\", \"black\");\n\n      subplot.append(\"g\")\n        .attr(\"transform\", `translate(${margin.left}, 0)`)\n        .call(d3.axisLeft(yScale).ticks(5))\n        .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", -30)\n        .attr(\"x\", -subplotHeight / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"log(Mx)\")\n        .attr(\"fill\", \"black\");\n\n      // Função para gerar linhas\n      const gerarLinha = (variavel, cor, estilo) =&gt; {\n        const linha = d3.line()\n          .x(d =&gt; xScale(d.ano))\n          .y(d =&gt; yScale(d[variavel]));\n          //.curve(d3.curveMonotoneX); // Adiciona suavização para as linhas\n        \n        subplot.append(\"path\")\n          .datum(filteredData)\n          .attr(\"d\", linha)\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", cor)\n          .attr(\"stroke-dasharray\", estilo === \"dashed\" ? \"5,5\" : \"0\")\n          .attr(\"stroke-width\", 2);\n\n      };\n\n      // Adiciona as três linhas\n      //gerarLinha(\"mx_lm\", cores.mx_lm, estilos.mx_lm);\n      gerarLinha(\"mx_lc\", cores.mx_lc, estilos.mx_lc);\n      \n      // Título\n      subplot.append(\"text\")\n        .attr(\"x\", subplotWidth / 2)\n        .attr(\"y\", margin.top / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(`Faixa: ${currentAge}`)\n        .attr(\"font-size\", \"12px\")\n        .attr(\"font-weight\", \"bold\");\n    }\n  }\n    \n  return svg.node();\n}}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntotalSelecionado = qual.length;\nrea = qual.includes(\"Observado\")\nlm = qual.includes(\"Lee-Miler\")\nlc = qual.includes(\"Lee-Carter\")\n\n{\n  if(totalSelecionado === 1 ){\n    if (lm) return mx_lm();\n    if (lc) return mx_lc();\n  }else if (totalSelecionado === 2){\n    if (lm && lc) return lm_lc();\n  }else if (totalSelecionado == 0){\n    return html`&lt;p&gt;Nenhum dado selecionado.&lt;/p&gt;`\n  }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhtml`&lt;h1&gt;Modelos&lt;/h1&gt;`\n\n\n\n\n\n\n\nInputs.table(data)\n\n\n\n\n\n\n\nhtml`\n&lt;body&gt;\n    &lt;br&gt;\n    &lt;p&gt;Baixar \n    &lt;a href=\"dados/dados2/erros.csv\" download&gt;\n        dados.\n    &lt;/a&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n`"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sistemas Inteligentes para Gestão de Riscos e Previsões - SIGERIP",
    "section": "",
    "text": "O projeto tem como objetivo principal impactar a comunidade interna e externa por meio do desenvolvimento de sistemas inteligentes de apoio à decisão com enfoque na gestão de riscos e previsão de dados demográficos e atuariais.\n\nviewof contatos = {\n  // Elementos do modal\n  const overlay = document.createElement('div');\n  const modal = document.createElement('div');\n  const closeBtn = document.createElement('span');\n  const content = document.createElement('div');\n\n  // Conteúdo do modal\n  content.innerHTML = `\n  &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css\"&gt;\n  \n    \n    &lt;h3 style=\"margin:0;color:#2c3e50;padding-bottom:15px;border-bottom:2px solid #3498db\"&gt;Equipe SIGERIP&lt;/h3&gt;\n    &lt;div style=\"margin-top:20px;max-width: 450px;height: 450px;padding-right: 10px;overflow-y: scroll;overflow-x: hidden;line-height:1.6\"&gt;\n      &lt;ul class=\"lista-equipe\"&gt;\n\n      &lt;!-- Prof Filipe --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Prof. Dr. Filipe C. L. Duarte&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Coordenador - Tábuas de mortalidade&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"https://www.linkedin.com/in/filipeclduarte/\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; filipe_pb_duarte@hotmail.com\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- Prof Gustavo --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Prof. Dr. Gustavo C. Xavier&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Coordenador Adjunto - Sistema web&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"https://www.linkedin.com/in/gcxavier/\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; gustavocorreiaxavier@gmail.com\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- Prof Herick --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Prof. Dr. Herick C. G. Oliveira&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Colaborador - Mortalidade intantil&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"https://www.linkedin.com/in/herickcidarta/\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; hcidarta@hotmail.com\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n      \n      &lt;!-- TODO: FALTA EMAIL E LINKEDIN Tassia --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Tassia T. S. Oliveira&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Colaboradora&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; email.aqui\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- TODO: falta linkedin Beatriz--&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Beatriz G. Olinpio&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Aluna Voluntária - Mortalidade infantil&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; bgo@academico.ufpb.br\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- Cleo --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Cleo D. Anacleto&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Aluno Bolsista - Tábuas de mortalidade&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"https://www.linkedin.com/in/cleo-decker-anacleto-66a69b133/\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; cleodecker@hotmail.com\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- Cristiane --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Cristiane S. Silva&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Aluna Voluntária - Tábuas de mortalidade&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; css3@academico.ufpb.br\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- TODO: FALTA LINKEDIN Gabrielle --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Gabrielle S. M. Vieira&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Aluna Voluntária - Mortalidade infantil&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; gabrielle.samara230@gmail.com\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- Igor --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Igor B. Kutelak&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Aluno Voluntário - Mortalidade infantil&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"https://www.linkedin.com/in/igor-kutelak-20b10a194/\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; Kutelak.igor@gmail.com\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- Isaias --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Isaias F. S. Sousa&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Aluno Voluntário - Sistema web&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"https://www.linkedin.com/in/isa%C3%ADas-felipe-silva-de-sousa-453902327/\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; isaias.felipe@academico.ufpb.br\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- TODO: FALTA LINKEDIN Jefferson --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Jefferson G. Silva&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Aluno Voluntário - Sistema web&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; jeffeersonguilhermeh@gmail.com\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- Stênio --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;João P. S. F. Silva&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Aluno Voluntário - Tábuas de mortalidade&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"https://www.linkedin.com/in/jo%C3%A3o-pedro-st%C3%AAnio-2861071b3/\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; jpsfs2@academico.ufpb.br\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!--TODO: FALTA LINKEDIN Nathiely --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Nathiely B. Silva&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Aluna Voluntária - Sistema web&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; nathiely.silva@academico.ufpb.br\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n      \n    &lt;/ul&gt;\n    &lt;/div&gt;\n  `;\n\n  // Estilização do modal\n  Object.assign(overlay.style, {\n    display: 'none',\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    zIndex: 1000\n  });\n\n  Object.assign(modal.style, {\n    position: 'fixed',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    backgroundColor: 'white',\n    padding: '25px',\n    borderRadius: '10px',\n    width: 'min(90%, 500px)',\n    boxShadow: '0 5px 15px rgba(0,0,0,0.2)'\n  });\n\n  Object.assign(closeBtn.style, {\n    position: 'absolute',\n    right: '15px',\n    top: '10px',\n    cursor: 'pointer',\n    fontSize: '28px',\n    color: '#666',\n    transition: 'color 0.2s'\n  });\n\n  // Montagem do modal\n  closeBtn.innerHTML = '&times;';\n  modal.append(closeBtn, content);\n  overlay.append(modal);\n  document.body.append(overlay);\n\n  // Container para centralização\n  const container = document.createElement('div');\n  Object.assign(container.style, {\n    display: 'flex',\n    justifyContent: 'center',\n    width: '100%',\n    margin: '30px 0'\n  });\n\n  // Criação do botão centralizado\n  const btn = Inputs.button(\"👥 Conheça Nossa Equipe\");\n  btn.className = \"botao-equipe\"; // ← Adicione esta linha\n\n  // Efeitos de hover\n  btn.addEventListener('mouseenter', () =&gt; {\n    btn.style.transform = 'scale(1.05)';\n    btn.style.boxShadow = '0 6px 8px rgba(0,0,0,0.2)';\n  });\n\n  btn.addEventListener('mouseleave', () =&gt; {\n    btn.style.transform = 'scale(1)';\n    btn.style.boxShadow = '0 4px 6px rgba(0,0,0,0.1)';\n  });\n\n  // Event listeners\n  btn.addEventListener('click', () =&gt; overlay.style.display = 'block');\n  closeBtn.addEventListener('click', () =&gt; overlay.style.display = 'none');\n  overlay.addEventListener('click', e =&gt; e.target === overlay && (overlay.style.display = 'none'));\n  document.addEventListener('keydown', e =&gt; e.key === 'Escape' && (overlay.style.display = 'none'));\n\n  // Adiciona botão ao container\n  container.append(btn);\n  \n  return container;\n}\n\n\n\n\n\n\nhtml`\n&lt;style&gt;\n  /* Estilos Gerais */\n  .equipe-container {\n    display: flex;\n    justify-content: center;\n    margin: 40px 0;\n  }\n\n  .botao-equipe {\n    padding: 15px 35px;\n    background: linear-gradient(135deg, #2c3e50, #3498db);\n    color: white;\n    border: none;\n    border-radius: 8px;\n    cursor: pointer;\n    font-size: 18px;\n    font-weight: 600;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 15px rgba(44, 62, 80, 0.2);\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n\n  .botao-equipe:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 20px rgba(44, 62, 80, 0.3);\n  }\n\n  .modal-overlay {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0,0,0,0.5);\n    z-index: 1000;\n    backdrop-filter: blur(3px);\n  }\n\n  .modal-equipe {\n    position: relative;\n    background: white;\n    padding: 30px;\n    border-radius: 12px;\n    width: 90%;\n    max-width: 600px;\n    margin: 5% auto;\n    box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n  }\n\n  .lista-equipe {\n    list-style: none;\n    padding: 0;\n    margin: 20px 0;\n  }\n\n  .membro-equipe {\n    padding: 15px;\n    margin: 10px 0;\n    background: #f8f9fa;\n    border-radius: 8px;\n    display: flex;\n    align-items: center;\n    gap: 15px;\n    transition: transform 0.2s;\n  }\n\n  .membro-equipe:hover {\n    transform: translateX(10px);\n    background: #f1f3f5;\n  }\n\n  .fechar-modal {\n    position: absolute;\n    top: 15px;\n    right: 20px;\n    font-size: 28px;\n    cursor: pointer;\n    color: #666;\n    transition: color 0.2s;\n  }\n\n  .fechar-modal:hover {\n    color: #333;\n  }\n  .botao-equipe {\n  background: #343a40 !important; /* Azul mais claro */\n  color: #ffffff !important;\n  /* mantém o restante das propriedades */\n}\n&lt;/style&gt;\n\n&lt;script&gt;\n  // JavaScript Corrigido\n  document.addEventListener('DOMContentLoaded', () =&gt; {\n    const btnAbrir = document.getElementById('btnEquipe');\n    const btnFechar = document.getElementById('fecharModal');\n    const modal = document.getElementById('modalEquipe');\n\n    if(btnAbrir && btnFechar && modal) {\n      // Abrir modal\n      btnAbrir.addEventListener('click', () =&gt; {\n        modal.style.display = 'block';\n      });\n\n      // Fechar modal\n      btnFechar.addEventListener('click', () =&gt; {\n        modal.style.display = 'none';\n      });\n\n      // Fechar ao clicar fora\n      window.addEventListener('click', (e) =&gt; {\n        if(e.target === modal) {\n          modal.style.display = 'none';\n        }\n      });\n\n      // Fechar com ESC\n      document.addEventListener('keydown', (e) =&gt; {\n        if(e.key === 'Escape') {\n          modal.style.display = 'none';\n        }\n      });\n    } else {\n      console.error('Verifique os IDs dos elementos:', {btnAbrir, btnFechar, modal});\n    }\n  });\n  function copiarEmail() {\n        // Obtém o conteúdo do elemento que contém o email\n        const email = document.getElementById(\"email\").textContent;\n        \n        // Copia o email para a área de transferência usando a Clipboard API\n        navigator.clipboard.writeText(email)\n          .then(() =&gt; {\n            // Exibe uma mensagem de confirmação\n            alert(\"Email copiado com sucesso!\");\n          })\n          .catch(err =&gt; {\n            console.error(\"Erro ao copiar o email:\", err);\n          });\n      }\n&lt;/script&gt;\n`"
  },
  {
    "objectID": "index.html#objetivo",
    "href": "index.html#objetivo",
    "title": "Sistemas Inteligentes para Gestão de Riscos e Previsões - SIGERIP",
    "section": "",
    "text": "O projeto tem como objetivo principal impactar a comunidade interna e externa por meio do desenvolvimento de sistemas inteligentes de apoio à decisão com enfoque na gestão de riscos e previsão de dados demográficos e atuariais.\n\nviewof contatos = {\n  // Elementos do modal\n  const overlay = document.createElement('div');\n  const modal = document.createElement('div');\n  const closeBtn = document.createElement('span');\n  const content = document.createElement('div');\n\n  // Conteúdo do modal\n  content.innerHTML = `\n  &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css\"&gt;\n  \n    \n    &lt;h3 style=\"margin:0;color:#2c3e50;padding-bottom:15px;border-bottom:2px solid #3498db\"&gt;Equipe SIGERIP&lt;/h3&gt;\n    &lt;div style=\"margin-top:20px;max-width: 450px;height: 450px;padding-right: 10px;overflow-y: scroll;overflow-x: hidden;line-height:1.6\"&gt;\n      &lt;ul class=\"lista-equipe\"&gt;\n\n      &lt;!-- Prof Filipe --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Prof. Dr. Filipe C. L. Duarte&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Coordenador - Tábuas de mortalidade&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"https://www.linkedin.com/in/filipeclduarte/\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; filipe_pb_duarte@hotmail.com\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- Prof Gustavo --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Prof. Dr. Gustavo C. Xavier&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Coordenador Adjunto - Sistema web&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"https://www.linkedin.com/in/gcxavier/\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; gustavocorreiaxavier@gmail.com\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- Prof Herick --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Prof. Dr. Herick C. G. Oliveira&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Colaborador - Mortalidade intantil&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"https://www.linkedin.com/in/herickcidarta/\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; hcidarta@hotmail.com\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n      \n      &lt;!-- TODO: FALTA EMAIL E LINKEDIN Tassia --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Tassia T. S. Oliveira&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Colaboradora&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; email.aqui\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- TODO: falta linkedin Beatriz--&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Beatriz G. Olinpio&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Aluna Voluntária - Mortalidade infantil&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; bgo@academico.ufpb.br\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- Cleo --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Cleo D. Anacleto&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Aluno Bolsista - Tábuas de mortalidade&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"https://www.linkedin.com/in/cleo-decker-anacleto-66a69b133/\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; cleodecker@hotmail.com\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- Cristiane --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Cristiane S. Silva&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Aluna Voluntária - Tábuas de mortalidade&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; css3@academico.ufpb.br\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- TODO: FALTA LINKEDIN Gabrielle --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Gabrielle S. M. Vieira&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Aluna Voluntária - Mortalidade infantil&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; gabrielle.samara230@gmail.com\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- Igor --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Igor B. Kutelak&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Aluno Voluntário - Mortalidade infantil&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"https://www.linkedin.com/in/igor-kutelak-20b10a194/\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; Kutelak.igor@gmail.com\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- Isaias --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Isaias F. S. Sousa&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Aluno Voluntário - Sistema web&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"https://www.linkedin.com/in/isa%C3%ADas-felipe-silva-de-sousa-453902327/\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; isaias.felipe@academico.ufpb.br\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- TODO: FALTA LINKEDIN Jefferson --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Jefferson G. Silva&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Aluno Voluntário - Sistema web&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; jeffeersonguilhermeh@gmail.com\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!-- Stênio --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;João P. S. F. Silva&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Aluno Voluntário - Tábuas de mortalidade&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"https://www.linkedin.com/in/jo%C3%A3o-pedro-st%C3%AAnio-2861071b3/\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; jpsfs2@academico.ufpb.br\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n\n      &lt;!--TODO: FALTA LINKEDIN Nathiely --&gt;\n      &lt;li class=\"membro-equipe\"&gt;\n          &lt;span style=\"font-size:24px\"&gt;&lt;/span&gt;\n          &lt;div&gt;\n              &lt;h3 style=\"margin: 0; color: #2c3e50;\"&gt;Nathiely B. Silva&lt;/h3&gt;\n              &lt;p style=\"margin: 5px 0; color: #666;\"&gt;Aluna Voluntária - Sistema web&lt;/p&gt;\n              &lt;p style=\"margin: 0;\"&gt;\n                  &lt;!-- Link para o LinkedIn --&gt;\n                  &lt;a href=\"\" \n                    target=\"_blank\" \n                    style=\"color: #0077b5; text-decoration: none;\"&gt;\n                      &lt;i class=\"fab fa-linkedin\"&gt;&lt;/i&gt; LinkedIn\n                  &lt;/a&gt;\n                  &lt;br&gt;\n\n                  &lt;!-- Link para abrir o Gmail --&gt;\n                  &lt;i class=\"fas fa-envelope\"&gt;&lt;/i&gt; nathiely.silva@academico.ufpb.br\n                  \n              &lt;/p&gt;\n          &lt;/div&gt;\n      &lt;/li&gt;\n      \n    &lt;/ul&gt;\n    &lt;/div&gt;\n  `;\n\n  // Estilização do modal\n  Object.assign(overlay.style, {\n    display: 'none',\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    zIndex: 1000\n  });\n\n  Object.assign(modal.style, {\n    position: 'fixed',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    backgroundColor: 'white',\n    padding: '25px',\n    borderRadius: '10px',\n    width: 'min(90%, 500px)',\n    boxShadow: '0 5px 15px rgba(0,0,0,0.2)'\n  });\n\n  Object.assign(closeBtn.style, {\n    position: 'absolute',\n    right: '15px',\n    top: '10px',\n    cursor: 'pointer',\n    fontSize: '28px',\n    color: '#666',\n    transition: 'color 0.2s'\n  });\n\n  // Montagem do modal\n  closeBtn.innerHTML = '&times;';\n  modal.append(closeBtn, content);\n  overlay.append(modal);\n  document.body.append(overlay);\n\n  // Container para centralização\n  const container = document.createElement('div');\n  Object.assign(container.style, {\n    display: 'flex',\n    justifyContent: 'center',\n    width: '100%',\n    margin: '30px 0'\n  });\n\n  // Criação do botão centralizado\n  const btn = Inputs.button(\"👥 Conheça Nossa Equipe\");\n  btn.className = \"botao-equipe\"; // ← Adicione esta linha\n\n  // Efeitos de hover\n  btn.addEventListener('mouseenter', () =&gt; {\n    btn.style.transform = 'scale(1.05)';\n    btn.style.boxShadow = '0 6px 8px rgba(0,0,0,0.2)';\n  });\n\n  btn.addEventListener('mouseleave', () =&gt; {\n    btn.style.transform = 'scale(1)';\n    btn.style.boxShadow = '0 4px 6px rgba(0,0,0,0.1)';\n  });\n\n  // Event listeners\n  btn.addEventListener('click', () =&gt; overlay.style.display = 'block');\n  closeBtn.addEventListener('click', () =&gt; overlay.style.display = 'none');\n  overlay.addEventListener('click', e =&gt; e.target === overlay && (overlay.style.display = 'none'));\n  document.addEventListener('keydown', e =&gt; e.key === 'Escape' && (overlay.style.display = 'none'));\n\n  // Adiciona botão ao container\n  container.append(btn);\n  \n  return container;\n}\n\n\n\n\n\n\nhtml`\n&lt;style&gt;\n  /* Estilos Gerais */\n  .equipe-container {\n    display: flex;\n    justify-content: center;\n    margin: 40px 0;\n  }\n\n  .botao-equipe {\n    padding: 15px 35px;\n    background: linear-gradient(135deg, #2c3e50, #3498db);\n    color: white;\n    border: none;\n    border-radius: 8px;\n    cursor: pointer;\n    font-size: 18px;\n    font-weight: 600;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 15px rgba(44, 62, 80, 0.2);\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n\n  .botao-equipe:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 20px rgba(44, 62, 80, 0.3);\n  }\n\n  .modal-overlay {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0,0,0,0.5);\n    z-index: 1000;\n    backdrop-filter: blur(3px);\n  }\n\n  .modal-equipe {\n    position: relative;\n    background: white;\n    padding: 30px;\n    border-radius: 12px;\n    width: 90%;\n    max-width: 600px;\n    margin: 5% auto;\n    box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n  }\n\n  .lista-equipe {\n    list-style: none;\n    padding: 0;\n    margin: 20px 0;\n  }\n\n  .membro-equipe {\n    padding: 15px;\n    margin: 10px 0;\n    background: #f8f9fa;\n    border-radius: 8px;\n    display: flex;\n    align-items: center;\n    gap: 15px;\n    transition: transform 0.2s;\n  }\n\n  .membro-equipe:hover {\n    transform: translateX(10px);\n    background: #f1f3f5;\n  }\n\n  .fechar-modal {\n    position: absolute;\n    top: 15px;\n    right: 20px;\n    font-size: 28px;\n    cursor: pointer;\n    color: #666;\n    transition: color 0.2s;\n  }\n\n  .fechar-modal:hover {\n    color: #333;\n  }\n  .botao-equipe {\n  background: #343a40 !important; /* Azul mais claro */\n  color: #ffffff !important;\n  /* mantém o restante das propriedades */\n}\n&lt;/style&gt;\n\n&lt;script&gt;\n  // JavaScript Corrigido\n  document.addEventListener('DOMContentLoaded', () =&gt; {\n    const btnAbrir = document.getElementById('btnEquipe');\n    const btnFechar = document.getElementById('fecharModal');\n    const modal = document.getElementById('modalEquipe');\n\n    if(btnAbrir && btnFechar && modal) {\n      // Abrir modal\n      btnAbrir.addEventListener('click', () =&gt; {\n        modal.style.display = 'block';\n      });\n\n      // Fechar modal\n      btnFechar.addEventListener('click', () =&gt; {\n        modal.style.display = 'none';\n      });\n\n      // Fechar ao clicar fora\n      window.addEventListener('click', (e) =&gt; {\n        if(e.target === modal) {\n          modal.style.display = 'none';\n        }\n      });\n\n      // Fechar com ESC\n      document.addEventListener('keydown', (e) =&gt; {\n        if(e.key === 'Escape') {\n          modal.style.display = 'none';\n        }\n      });\n    } else {\n      console.error('Verifique os IDs dos elementos:', {btnAbrir, btnFechar, modal});\n    }\n  });\n  function copiarEmail() {\n        // Obtém o conteúdo do elemento que contém o email\n        const email = document.getElementById(\"email\").textContent;\n        \n        // Copia o email para a área de transferência usando a Clipboard API\n        navigator.clipboard.writeText(email)\n          .then(() =&gt; {\n            // Exibe uma mensagem de confirmação\n            alert(\"Email copiado com sucesso!\");\n          })\n          .catch(err =&gt; {\n            console.error(\"Erro ao copiar o email:\", err);\n          });\n      }\n&lt;/script&gt;\n`"
  },
  {
    "objectID": "expectativa_de_vida.html",
    "href": "expectativa_de_vida.html",
    "title": "SIGERIP",
    "section": "",
    "text": "Expectativa de vida para 2000-2023\n\nGráficoTabela\n\n\n\nd3 = require(\"d3@7\")\ntabua = await FileAttachment(\"dados/base_dados/tabua_concatenada.csv\").csv()\n\nregioes = [\"Brasil\", \"Centro-Oeste\", \"Nordeste\", \"Norte\", \"Sudeste\", \"Sul\", \"Acre\", \"Alagoas\", \"Amapá\", \"Amazonas\", \"Bahia\", \"Ceará\", \"Distrito Federal\", \"Espírito Santo\", \"Goiás\", \"Maranhão\", \"Mato Grosso\", \"Mato Grosso do Sul\", \"Minas Gerais\", \"Pará\", \"Paraíba\", \"Paraná\", \"Pernambuco\", \"Piauí\", \"Rio de Janeiro\", \"Rio Grande do Norte\", \"Rio Grande do Sul\", \"Rondônia\", \"Roraima\", \"Santa Catarina\", \"São Paulo\", \"Sergipe\", \"Tocantins\"]\nfaixas_etaria = [...new Set(tabua.map(d =&gt; d.faixa_etaria))].sort();\n\nexpectativa = tabua.filter(d =&gt; d.faixa_etaria === faixa && d.Local === regiao && d.sexo ==='Ambos').map(d =&gt; ({\n    ano: +d.Ano,\n    ex: +d.ex,\n    faixa: d.faixa_etaria\n})\n)\n\n\nviewof seletores = {\n  const container = htl.html`\n    &lt;div style=\"\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      align-items: flex-start;\n      gap: 30px;\n      justify-content: center;\n    \"&gt;\n      &lt;div style=\"\n        min-width: 200px;\n        width: 100%;\n        max-width: 300px;\n        margin-bottom: 10px;\n      \"&gt;\n        &lt;div style=\"text-align: center;\"&gt;Local:&lt;/div&gt;\n        &lt;div style=\"display: flex; justify-content: center; width: 100%;\"&gt;\n          &lt;select id=\"regiao-select\" class=\"compact-select\" style=\"\n            padding: 6px 12px;\n            border: 1px solid #ccc;\n            border-radius: 20px;\n            font-size: 16px;\n            text-align: center;\n            width: fit-content;\n            min-width: 180px;\n            background-color: #f8f9fa;\n            cursor: pointer;\n            appearance: none;\n            background-image: url('data:image/svg+xml;charset=UTF-8,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23666\" stroke-width=\"2\"&gt;&lt;polyline points=\"6 9 12 15 18 9\"/&gt;&lt;/svg&gt;');\n            background-repeat: no-repeat;\n            background-position: right 8px center;\n            background-size: 16px;\n            margin-top: 10px;\"&gt;\n            ${regioes.map(regiao =&gt; \n              htl.html`&lt;option value=${regiao}&gt;${regiao}&lt;/option&gt;`\n            )}\n          &lt;/select&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      \n      &lt;div style=\"\n        min-width: 200px;\n        width: 100%;\n        max-width: 300px;\n        margin-bottom: 10px;\n      \"&gt;\n        &lt;div style=\"text-align: center;\"&gt;Faixa etária:&lt;/div&gt;\n        &lt;div style=\"display: flex; justify-content: center; width: 100%;\"&gt;\n          &lt;select id=\"faixa-select\" class=\"compact-select\" style=\"\n            padding: 6px 12px;\n            border: 1px solid #ccc;\n            border-radius: 20px;\n            font-size: 16px;\n            text-align: center;\n            width: fit-content;\n            min-width: 150px;\n            background-color: #f8f9fa;\n            cursor: pointer;\n            appearance: none;\n            background-image: url('data:image/svg+xml;charset=UTF-8,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23666\" stroke-width=\"2\"&gt;&lt;polyline points=\"6 9 12 15 18 9\"/&gt;&lt;/svg&gt;');\n            background-repeat: no-repeat;\n            background-position: right 8px center;\n            background-size: 16px;\n            margin-top: 10px;\"&gt;\n            ${faixas_etaria.map(faixa =&gt; \n              htl.html`&lt;option value=${faixa}&gt;${faixa}&lt;/option&gt;`\n            )}\n          &lt;/select&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  `;\n  \n  // Adiciona código para detectar a largura da tela e ajustar o layout\n  const mediaQuery = window.matchMedia('(max-width: 650px)');\n  \n  // Função para ajustar o layout baseado na largura da tela\n  const handleScreenChange = (e) =&gt; {\n    if (e.matches) {\n      // Tela pequena - coloca os elementos em coluna\n      container.style.flexDirection = 'column';\n      container.style.alignItems = 'center';\n    } else {\n      // Tela grande - mantém em linha\n      container.style.flexDirection = 'row';\n      container.style.alignItems = 'flex-start';\n    }\n  };\n  \n  // Verifica inicialmente\n  handleScreenChange(mediaQuery);\n  \n  // Adiciona o listener para mudanças de tamanho\n  mediaQuery.addEventListener('change', handleScreenChange);\n  \n  // Captura os elementos select para manipulação\n  const regiaoSelect = container.querySelector('#regiao-select');\n  const faixaSelect = container.querySelector('#faixa-select');\n  \n  // Define o valor do objeto retornado\n  container.value = {\n    regiao: regiaoSelect.value,\n    faixa: faixaSelect.value\n  };\n  \n  // Atualiza os valores quando houver mudança\n  regiaoSelect.addEventListener('change', () =&gt; {\n    container.value.regiao = regiaoSelect.value;\n    container.dispatchEvent(new CustomEvent('input'));\n  });\n  \n  faixaSelect.addEventListener('change', () =&gt; {\n    container.value.faixa = faixaSelect.value;\n    container.dispatchEvent(new CustomEvent('input'));\n  });\n  \n  return container;\n}\n\n// Você pode acessar os valores selecionados assim:\nregiao = seletores.regiao\nfaixa = seletores.faixa\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{\n  const ptBRLocaleDefinition = {\n    decimal: \",\",\n    thousands: \"\",\n    grouping: [3],\n    currency: [\"R$\", \"\"]\n  };\n  d3.formatDefaultLocale(ptBRLocaleDefinition);\n\n  // Declare the chart dimensions and margins.\n  const width = 760;\n  const height = 500;\n  const marginTop = 20;\n  const marginRight = 30;\n  const marginBottom = 30;\n  const marginLeft = 40;\n\n  // Declare the x (horizontal position) scale.\n  const x = d3.scaleLinear(d3.extent(expectativa, d =&gt; d.ano), [marginLeft, width - marginRight]);\n\n  // Declare the y (vertical position) scale.\n  const y = d3.scaleLinear([d3.min(expectativa, d =&gt; d.ex)-1, d3.max(expectativa, d =&gt; d.ex)+1], [height - marginBottom, marginTop]);\n\n  // Declare the line generator.\n  const line = d3.line()\n      .x(d =&gt; x(d.ano))\n      .y(d =&gt; y(d.ex));\n\n  // Create the SVG container.\n  const svg = d3.create(\"svg\")\n      .attr(\"viewBox\", [0, 0, width, height])\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic; font: 10px sans-serif;\")\n      .style(\"-webkit-tap-highlight-color\", \"transparent\")\n      .style(\"overflow\", \"visible\")\n      .on(\"pointerenter pointermove\", pointermoved)\n      .on(\"pointerleave\", pointerleft)\n      .on(\"touchstart\", event =&gt; event.preventDefault());\n\n  // Add the x-axis.\n  svg.append(\"g\")\n      .attr(\"transform\", `translate(0,${height - marginBottom})`)\n      .call(d3.axisBottom(x).ticks(width / 80).tickSizeOuter(0));\n\n  svg.append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", height) // Posição abaixo do eixo\n      .style(\"font-size\", \"14px\")\n      .style(\"fill\", \"currentColor\")\n      .text(\"Ano\");\n\n  // Add the y-axis, remove the domain line, add grid lines and a label.\n  svg.append(\"g\")\n      .attr(\"transform\", `translate(${marginLeft},0)`)\n      .call(d3.axisLeft(y).ticks(height / 40))\n      .call(g =&gt; g.select(\".domain\").remove())\n      .style(\"font-size\", \"12px\")\n      .call(g =&gt; g.selectAll(\".tick line\").clone()\n          .attr(\"x2\", width - marginLeft - marginRight)\n          .attr(\"stroke-opacity\", 0.1))\n      .call(g =&gt; g.append(\"text\")\n          .attr(\"x\", -marginLeft)\n          .attr(\"y\", 10)\n          .attr(\"fill\", \"currentColor\")\n          .attr(\"text-anchor\", \"start\")\n          .style(\"font-size\", \"18px\")\n          .text(\"ex\"));\n\n  // Append a path for the line.\n  svg.append(\"path\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"steelblue\")\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"d\", line(expectativa));\n\n  // Create the tooltip container.\n  const tooltip = svg.append(\"g\");\n\n  function formatValue(value) {\n    return value.toLocaleString(\"en\", {\n      style: \"decimal\", // Altera para estilo numérico\n      minimumFractionDigits: 2, // Mantém 2 casas decimais\n      maximumFractionDigits: 2\n    });\n  }\n  \n  function formatDate(date) {\n    return date.toLocaleString(\"pt-BR\", {\n      month: \"short\",\n      day: \"numeric\",\n      year: \"numeric\",\n      timeZone: \"UTC\"\n    });\n  }\n  \n  // Add the event listeners that show or hide the tooltip.\n  const bisect = d3.bisector(d =&gt; d.ano).center;\n  function pointermoved(event) {\n    const i = bisect(expectativa, x.invert(d3.pointer(event)[0]));\n    tooltip.style(\"display\", null);\n    tooltip.attr(\"transform\", `translate(${x(expectativa[i].ano)},${y(expectativa[i].ex)})`);\n\n    const path = tooltip.selectAll(\"path\")\n      .data([,])\n      .join(\"path\")\n        .attr(\"fill\", \"white\")\n        .attr(\"stroke\", \"black\");\n\n    const text = tooltip.selectAll(\"text\")\n      .data([,])\n      .join(\"text\")\n      .call(text =&gt; text\n        .selectAll(\"tspan\")\n        .data([formatDate(expectativa[i].ano), formatValue(expectativa[i].ex)])\n        .join(\"tspan\")\n          .attr(\"x\", 0)\n          .attr(\"y\", (_, i) =&gt; `${i * 1.1}em`)\n          .attr(\"font-weight\", (_, i) =&gt; i ? null : \"bold\")\n          .text(d =&gt; d));\n\n    size(text, path);\n  }\n\n  function pointerleft() {\n    tooltip.style(\"display\", \"none\");\n  }\n\n  // Wraps the text with a callout path of the correct size, as measured in the page.\n  function size(text, path) {\n    const {x, y, width: w, height: h} = text.node().getBBox();\n    text.attr(\"transform\", `translate(${-w / 2},${15 - y})`);\n    path.attr(\"d\", `M${-w / 2 - 10},5H-5l5,-5l5,5H${w / 2 + 10}v${h + 20}h-${w + 20}z`);\n  }\n\n  return svg.node();\n}\n\n\n\n\n\n\n\nhtml`&lt;p&gt;Para acessar a metodologia, &lt;a href=\"metodologia.html#proje%C3%A7%C3%B5es-de-mortalidade-do-ibge\"&gt;clique aqui&lt;/a&gt;.&lt;/p&gt;`\n\n\n\n\n\n\n\n\n\n\n\nhtml`&lt;h2&gt;Tábua de mortalidade utilizada&lt;/h2&gt;`\n\n\n\n\n\n\n\nInputs.table(tabua)\n\n\n\n\n\n\n\nhtml`\n&lt;body&gt;\n    &lt;br&gt;\n    &lt;p&gt;Baixar \n    &lt;a href=\"dados/base_dados/tabua_concatenada.csv\" download&gt;\n        dados.\n    &lt;/a&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n`"
  },
  {
    "objectID": "comandos_git.html",
    "href": "comandos_git.html",
    "title": "SIGERIP",
    "section": "",
    "text": "git branch git add . git commit -m “descrição” git push origin (nome da branch)"
  },
  {
    "objectID": "base_de_dados.html",
    "href": "base_de_dados.html",
    "title": "SIGERIP",
    "section": "",
    "text": "d3 = require(\"d3@7\")\ndados = await FileAttachment(\"dados/base_dados/tabua_concatenada.csv\").csv()\ntabua = await FileAttachment(\"dados/base_dados/taxa_mortalidade.csv\").csv()\n\n\nviewof regiao = Inputs.select([\n  \"Brasil\",\n  \"Norte\",\n  \"Nordeste\",\n  \"Centro-Oeste\",\n  \"Sudeste\",\n  \"Sul\",\n  \"Acre\",\n  \"Alagoas\",\n  \"Amapá\",\n  \"Amazonas\",\n  \"Bahia\",\n  \"Ceará\",\n  \"Distrito Federal\",\n  \"Espírito Santo\",\n  \"Goiás\",\n  \"Maranhão\",\n  \"Mato Grosso\",\n  \"Mato Grosso do Sul\",\n  \"Minas Gerais\",\n  \"Pará\",\n  \"Paraíba\",\n  \"Paraná\",\n  \"Pernambuco\",\n  \"Piauí\",\n  \"Rio de Janeiro\",\n  \"Rio Grande do Norte\",\n  \"Rio Grande do Sul\",\n  \"Rondônia\",\n  \"Roraima\",\n  \"Santa Catarina\",\n  \"São Paulo\",\n  \"Sergipe\",\n  \"Tocantins\"],\n  {\n        value: ['Brasil'],\n        label: \"Local: \"\n    })\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGráficoBase de Dados\n\n\n\n{\n  const width = 800;\n  const height = 650; // Aumentei a altura total para acomodar a legenda\n  const legendHeight = 50; // Altura dedicada para a legenda\n  const margin = { top: 30, right: 20, bottom: 40, left: 50 };\n  const numRows = 5;\n  const numCols = 4;\n  \n  // Cores para cada série\n  const cores = {\n    ambos: \"steelblue\",\n    masculino: \"darkorange\",\n    feminino: \"green\"\n  };\n\n  const svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\n  const ageGroups = [...new Set(tabua.map(d =&gt; d.faixa_etaria))].sort();\n  \n  // Título geral\n  svg.append(\"text\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .text(\"Mortalidade por Faixa Etária no Brasil (2000 - 2023)\")\n    .attr(\"font-size\", \"16px\")\n    .attr(\"font-weight\", \"bold\");\n    \n  // Adiciona legenda em linha horizontal acima dos gráficos\n  const legend = svg.append(\"g\")\n    .attr(\"transform\", `translate(${width/2 - 150}, 35)`);\n    \n  const legendItems = Object.entries(cores);\n  const legendItemWidth = 100; // Largura de cada item da legenda\n  \n  legendItems.forEach(([key, color], i) =&gt; {\n    const itemX = i * legendItemWidth;\n    \n    legend.append(\"rect\")\n      .attr(\"x\", itemX)\n      .attr(\"y\", 0)\n      .attr(\"width\", 15)\n      .attr(\"height\", 15)\n      .attr(\"fill\", color);\n      \n    legend.append(\"text\")\n      .attr(\"x\", itemX + 20)\n      .attr(\"y\", 12)\n      .text(key.charAt(0).toUpperCase() + key.slice(1))\n      .attr(\"font-size\", \"12px\");\n  });\n\n  // Ajuste a área dos gráficos para começar após a legenda\n  const graphsStartY = legendHeight + 10;\n  \n  const subplotWidth = width / numCols;\n  const subplotHeight = (height - graphsStartY) / numRows;\n\n  for (let row = 0; row &lt; numRows; row++) {\n    for (let col = 0; col &lt; numCols; col++) {\n      const index = row * numCols + col;\n      if (index &gt;= ageGroups.length) continue;\n      \n      const currentAge = ageGroups[index];\n      const subplot = svg.append(\"g\")\n        .attr(\"transform\", `translate(${col * subplotWidth}, ${graphsStartY + row * subplotHeight})`);\n      \n      // Processamento dos dados - filtrando por faixa etária\n      const filteredData = tabua.filter(d =&gt;  \n          d.local === 'Brasil' && d.faixa_etaria === currentAge\n        ).map(d =&gt; ({\n          ...d,\n          Ano: +d.Ano,\n          ambos: Math.log(+d.ambos),\n          feminino: Math.log(+d.feminino),\n          masculino: Math.log(+d.masculino)\n        })).sort((a, b) =&gt; a.Ano - b.Ano);\n      \n      // Verifica se existem dados para esta faixa etária\n      if (filteredData.length === 0) {\n        subplot.append(\"text\")\n          .attr(\"x\", subplotWidth / 2)\n          .attr(\"y\", subplotHeight / 2)\n          .attr(\"text-anchor\", \"middle\")\n          .text(`Sem dados para: ${currentAge}`)\n          .attr(\"font-size\", \"12px\");\n        continue;\n      }\n      \n      // Escalas atualizadas\n      const xScale = d3.scaleLinear()\n        .domain(d3.extent(filteredData, d =&gt; d.Ano))\n        .range([margin.left, subplotWidth - margin.right]);\n\n      const yValues = filteredData.flatMap(d =&gt; [d.ambos, d.feminino, d.masculino]);\n      const yScale = d3.scaleLinear()\n        .domain([d3.min(yValues), d3.max(yValues)]).nice()\n        .range([subplotHeight - margin.bottom, margin.top]);\n      \n      // Eixos\n      subplot.append(\"g\")\n        .attr(\"transform\", `translate(0, ${subplotHeight - margin.bottom})`)\n        .call(d3.axisBottom(xScale).ticks(5))\n        .append(\"text\")\n        .attr(\"x\", subplotWidth / 2)\n        .attr(\"y\", 30)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Ano\")\n        .attr(\"fill\", \"black\");\n\n      subplot.append(\"g\")\n        .attr(\"transform\", `translate(${margin.left}, 0)`)\n        .call(d3.axisLeft(yScale).ticks(5))\n        .append(\"text\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", -30)\n        .attr(\"x\", -subplotHeight / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"log(Mx)\")\n        .attr(\"fill\", \"black\");\n\n      // Função para gerar linhas\n      const gerarLinha = (variavel, cor) =&gt; {\n        const linha = d3.line()\n          .x(d =&gt; xScale(d.Ano))\n          .y(d =&gt; yScale(d[variavel]))\n          //.curve(d3.curveMonotoneX); // Adiciona suavização para as linhas\n        \n        subplot.append(\"path\")\n          .datum(filteredData)\n          .attr(\"d\", linha)\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", cor)\n          .attr(\"stroke-width\", 2);\n\n      };\n\n      // Adiciona as três linhas\n      gerarLinha(\"ambos\", cores.ambos);\n      gerarLinha(\"masculino\", cores.masculino);\n      gerarLinha(\"feminino\", cores.feminino);\n      \n      // Título\n      subplot.append(\"text\")\n        .attr(\"x\", subplotWidth / 2)\n        .attr(\"y\", margin.top / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(`Faixa: ${currentAge}`)\n        .attr(\"font-size\", \"12px\")\n        .attr(\"font-weight\", \"bold\");\n    }\n  }\n    \n  return svg.node();\n}\n\n\n\n\n\n\n\n\n\nhtml`&lt;h1&gt;Tábua Utilizada&lt;/h1&gt;`\n\n\n\n\n\n\n\nInputs.table(dados)\n\n\n\n\n\n\n\nhtml`\n&lt;body&gt;\n    &lt;br&gt;\n    &lt;p&gt;Baixar \n    &lt;a href=\"dados/base_dados/tabua_concatenada.csv\" download&gt;\n        dados.\n    &lt;/a&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n`"
  },
  {
    "objectID": "dados_mortalidade.html",
    "href": "dados_mortalidade.html",
    "title": "SIGERIP",
    "section": "",
    "text": "GráficoTabela\n\n\n\nd3 = require(\"d3@7\")\n\n// Carregando dados\ndados = await FileAttachment(\"dados/base_dados/tabua_concatenada.csv\").csv()\ntabua = await FileAttachment(\"dados/base_dados/taxa_mortalidade.csv\").csv()\n\n// filtros\nanos = Array.from({length: 2023 - 2000 + 1}, (_, i) =&gt; 2000 + i);\nregioes = [\"Brasil\", \"Centro-Oeste\", \"Nordeste\", \"Norte\", \"Sudeste\", \"Sul\", \"Acre\", \"Alagoas\", \"Amapá\", \"Amazonas\", \"Bahia\", \"Ceará\", \"Distrito Federal\", \"Espírito Santo\", \"Goiás\", \"Maranhão\", \"Mato Grosso\", \"Mato Grosso do Sul\", \"Minas Gerais\", \"Pará\", \"Paraíba\", \"Paraná\", \"Pernambuco\", \"Piauí\", \"Rio de Janeiro\", \"Rio Grande do Norte\", \"Rio Grande do Sul\", \"Rondônia\", \"Roraima\", \"Santa Catarina\", \"São Paulo\", \"Sergipe\", \"Tocantins\"]\n\nfaixas_etaria = [...new Set(tabua.map(d =&gt; d.faixa_etaria))].sort();\n\nviewof seletores1 = {\n  const container = htl.html`\n    &lt;div style=\"\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      align-items: flex-start;\n      gap: 30px;\n      justify-content: center;\n    \"&gt;\n      &lt;div style=\"\n        min-width: 200px;\n        width: 100%;\n        max-width: 300px;\n        margin-bottom: 10px;\n      \"&gt;\n        &lt;div style=\"text-align: center;\"&gt;Local:&lt;/div&gt;\n        &lt;div style=\"display: flex; justify-content: center; width: 100%;\"&gt;\n          &lt;select id=\"regiao-select\" class=\"compact-select\" style=\"\n            padding: 6px 12px;\n            border: 1px solid #ccc;\n            border-radius: 20px;\n            font-size: 16px;\n            text-align: center;\n            width: fit-content;\n            min-width: 180px;\n            background-color: #f8f9fa;\n            cursor: pointer;\n            appearance: none;\n            background-image: url('data:image/svg+xml;charset=UTF-8,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23666\" stroke-width=\"2\"&gt;&lt;polyline points=\"6 9 12 15 18 9\"/&gt;&lt;/svg&gt;');\n            background-repeat: no-repeat;\n            background-position: right 8px center;\n            background-size: 16px;\n            margin-top: 10px;\"&gt;\n            ${regioes.map(regiao =&gt; \n              htl.html`&lt;option value=${regiao}&gt;${regiao}&lt;/option&gt;`\n            )}\n          &lt;/select&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      \n      &lt;div style=\"\n        min-width: 200px;\n        width: 100%;\n        max-width: 300px;\n        margin-bottom: 10px;\n      \"&gt;\n        &lt;div style=\"text-align: center;\"&gt;Faixa etária:&lt;/div&gt;\n        &lt;div style=\"display: flex; justify-content: center; width: 100%;\"&gt;\n          &lt;select id=\"faixa-select\" class=\"compact-select\" style=\"\n            padding: 6px 12px;\n            border: 1px solid #ccc;\n            border-radius: 20px;\n            font-size: 16px;\n            text-align: center;\n            width: fit-content;\n            min-width: 150px;\n            background-color: #f8f9fa;\n            cursor: pointer;\n            appearance: none;\n            background-image: url('data:image/svg+xml;charset=UTF-8,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23666\" stroke-width=\"2\"&gt;&lt;polyline points=\"6 9 12 15 18 9\"/&gt;&lt;/svg&gt;');\n            background-repeat: no-repeat;\n            background-position: right 8px center;\n            background-size: 16px;\n            margin-top: 10px;\"&gt;\n            ${faixas_etaria.map(faixa =&gt; \n              htl.html`&lt;option value=${faixa}&gt;${faixa}&lt;/option&gt;`\n            )}\n          &lt;/select&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  `;\n  \n  // Adiciona código para detectar a largura da tela e ajustar o layout\n  const mediaQuery = window.matchMedia('(max-width: 650px)');\n  \n  // Função para ajustar o layout baseado na largura da tela\n  const handleScreenChange = (e) =&gt; {\n    if (e.matches) {\n      // Tela pequena - coloca os elementos em coluna\n      container.style.flexDirection = 'column';\n      container.style.alignItems = 'center';\n    } else {\n      // Tela grande - mantém em linha\n      container.style.flexDirection = 'row';\n      container.style.alignItems = 'flex-start';\n    }\n  };\n  \n  // Verifica inicialmente\n  handleScreenChange(mediaQuery);\n  \n  // Adiciona o listener para mudanças de tamanho\n  mediaQuery.addEventListener('change', handleScreenChange);\n  \n  // Captura os elementos select para manipulação\n  const regiaoSelect = container.querySelector('#regiao-select');\n  const faixaSelect = container.querySelector('#faixa-select');\n  \n  // Define o valor do objeto retornado\n  container.value = {\n    regiao: regiaoSelect.value,\n    faixa: faixaSelect.value\n  };\n  \n  // Atualiza os valores quando houver mudança\n  regiaoSelect.addEventListener('change', () =&gt; {\n    container.value.regiao = regiaoSelect.value;\n    container.dispatchEvent(new CustomEvent('input'));\n  });\n  \n  faixaSelect.addEventListener('change', () =&gt; {\n    container.value.faixa = faixaSelect.value;\n    container.dispatchEvent(new CustomEvent('input'));\n  });\n  \n  return container;\n}\n\n// Você pode acessar os valores selecionados assim:\nregiao1 = seletores1.regiao\nfaixa1 = seletores1.faixa\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{\n  const ptBRLocaleDefinition = {\n    decimal: \",\",\n    thousands: \"\",\n    grouping: [3],\n    currency: [\"R$\", \"\"]\n  };\n  d3.formatDefaultLocale(ptBRLocaleDefinition);\n  \n  const width = 760;\n  const height = 500;\n  const margin = { top: 60, right: 30, bottom: 50, left: 50 };\n  const cores = {\n    ambos: \"steelblue\",\n    masculino: \"darkorange\",\n    feminino: \"green\"\n  };\n\n  const svg = d3.create(\"svg\")\n    .attr(\"viewBox\", [0, 0, width, height])\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic; font: 10px sans-serif;\")\n    .style(\"-webkit-tap-highlight-color\", \"transparent\")\n    .style(\"overflow\", \"visible\")\n\n  // Legenda\n  const legend = svg.append(\"g\")\n    .attr(\"transform\", `translate(${width/2 - 120}, 50)`);\n\n  Object.entries(cores).forEach(([key, color], i) =&gt; {\n    legend.append(\"rect\")\n      .attr(\"x\", i * 100)\n      .attr(\"y\", 0)\n      .attr(\"width\", 15)\n      .attr(\"height\", 15)\n      .attr(\"fill\", color);\n\n    legend.append(\"text\")\n      .attr(\"x\", i * 100 + 20)\n      .attr(\"y\", 12)\n      .text(key.charAt(0).toUpperCase() + key.slice(1))\n      .attr(\"font-size\", \"12px\");\n  });\n\n  // Processamento dos dados para todo o Brasil\n  const filteredData = tabua\n    .filter(d =&gt; d.local === regiao1 && d.faixa_etaria === faixa1)\n    .map(d =&gt; ({\n      ...d,\n      Ano: +d.Ano,\n      ambos: Math.log(+d.ambos),\n      feminino: Math.log(+d.feminino),\n      masculino: Math.log(+d.masculino),\n      faixa_etaria: +d.faixa_etaria\n    }))\n    .sort((a, b) =&gt; a.Ano - b.Ano);\n\n  // Escalas únicas para todo o gráfico\n  const xScale = d3.scaleLinear()\n    .domain(d3.extent(filteredData, d =&gt; d.Ano))\n    .range([margin.left, width - margin.right]);\n\n  const yValues = filteredData.flatMap(d =&gt; [d.ambos, d.feminino, d.masculino]);\n  const yScale = d3.scaleLinear()\n    .domain([d3.min(yValues), d3.max(yValues)]).nice()\n    .range([height - margin.bottom, margin.top]);\n\n  // Eixos\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\n    .call(d3.axisBottom(xScale).ticks(10))\n    .append(\"text\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", 35)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", \"black\")\n    .text(\"Ano\");\n\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, 0)`)\n    .call(d3.axisLeft(yScale).ticks(8))\n    .append(\"text\")\n    .attr(\"transform\", \"rotate(-90)\")\n    .attr(\"y\", -40)\n    .attr(\"x\", -height / 2)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", \"black\")\n    .text(\"log(Mx)\");\n\n  // Função para gerar as linhas\n  const gerarLinha = (variavel, cor) =&gt; {\n    const linha = d3.line()\n      .x(d =&gt; xScale(d.Ano))\n      .y(d =&gt; yScale(d[variavel]))\n      //.curve(d3.curveMonotoneX); //suaviza a linha\n\n    svg.append(\"path\")\n      .datum(filteredData)\n      .attr(\"d\", linha)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", cor)\n      .attr(\"stroke-width\", 2);\n  };\n\n  // Adiciona as três linhas principais\n  gerarLinha(\"ambos\", cores.ambos);\n  gerarLinha(\"masculino\", cores.masculino);\n  gerarLinha(\"feminino\", cores.feminino);\n\n  return svg.node();\n}\n\n\n\n\n\n\n\nhtml`&lt;p&gt;Para acessar a metodologia utilizada, &lt;a href=\"metodologia.html#proje%C3%A7%C3%B5es-de-mortalidade-do-ibge\"&gt;clique aqui&lt;/a&gt;.&lt;/p&gt;`\n\n\n\n\n\n\n\n\n\n\n\nhtml`&lt;h2&gt;Tábua de mortalidade utilizada&lt;/h2&gt;`\n\n\n\n\n\n\n\nInputs.table(dados)\n\n\n\n\n\n\n\nhtml`\n&lt;body&gt;\n    &lt;br&gt;\n    &lt;p&gt;Baixar \n    &lt;a href=\"dados/base_dados/tabua_concatenada.csv\" download&gt;\n        dados.\n    &lt;/a&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n`"
  },
  {
    "objectID": "dados_mortalidade.html#taxa-central-de-mortalidade-por-faixa-etária-entre-2000-2023",
    "href": "dados_mortalidade.html#taxa-central-de-mortalidade-por-faixa-etária-entre-2000-2023",
    "title": "SIGERIP",
    "section": "",
    "text": "GráficoTabela\n\n\n\nd3 = require(\"d3@7\")\n\n// Carregando dados\ndados = await FileAttachment(\"dados/base_dados/tabua_concatenada.csv\").csv()\ntabua = await FileAttachment(\"dados/base_dados/taxa_mortalidade.csv\").csv()\n\n// filtros\nanos = Array.from({length: 2023 - 2000 + 1}, (_, i) =&gt; 2000 + i);\nregioes = [\"Brasil\", \"Centro-Oeste\", \"Nordeste\", \"Norte\", \"Sudeste\", \"Sul\", \"Acre\", \"Alagoas\", \"Amapá\", \"Amazonas\", \"Bahia\", \"Ceará\", \"Distrito Federal\", \"Espírito Santo\", \"Goiás\", \"Maranhão\", \"Mato Grosso\", \"Mato Grosso do Sul\", \"Minas Gerais\", \"Pará\", \"Paraíba\", \"Paraná\", \"Pernambuco\", \"Piauí\", \"Rio de Janeiro\", \"Rio Grande do Norte\", \"Rio Grande do Sul\", \"Rondônia\", \"Roraima\", \"Santa Catarina\", \"São Paulo\", \"Sergipe\", \"Tocantins\"]\n\nfaixas_etaria = [...new Set(tabua.map(d =&gt; d.faixa_etaria))].sort();\n\nviewof seletores1 = {\n  const container = htl.html`\n    &lt;div style=\"\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      align-items: flex-start;\n      gap: 30px;\n      justify-content: center;\n    \"&gt;\n      &lt;div style=\"\n        min-width: 200px;\n        width: 100%;\n        max-width: 300px;\n        margin-bottom: 10px;\n      \"&gt;\n        &lt;div style=\"text-align: center;\"&gt;Local:&lt;/div&gt;\n        &lt;div style=\"display: flex; justify-content: center; width: 100%;\"&gt;\n          &lt;select id=\"regiao-select\" class=\"compact-select\" style=\"\n            padding: 6px 12px;\n            border: 1px solid #ccc;\n            border-radius: 20px;\n            font-size: 16px;\n            text-align: center;\n            width: fit-content;\n            min-width: 180px;\n            background-color: #f8f9fa;\n            cursor: pointer;\n            appearance: none;\n            background-image: url('data:image/svg+xml;charset=UTF-8,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23666\" stroke-width=\"2\"&gt;&lt;polyline points=\"6 9 12 15 18 9\"/&gt;&lt;/svg&gt;');\n            background-repeat: no-repeat;\n            background-position: right 8px center;\n            background-size: 16px;\n            margin-top: 10px;\"&gt;\n            ${regioes.map(regiao =&gt; \n              htl.html`&lt;option value=${regiao}&gt;${regiao}&lt;/option&gt;`\n            )}\n          &lt;/select&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      \n      &lt;div style=\"\n        min-width: 200px;\n        width: 100%;\n        max-width: 300px;\n        margin-bottom: 10px;\n      \"&gt;\n        &lt;div style=\"text-align: center;\"&gt;Faixa etária:&lt;/div&gt;\n        &lt;div style=\"display: flex; justify-content: center; width: 100%;\"&gt;\n          &lt;select id=\"faixa-select\" class=\"compact-select\" style=\"\n            padding: 6px 12px;\n            border: 1px solid #ccc;\n            border-radius: 20px;\n            font-size: 16px;\n            text-align: center;\n            width: fit-content;\n            min-width: 150px;\n            background-color: #f8f9fa;\n            cursor: pointer;\n            appearance: none;\n            background-image: url('data:image/svg+xml;charset=UTF-8,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23666\" stroke-width=\"2\"&gt;&lt;polyline points=\"6 9 12 15 18 9\"/&gt;&lt;/svg&gt;');\n            background-repeat: no-repeat;\n            background-position: right 8px center;\n            background-size: 16px;\n            margin-top: 10px;\"&gt;\n            ${faixas_etaria.map(faixa =&gt; \n              htl.html`&lt;option value=${faixa}&gt;${faixa}&lt;/option&gt;`\n            )}\n          &lt;/select&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  `;\n  \n  // Adiciona código para detectar a largura da tela e ajustar o layout\n  const mediaQuery = window.matchMedia('(max-width: 650px)');\n  \n  // Função para ajustar o layout baseado na largura da tela\n  const handleScreenChange = (e) =&gt; {\n    if (e.matches) {\n      // Tela pequena - coloca os elementos em coluna\n      container.style.flexDirection = 'column';\n      container.style.alignItems = 'center';\n    } else {\n      // Tela grande - mantém em linha\n      container.style.flexDirection = 'row';\n      container.style.alignItems = 'flex-start';\n    }\n  };\n  \n  // Verifica inicialmente\n  handleScreenChange(mediaQuery);\n  \n  // Adiciona o listener para mudanças de tamanho\n  mediaQuery.addEventListener('change', handleScreenChange);\n  \n  // Captura os elementos select para manipulação\n  const regiaoSelect = container.querySelector('#regiao-select');\n  const faixaSelect = container.querySelector('#faixa-select');\n  \n  // Define o valor do objeto retornado\n  container.value = {\n    regiao: regiaoSelect.value,\n    faixa: faixaSelect.value\n  };\n  \n  // Atualiza os valores quando houver mudança\n  regiaoSelect.addEventListener('change', () =&gt; {\n    container.value.regiao = regiaoSelect.value;\n    container.dispatchEvent(new CustomEvent('input'));\n  });\n  \n  faixaSelect.addEventListener('change', () =&gt; {\n    container.value.faixa = faixaSelect.value;\n    container.dispatchEvent(new CustomEvent('input'));\n  });\n  \n  return container;\n}\n\n// Você pode acessar os valores selecionados assim:\nregiao1 = seletores1.regiao\nfaixa1 = seletores1.faixa\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{\n  const ptBRLocaleDefinition = {\n    decimal: \",\",\n    thousands: \"\",\n    grouping: [3],\n    currency: [\"R$\", \"\"]\n  };\n  d3.formatDefaultLocale(ptBRLocaleDefinition);\n  \n  const width = 760;\n  const height = 500;\n  const margin = { top: 60, right: 30, bottom: 50, left: 50 };\n  const cores = {\n    ambos: \"steelblue\",\n    masculino: \"darkorange\",\n    feminino: \"green\"\n  };\n\n  const svg = d3.create(\"svg\")\n    .attr(\"viewBox\", [0, 0, width, height])\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic; font: 10px sans-serif;\")\n    .style(\"-webkit-tap-highlight-color\", \"transparent\")\n    .style(\"overflow\", \"visible\")\n\n  // Legenda\n  const legend = svg.append(\"g\")\n    .attr(\"transform\", `translate(${width/2 - 120}, 50)`);\n\n  Object.entries(cores).forEach(([key, color], i) =&gt; {\n    legend.append(\"rect\")\n      .attr(\"x\", i * 100)\n      .attr(\"y\", 0)\n      .attr(\"width\", 15)\n      .attr(\"height\", 15)\n      .attr(\"fill\", color);\n\n    legend.append(\"text\")\n      .attr(\"x\", i * 100 + 20)\n      .attr(\"y\", 12)\n      .text(key.charAt(0).toUpperCase() + key.slice(1))\n      .attr(\"font-size\", \"12px\");\n  });\n\n  // Processamento dos dados para todo o Brasil\n  const filteredData = tabua\n    .filter(d =&gt; d.local === regiao1 && d.faixa_etaria === faixa1)\n    .map(d =&gt; ({\n      ...d,\n      Ano: +d.Ano,\n      ambos: Math.log(+d.ambos),\n      feminino: Math.log(+d.feminino),\n      masculino: Math.log(+d.masculino),\n      faixa_etaria: +d.faixa_etaria\n    }))\n    .sort((a, b) =&gt; a.Ano - b.Ano);\n\n  // Escalas únicas para todo o gráfico\n  const xScale = d3.scaleLinear()\n    .domain(d3.extent(filteredData, d =&gt; d.Ano))\n    .range([margin.left, width - margin.right]);\n\n  const yValues = filteredData.flatMap(d =&gt; [d.ambos, d.feminino, d.masculino]);\n  const yScale = d3.scaleLinear()\n    .domain([d3.min(yValues), d3.max(yValues)]).nice()\n    .range([height - margin.bottom, margin.top]);\n\n  // Eixos\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\n    .call(d3.axisBottom(xScale).ticks(10))\n    .append(\"text\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", 35)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", \"black\")\n    .text(\"Ano\");\n\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, 0)`)\n    .call(d3.axisLeft(yScale).ticks(8))\n    .append(\"text\")\n    .attr(\"transform\", \"rotate(-90)\")\n    .attr(\"y\", -40)\n    .attr(\"x\", -height / 2)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", \"black\")\n    .text(\"log(Mx)\");\n\n  // Função para gerar as linhas\n  const gerarLinha = (variavel, cor) =&gt; {\n    const linha = d3.line()\n      .x(d =&gt; xScale(d.Ano))\n      .y(d =&gt; yScale(d[variavel]))\n      //.curve(d3.curveMonotoneX); //suaviza a linha\n\n    svg.append(\"path\")\n      .datum(filteredData)\n      .attr(\"d\", linha)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", cor)\n      .attr(\"stroke-width\", 2);\n  };\n\n  // Adiciona as três linhas principais\n  gerarLinha(\"ambos\", cores.ambos);\n  gerarLinha(\"masculino\", cores.masculino);\n  gerarLinha(\"feminino\", cores.feminino);\n\n  return svg.node();\n}\n\n\n\n\n\n\n\nhtml`&lt;p&gt;Para acessar a metodologia utilizada, &lt;a href=\"metodologia.html#proje%C3%A7%C3%B5es-de-mortalidade-do-ibge\"&gt;clique aqui&lt;/a&gt;.&lt;/p&gt;`\n\n\n\n\n\n\n\n\n\n\n\nhtml`&lt;h2&gt;Tábua de mortalidade utilizada&lt;/h2&gt;`\n\n\n\n\n\n\n\nInputs.table(dados)\n\n\n\n\n\n\n\nhtml`\n&lt;body&gt;\n    &lt;br&gt;\n    &lt;p&gt;Baixar \n    &lt;a href=\"dados/base_dados/tabua_concatenada.csv\" download&gt;\n        dados.\n    &lt;/a&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n`"
  },
  {
    "objectID": "dados_mortalidade.html#curva-de-mortalidade-entre-2000-2023",
    "href": "dados_mortalidade.html#curva-de-mortalidade-entre-2000-2023",
    "title": "SIGERIP",
    "section": "Curva de mortalidade entre 2000-2023",
    "text": "Curva de mortalidade entre 2000-2023\n\nGráficoTabela\n\n\n\nviewof seletores3 = {\n  const container = htl.html`\n    &lt;div style=\"\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      align-items: flex-start;\n      gap: 30px;\n      justify-content: center;\n    \"&gt;\n      &lt;!-- Controles existentes --&gt;\n      &lt;div style=\"\n        min-width: 200px;\n        width: 100%;\n        max-width: 300px;\n        margin-bottom: 10px;\n      \"&gt;\n        &lt;div style=\"text-align: center;\"&gt;Local:&lt;/div&gt;\n        &lt;div style=\"display: flex; justify-content: center; width: 100%;\"&gt;\n          &lt;select id=\"regiao-select\" class=\"compact-select\" style=\"\n            padding: 6px 12px;\n            border: 1px solid #ccc;\n            border-radius: 20px;\n            font-size: 16px;\n            text-align: center;\n            width: fit-content;\n            min-width: 180px;\n            background-color: #f8f9fa;\n            cursor: pointer;\n            appearance: none;\n            background-image: url('data:image/svg+xml;charset=UTF-8,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23666\" stroke-width=\"2\"&gt;&lt;polyline points=\"6 9 12 15 18 9\"/&gt;&lt;/svg&gt;');\n            background-repeat: no-repeat;\n            background-position: right 8px center;\n            background-size: 16px;\n            margin-top: 10px;\"&gt;\n            ${regioes.map(regiao =&gt; \n              htl.html`&lt;option value=${regiao}&gt;${regiao}&lt;/option&gt;`\n            )}\n          &lt;/select&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      \n      &lt;div style=\"\n        min-width: 200px;\n        width: 100%;\n        max-width: 300px;\n        margin-bottom: 10px;\n      \"&gt;\n        &lt;div style=\"text-align: center;\"&gt;Ano:&lt;/div&gt;\n        &lt;div style=\"display: flex; justify-content: center; width: 100%;\"&gt;\n          &lt;select id=\"ano-select\" class=\"compact-select\" style=\"\n            padding: 6px 12px;\n            border: 1px solid #ccc;\n            border-radius: 20px;\n            font-size: 16px;\n            text-align: center;\n            width: fit-content;\n            min-width: 150px;\n            background-color: #f8f9fa;\n            cursor: pointer;\n            appearance: none;\n            background-image: url('data:image/svg+xml;charset=UTF-8,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23666\" stroke-width=\"2\"&gt;&lt;polyline points=\"6 9 12 15 18 9\"/&gt;&lt;/svg&gt;');\n            background-repeat: no-repeat;\n            background-position: right 8px center;\n            background-size: 16px;\n            margin-top: 10px;\"&gt;\n            ${anos.map(ano =&gt; \n              htl.html`&lt;option value=${ano}&gt;${ano}&lt;/option&gt;`\n            )}\n          &lt;/select&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  `;\n\n  // Captura os elementos corretamente\n  const regiaoSelect = container.querySelector('#regiao-select');\n  const anoSelect = container.querySelector('#ano-select');\n  const checkboxes = container.querySelectorAll('.model-checkbox');\n\n  // Configuração inicial do valor\n  container.value = {\n    regiao: regiaoSelect.value,\n    ano: anoSelect.value,\n    modelos: Array.from(checkboxes).filter(cb =&gt; cb.checked).map(cb =&gt; cb.value)\n  };\n\n  // Event listeners para selects\n  regiaoSelect.addEventListener('change', () =&gt; {\n    container.value.regiao = regiaoSelect.value;\n    container.dispatchEvent(new CustomEvent('input'));\n  });\n\n  anoSelect.addEventListener('change', () =&gt; {\n    container.value.ano = anoSelect.value;\n    container.dispatchEvent(new CustomEvent('input'));\n  });\n\n  // Código de responsividade (mantido igual)\n  const mediaQuery = window.matchMedia('(max-width: 650px)');\n  const handleScreenChange = (e) =&gt; {\n    if (e.matches) {\n      container.style.flexDirection = 'column';\n      container.style.alignItems = 'center';\n    } else {\n      container.style.flexDirection = 'row';\n      container.style.alignItems = 'flex-start';\n    }\n  };\n  handleScreenChange(mediaQuery);\n  mediaQuery.addEventListener('change', handleScreenChange);\n\n  return container;\n}\n\nregiao3 = seletores3.regiao\nano3 = seletores3.ano\n\n{\n  const ptBRLocaleDefinition = {\n    decimal: \",\",\n    thousands: \"\",\n    grouping: [3],\n    currency: [\"R$\", \"\"]\n  };\n  d3.formatDefaultLocale(ptBRLocaleDefinition);\n\n  const width = 760;\n  const height = 500;\n  const margin = { top: 60, right: 30, bottom: 120, left: 50 };\n  \n  // Cores para as diferentes categorias de sexo - usando as mesmas chaves que serão usadas depois\n  const cores = {\n    masculino: \"darkorange\",\n    feminino: \"green\",\n    ambos: \"steelblue\"\n  };\n\n  // Ordem das faixas etárias\n  const faixaEtariaOrder = [\n    '0', '1-4', '5-9', '10-14', '15-19', '20-24', '25-29',\n    '30-34', '35-39', '40-44', '45-49', '50-54', '55-59',\n    '60-64', '65-69', '70-74', '75-79', '80-84', '85-89', '90+'\n  ];\n\n  const svg = d3.create(\"svg\")\n    .attr(\"viewBox\", [0, 0, width, height])\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic; font: 10px sans-serif;\")\n    .style(\"-webkit-tap-highlight-color\", \"transparent\")\n    .style(\"overflow\", \"visible\");\n\n  // Legenda atualizada para os três sexos\n  const legend = svg.append(\"g\")\n    .attr(\"transform\", `translate(${width/2 - 150}, 30)`);\n\n  // Mapeamento para exibição na legenda\n  const legendLabels = {\n    masculino: \"Homens\",\n    feminino: \"Mulheres\",\n    ambos: \"Ambos\"\n  };\n\n  Object.entries(cores).forEach(([key, color], i) =&gt; {\n    legend.append(\"rect\")\n      .attr(\"x\", i * 100)\n      .attr(\"y\", 0)\n      .attr(\"width\", 15)\n      .attr(\"height\", 15)\n      .attr(\"fill\", color);\n\n    legend.append(\"text\")\n      .attr(\"x\", i * 100 + 20)\n      .attr(\"y\", 12)\n      .text(legendLabels[key])\n      .attr(\"font-size\", \"12px\");\n  });\n\n  // Mapeamento de sexo no conjunto de dados para as chaves usadas nas cores\n  const sexoMap = {\n    \"Masculino\": \"masculino\",\n    \"Feminino\": \"feminino\",\n    \"Ambos\": \"ambos\"\n  };\n\n  // Processamento dos dados agrupado por faixa etária e sexo\n  const groupedData = d3.rollup(\n    dados.filter(d =&gt; d.Local === regiao3 && d.Ano == ano3),\n    v =&gt; ({\n      mx: d3.mean(v, d =&gt; Math.log(+d.nMx))\n    }),\n    d =&gt; d.faixa_etaria,\n    d =&gt; d.sexo\n  );\n\n  // Criar um array de dados para os três sexos\n  const processedData = [];\n  \n  // Iterar sobre cada faixa etária na ordem definida\n  faixaEtariaOrder.forEach(faixa =&gt; {\n    const faixaData = groupedData.get(faixa);\n    \n    if (faixaData) {\n      // Para cada sexo (Masculino, Feminino, Ambos)\n      ['Masculino', 'Feminino', 'Ambos'].forEach(sexo =&gt; {\n        const valor = faixaData.get(sexo);\n        const sexoChave = sexoMap[sexo];\n        \n        processedData.push({\n          faixa_etaria: faixa,\n          sexo: sexoChave,\n          mx: valor ? valor.mx : null  // Usando null em vez de 0 para valores ausentes\n        });\n      });\n    } else {\n      // Se não houver dados para esta faixa etária, adicionar valores como null\n      ['Masculino', 'Feminino', 'Ambos'].forEach(sexo =&gt; {\n        const sexoChave = sexoMap[sexo];\n        \n        processedData.push({\n          faixa_etaria: faixa,\n          sexo: sexoChave,\n          mx: null  // Usando null em vez de 0\n        });\n      });\n    }\n  });\n\n  // Escalas\n  const xScale = d3.scalePoint()\n    .domain(faixaEtariaOrder)\n    .range([margin.left, width - margin.right])\n    .padding(0.5);\n\n  const yValues = processedData.filter(d =&gt; d.mx !== null).map(d =&gt; d.mx);\n  const yScale = d3.scaleLinear()\n    .domain([d3.min(yValues) || -10, d3.max(yValues) || 0]).nice()\n    .range([height - margin.bottom, margin.top]);\n\n  // Eixo X com rotação\n  const xAxis = svg.append(\"g\")\n    .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\n    .call(d3.axisBottom(xScale));\n\n  xAxis.selectAll(\"text\")\n    .attr(\"transform\", \"rotate(-45)\")\n    .attr(\"text-anchor\", \"end\")\n    .attr(\"dx\", \"-0.5em\")\n    .attr(\"dy\", \"0.15em\");\n\n  xAxis.append(\"text\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", 60)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", \"black\")\n    .text(\"Faixa Etária\");\n\n  // Eixo Y\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, 0)`)\n    .call(d3.axisLeft(yScale).ticks(8))\n    .append(\"text\")\n    .attr(\"transform\", \"rotate(-90)\")\n    .attr(\"y\", -40)\n    .attr(\"x\", -height / 2)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", \"black\")\n    .text(\"log(Mx)\");\n\n  // Desenhar linhas para cada sexo\n  const sexos = ['masculino', 'feminino', 'ambos'];\n  \n  sexos.forEach(sexo =&gt; {\n    const sexoData = processedData.filter(d =&gt; d.sexo === sexo);\n    \n    // Ordenar dados por faixa etária\n    sexoData.sort((a, b) =&gt; {\n      return faixaEtariaOrder.indexOf(a.faixa_etaria) - faixaEtariaOrder.indexOf(b.faixa_etaria);\n    });\n    \n    const linha = d3.line()\n      .x(d =&gt; xScale(d.faixa_etaria))\n      .y(d =&gt; yScale(d.mx))\n      .defined(d =&gt; d.mx !== null && !isNaN(d.mx));\n\n    svg.append(\"path\")\n      .datum(sexoData)\n      .attr(\"d\", linha)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", cores[sexo])\n      .attr(\"stroke-width\", 2)\n      .attr(\"class\", `line-${sexo}`);\n      \n    \n  });\n\n  return svg.node();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhtml`&lt;p&gt;Para acessar a metodologia utilizada, &lt;a href=\"metodologia.html#proje%C3%A7%C3%B5es-de-mortalidade-do-ibge\"&gt;clique aqui&lt;/a&gt;.&lt;/p&gt;`\n\n\n\n\n\n\n\n\n\n\n\nhtml`&lt;h2&gt;Tábua de mortalidade utilizada&lt;/h2&gt;`\n\n\n\n\n\n\n\nInputs.table(dados)\n\n\n\n\n\n\n\nhtml`\n&lt;body&gt;\n    &lt;br&gt;\n    &lt;p&gt;Baixar \n    &lt;a href=\"dados/base_dados/tabua_concatenada.csv\" download&gt;\n        dados.\n    &lt;/a&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n`"
  },
  {
    "objectID": "graficos.html",
    "href": "graficos.html",
    "title": "Gráficos",
    "section": "",
    "text": "d3 = require(\"d3@7\")\n// Carregando os dados\nstateData1 = await FileAttachment(\"expec.csv\").csv()\nstateData = tabelaFiltrada2.map(d =&gt; ({\n  estado: d.estado,\n  valor: +d.valor // Converte para número\n}))\ntabelaFiltrada2 = stateData1\n    .filter(d =&gt; +d.Ano === ano5)\n    .map(d =&gt; ({\n        estado: d.Local,\n        valor: d.ex\n    }));\n\n\ndados = FileAttachment(\"comp_pop.csv\").csv()\ntabelaFiltrada = dados.filter(d =&gt; d.new_local === estados &&\n                                   +d.Ano === ano6)"
  },
  {
    "objectID": "graficos.html#mapa-da-expectativa-de-vida-ao-nascer-por-unidade-federativa",
    "href": "graficos.html#mapa-da-expectativa-de-vida-ao-nascer-por-unidade-federativa",
    "title": "Gráficos",
    "section": "Mapa da expectativa de vida ao nascer por Unidade Federativa",
    "text": "Mapa da expectativa de vida ao nascer por Unidade Federativa\nO mapa representa a expectativa de vida ao nascer distribuido entre estados e Distrito Federal ao longo dos anos de 2000 a 2023.\n\nPLotData\n\n\n\nviewof ano5 = Inputs.range([2000, 2023],\n       {\n        value: [2000],\n        step: 1,\n        label: \"Ano: \"\n    }\n)\n\n// Carregar o GeoJSON dos estados brasileiros\ngeoData = await fetch(\"https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/brazil-states.geojson\")\n  .then(response =&gt; response.json())\n\n// Criar o mapa\nwidth = 800;\nheight = 600;\n\nchart3 = {\n  const svg = d3.create(\"svg\")\n    .attr(\"viewBox\", [0, 0, width, height])\n    .style(\"width\", \"100%\")\n    .style(\"height\", \"auto\");\n\n  // Configurar a projeção\n  const projection = d3.geoMercator()\n    .center([-52, -15]) // Centralizar no Brasil\n    .scale(700)\n    .translate([width / 2, height / 2]);\n\n  const path = d3.geoPath().projection(projection);\n\n  // Criar escala de cores\n  const valores = stateData.map(d =&gt; d.valor);\n  const colorScale = d3.scaleSequential()\n    .domain([d3.min(valores), d3.max(valores)])\n    .interpolator(d3.interpolateBlues);\n\n  // Função para normalizar nomes (remover acentos)\n  const normalizeName = name =&gt; name\n    ? name.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase()\n    : \"\";\n\n  // Criar mapa\n  svg.selectAll(\"path\")\n    .data(geoData.features)\n    .join(\"path\")\n    .attr(\"d\", path)\n    .attr(\"fill\", d =&gt; {\n      const state = stateData.find(s =&gt;\n        normalizeName(s.estado) === normalizeName(d.properties.name)\n      );\n      return state ? colorScale(state.valor) : \"#ccc\";\n    })\n    .attr(\"stroke\", \"white\")\n    .attr(\"stroke-width\", 0.5);\n\n  // Adicionar tooltip\n  const tooltip = d3.select(\"body\").append(\"div\")\n    .attr(\"class\", \"tooltip\")\n    .style(\"opacity\", 0)\n    .style(\"position\", \"absolute\")\n    .style(\"background-color\", \"white\")\n    .style(\"border\", \"solid\")\n    .style(\"border-width\", \"1px\")\n    .style(\"border-radius\", \"5px\")\n    .style(\"padding\", \"5px\");\n\n  svg.selectAll(\"path\")\n    .on(\"mouseover\", (event, d) =&gt; {\n      const state = stateData.find(s =&gt;\n        normalizeName(s.estado) === normalizeName(d.properties.name)\n      );\n\n      tooltip.transition()\n        .duration(200)\n        .style(\"opacity\", .9);\n\n      tooltip.html(`\n        Estado: ${d.properties.name}&lt;br/&gt;\n        Valor: ${state ? state.valor : 'Sem dados'}\n      `)\n        .style(\"left\", (event.pageX + 10) + \"px\")\n        .style(\"top\", (event.pageY - 28) + \"px\");\n    })\n    .on(\"mouseout\", () =&gt; {\n      tooltip.transition()\n        .duration(500)\n        .style(\"opacity\", 0);\n    });\n\n  // Adicionar barra de cores (legenda)\n  const legendWidth = 400;\n  const legendHeight = 20;\n\n  const legend = svg.append(\"g\")\n    .attr(\"transform\", `translate(${(width - legendWidth) / 2}, ${height - 25})`);\n\n  const gradient = legend.append(\"defs\")\n    .append(\"linearGradient\")\n    .attr(\"id\", \"legend-gradient\")\n    .attr(\"x1\", \"0%\")\n    .attr(\"x2\", \"100%\")\n    .attr(\"y1\", \"0%\")\n    .attr(\"y2\", \"0%\");\n\n  gradient.append(\"stop\")\n    .attr(\"offset\", \"0%\")\n    .attr(\"stop-color\", colorScale(d3.min(valores)));\n\n  gradient.append(\"stop\")\n    .attr(\"offset\", \"100%\")\n    .attr(\"stop-color\", colorScale(d3.max(valores)));\n\n  legend.append(\"rect\")\n    .attr(\"width\", legendWidth)\n    .attr(\"height\", legendHeight)\n    .style(\"fill\", \"url(#legend-gradient)\");\n\n  // Adicionar rótulos na barra de cores\n  legend.append(\"text\")\n    .attr(\"x\", 0)\n    .attr(\"y\", -5)\n    .attr(\"text-anchor\", \"start\")\n    .style(\"font-size\", \"20px\")\n    .text(Math.round(d3.min(valores)));\n\n  legend.append(\"text\")\n    .attr(\"x\", legendWidth)\n    .attr(\"y\", -5)\n    .attr(\"text-anchor\", \"end\")\n    .style(\"font-size\", \"20px\")\n    .text(Math.round(d3.max(valores)));\n\n  return svg.node();\n}\n\n// Mostrar valores mínimos e máximos\n    minMaxValues = {\n    const valores = stateData.map(d =&gt; d.valor);\n    return {\n        min: d3.min(valores),\n        max: d3.max(valores)\n    };\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInputs.table(tabelaFiltrada2)\n\n\n\n\n\n\n\nhtml`\n&lt;body&gt;\n    &lt;a href=\"expec.csv\" download&gt;\n        &lt;button style=\"padding: 8px 16px; background: #3498db; color: white; border: none; border-radius: 4px; cursor: pointer; margin-top: 10px; width: 220px\"&gt;\n          ⬇️ Baixar CSV completo\n        &lt;/button&gt;\n    &lt;/a&gt;\n    &lt;a download=\"tabelaFiltrada2.csv\" href=\"${\"data:text/csv;charset=utf-8,\" + encodeURIComponent(csv)}\"&gt;\n        &lt;button style=\"padding: 8px 16px; background: #3498db; color: white; border: none; border-radius: 4px; cursor: pointer; margin-top: 10px; width: 220px\"&gt;\n          ⬇️ Baixar CSV filtrado\n        &lt;/button&gt;\n&lt;/a&gt;\n&lt;/body&gt;\n`"
  },
  {
    "objectID": "graficos.html#evolução-da-população-por-faixa-etária",
    "href": "graficos.html#evolução-da-população-por-faixa-etária",
    "title": "Gráficos",
    "section": "Evolução da População por faixa-etária",
    "text": "Evolução da População por faixa-etária\nO gráfico representa uma comparação entre dados interpolados pelo IBGE e por nós (SIGERIP), que nos demonstra a população por faixa-etária sellecionado por nação, regiões, estados e distrito federal.\n\nPLotData\n\n\n\nviewof ano6 = Inputs.range([2000, 2023],\n       {\n        value: [2000],\n        step: 1,\n        label: \"Ano: \"\n    }\n)\n\nviewof estados = Inputs.select(['Brasil', 'Norte', 'Nordeste', 'Sudeste', 'Sul', 'Centro-Oeste',\n       'Rondônia', 'Acre', 'Amazonas', 'Roraima', 'Pará', 'Amapá',\n       'Tocantins', 'Maranhão', 'Piauí', 'Ceará', 'Rio Grande do Norte',\n       'Paraíba', 'Pernambuco', 'Alagoas', 'Sergipe', 'Bahia',\n       'Minas Gerais', 'Espírito Santo', 'Rio de Janeiro', 'São Paulo',\n       'Paraná', 'Santa Catarina', 'Rio Grande do Sul',\n       'Mato Grosso do Sul', 'Mato Grosso', 'Goiás', 'Distrito Federal'],\n       {\n        value: 'Brasil',\n        label: \"Local: \"\n        }\n       )\n\n// Gráfico\nchart = {{\n  // Definição das dimensões do gráfico\n  const width = 828;  // Largura do gráfico\n  const height = 600; // Altura do gráfico\n  const marginTop = 20;    // Margem superior\n  const marginRight = 20;  // Margem direita\n  const marginBottom = 30; // Margem inferior\n  const marginLeft = 50;   // Margem esquerda\n\n  // Escala para o eixo X (Ano)\n  const x = d3.scaleLinear()\n    .domain(d3.extent(tabelaFiltrada, d =&gt; +d.new_faixa))  // Determina o intervalo de valores para o eixo X com base no ano\n    .range([marginLeft, width - marginRight]);  // Define o intervalo de pixels no eixo X\n\n  // Escala para o eixo Y (Total)\n  const y = d3.scaleLinear()\n    .domain([d3.min(tabelaFiltrada, d =&gt; +d.Total), d3.max(tabelaFiltrada, d =&gt; +d.Total)]).nice()  // Define o intervalo de valores para o eixo Y com base no total\n    .range([height - marginBottom, marginTop]);  // Define o intervalo de pixels no eixo Y\n\n  // Definição de cores para as linhas\n  const color = d3.scaleOrdinal(d3.schemeCategory10);  // Usa uma paleta de cores pré-definida do D3\n\n  // Criação do elemento SVG para o gráfico\n  const svg = d3.create(\"svg\")\n    .attr(\"width\", width)  // Define a largura do SVG\n    .attr(\"height\", height)  // Define a altura do SVG\n    .attr(\"viewBox\", [0, 0, width, height])  // Define a visualização do SVG com base nas dimensões\n    .style(\"max-width\", \"100%\")  // Estilo para garantir que o gráfico seja responsivo\n    .style(\"height\", \"auto\")  // Estilo para ajustar a altura automaticamente\n    .style(\"overflow\", \"visible\")  // Permite que os elementos do gráfico saiam do limite do SVG\n    .style(\"font\", \"10px sans-serif\");  // Define o estilo da fonte no gráfico\n\n  // Adiciona o eixo X (ano)\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(0,${height - marginBottom})`)  // Posiciona o eixo X na parte inferior\n    .call(d3.axisBottom(x).tickFormat(d3.format(\"d\")));  // Aplica a escala X e formata os ticks como números inteiros\n\n  // Adiciona o eixo Y (total)\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${marginLeft},0)`)  // Posiciona o eixo Y à esquerda\n    .call(d3.axisLeft(y))  // Aplica a escala Y\n    .call(g =&gt; g.select(\".domain\").remove())  // Remove a linha do eixo Y\n    .call(g =&gt; g.append(\"text\")  // Adiciona texto ao lado do eixo Y\n      .attr(\"x\", -marginLeft)  // Posiciona o texto à esquerda do gráfico\n      .attr(\"y\", 10)  // Posiciona o texto no eixo Y\n      .attr(\"fill\", \"currentColor\")  // Define a cor do texto\n      .attr(\"text-anchor\", \"start\")  // Define o alinhamento do texto\n      .text(\"↑ Total (%)\"));  // Texto do eixo Y\n\n  // Agrupa os dados pela coluna UF (Unidade Federativa)\n  const groupedData = d3.group(tabelaFiltrada, d =&gt; d.Fonte);\n\n  // Define a função para desenhar as linhas no gráfico\n  const line = d3.line()\n    .x(d =&gt; x(+d.new_faixa))  // Define a posição X da linha com base no ano\n    .y(d =&gt; y(+d.Total));  // Define a posição Y da linha com base no total\n\n  // Adiciona as linhas para cada grupo de dados\n  const paths = svg.append(\"g\")\n    .selectAll(\"path\")  // Seleciona todos os elementos \"path\" (caminhos das linhas)\n    .data(groupedData)  // Vincula os dados agrupados (por UF)\n    .join(\"path\")  // Cria um novo \"path\" para cada grupo de dados\n    .attr(\"fill\", \"none\")  // Define que as linhas não terão preenchimento\n    .attr(\"stroke\", ([key]) =&gt; color(key))  // Define a cor da linha de acordo com a UF\n    .attr(\"stroke-width\", 1.5)  // Define a espessura da linha\n    .attr(\"d\", ([, values]) =&gt; line(values));  // Desenha a linha para cada conjunto de dados\n\n  // Adiciona o texto com o nome da UF na extremidade de cada linha\n  svg.append(\"g\")\n    .selectAll(\"text\")\n    .data(groupedData)\n    .join(\"text\")\n    .attr(\"font-size\", 20)  // Define o tamanho da fonte do texto\n    .attr(\"x\", width - marginRight)  // Posiciona o texto à direita\n    .attr(\"y\", ([, values]) =&gt; y(+values[values.length - 1].Total))  // Posiciona o texto na última coordenada da linha\n    .attr(\"dy\", \"0.35em\")  // Ajusta a posição vertical do texto\n    .attr(\"text-anchor\", \"start\")  // Alinha o texto à esquerda\n    .attr(\"fill\", ([key]) =&gt; color(key))  // Define a cor do texto de acordo com a UF\n    .text(([key]) =&gt; key);  // Define o texto como o nome da UF\n  \n  // Adiciona os pontos no gráfico\n  svg.append(\"g\")\n    .selectAll(\"circle\")\n    .data(tabelaFiltrada)\n    .join(\"circle\")\n    .attr(\"cx\", d =&gt; x(+d.new_faixa))  // Posição horizontal baseada no ano\n    .attr(\"cy\", d =&gt; y(+d.Total))  // Posição vertical baseada no total\n    .attr(\"r\", 4)  // Define o raio do círculo\n    .attr(\"fill\", d =&gt; color(d.Fonte))  // Define a cor do ponto com base na UF\n    .attr(\"stroke\", \"white\")  // Adiciona uma borda branca ao ponto\n    .attr(\"stroke-width\", 1.5)  // Define a espessura da borda\n    ;\n\n  // Criação do tooltip (caixa de informação ao passar o mouse)\n  const tooltip = d3.select(\"body\").append(\"div\")\n    .style(\"position\", \"absolute\")  // Define a posição absoluta do tooltip\n    .style(\"background\", \"white\")  // Define o fundo branco do tooltip\n    .style(\"border\", \"1px solid #ccc\")  // Define a borda do tooltip\n    .style(\"padding\", \"5px\")  // Adiciona o espaçamento interno\n    .style(\"border-radius\", \"5px\")  // Define bordas arredondadas\n    .style(\"font-size\", \"12px\")  // Define o tamanho da fonte\n    .style(\"pointer-events\", \"none\")  // Impede a interação do tooltip com o gráfico\n    .style(\"opacity\", 0);  // Inicialmente o tooltip é invisível\n\n  // Adiciona interação para mostrar o tooltip quando o mouse passa sobre a linha\n  paths.on(\"pointermove\", (event, [uf, values]) =&gt; {\n    // Encontra o ponto mais próximo do mouse na linha\n    const [xm, ym] = d3.pointer(event);\n    const closest = d3.least(values, d =&gt; Math.hypot(x(+d.Ano) - xm, y(+d.Total) - ym));\n    \n    if (closest) {\n      const { Ano, Total } = closest;  // Obtém os dados do ponto mais próximo\n\n      // Destaque da linha: reduz opacidade das outras e aumenta a espessura da linha ativa\n      paths.attr(\"stroke-opacity\", 0.2);  \n      d3.select(event.target).attr(\"stroke-opacity\", 1).attr(\"stroke-width\", 2.5);\n\n      // Atualiza o tooltip com os dados do ponto mais próximo\n      tooltip.style(\"opacity\", 1)\n        .html(`Fonte: ${uf}&lt;br&gt;Ano: ${Ano}&lt;br&gt;Total: ${Total}`)\n        .style(\"left\", `${event.pageX + 10}px`)  // Posiciona o tooltip ao lado do mouse\n        .style(\"top\", `${event.pageY + 10}px`);  // Posiciona o tooltip acima do mouse\n    }\n  });\n\n  // Esconde o tooltip e restaura a opacidade das linhas quando o mouse sai\n  paths.on(\"pointerleave\", () =&gt; {\n    paths.attr(\"stroke-opacity\", 1).attr(\"stroke-width\", 1.5);  // Restaura a opacidade e espessura das linhas\n    tooltip.style(\"opacity\", 0);  // Oculta o tooltip\n  });\n\n  return svg.node();  // Retorna o elemento SVG para ser exibido\n}};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInputs.table(tabelaFiltrada)\n\n\n\n\n\n\n\nhtml`\n&lt;body&gt;\n    &lt;a href=\"comp_pop.csv\" download&gt;\n        &lt;button style=\"padding: 8px 16px; background: #3498db; color: white; border: none; border-radius: 4px; cursor: pointer; margin-top: 10px; width: 220px\"&gt;\n          ⬇️ Baixar CSV completo\n        &lt;/button&gt;\n    &lt;/a&gt;\n    &lt;a download=\"tabelaFiltrada.csv\" href=\"${\"data:text/csv;charset=utf-8,\" + encodeURIComponent(csv)}\"&gt;\n        &lt;button style=\"padding: 8px 16px; background: #3498db; color: white; border: none; border-radius: 4px; cursor: pointer; margin-top: 10px; width: 220px\"&gt;\n          ⬇️ Baixar CSV filtrado\n        &lt;/button&gt;\n&lt;/a&gt;\n&lt;/body&gt;\n`"
  },
  {
    "objectID": "graficos.html#mortalidade-por-faixa-etária",
    "href": "graficos.html#mortalidade-por-faixa-etária",
    "title": "Gráficos",
    "section": "Mortalidade por faixa-etária",
    "text": "Mortalidade por faixa-etária\nO gráfico representa a mortalidade ao longo do tempo por nação, regiões, estado e distrito federal, podendo selecionar faixa etária no qual deseja ver a sua evolução ao longo do tempo (2000 - 2023).\n\nPLotData\n\n\n\nmortalidade = FileAttachment(\"mortalidade1.csv\").csv()\nmortalidade_filtrada = mortalidade\n    .filter(d =&gt; d.idade === faixa_etaria_mortalidade &&\n                 (estados_mortalidade.includes(\"Todos estados\") || estados_mortalidade.includes(d.UF))\n    )\n    .map(d =&gt; ({\n        Ano: d.Ano,\n        UF: d.UF,\n        Total: d.Total\n    }));\n\nviewof faixa_etaria_mortalidade = Inputs.select(\n    ['Menos de 1 ano', '1 a 4 anos', '5 a 9 anos', '10 a 14 anos', '15 a 19 anos', '20 a 24 anos', '25 a 29 anos', '30 a 34 anos', '35 a 39 anos', '40 a 44 anos', '45 a 49 anos', '50 a 54 anos', '55 a 59 anos', '60 a 64 anos', '65 a 69 anos', '70 a 74 anos', '75 a 79 anos', '80 anos ou mais'],\n    {\n        value: ['Menos de 1 ano'],\n        label: \"Faixa etária: \"\n    }\n)\nviewof estados_mortalidade = Inputs.checkbox(\n  [\n    \"AC\", \"AL\", \"AM\", \"AP\", \"BA\", \"CE\", \"DF\", \"ES\", \"GO\", \"MA\", \n    \"MT\", \"MS\", \"MG\", \"PA\", \"PB\", \"PE\", \"PI\", \"PR\", \"RJ\", \"RN\", \n    \"RO\", \"RR\", \"RS\", \"SC\", \"SE\", \"SP\", \"TO\", \"Todos estados\"\n  ],\n  {\n    value: [\"Todos estados\"], // Define \"Todos estados\" como valor inicial selecionado\n    label: \"Local: \",\n    sort: true, // Ordena alfabeticamente\n    unique: true // Evita duplicatas\n  }\n)\n\n\n// Gráfico\nchart1 = {{\n  // Definição das dimensões do gráfico\n  const width = 928;  // Largura do gráfico\n  const height = 600; // Altura do gráfico\n  const marginTop = 20;    // Margem superior\n  const marginRight = 20;  // Margem direita\n  const marginBottom = 30; // Margem inferior\n  const marginLeft = 50;   // Margem esquerda\n\n  // Escala para o eixo X (Ano)\n  const x = d3.scaleLinear()\n    .domain(d3.extent(mortalidade_filtrada, d =&gt; +d.Ano))  // Determina o intervalo de valores para o eixo X com base no ano\n    .range([marginLeft, width - marginRight]);  // Define o intervalo de pixels no eixo X\n\n  // Escala para o eixo Y (Total)\n  const y = d3.scaleLinear()\n    .domain([d3.min(mortalidade_filtrada, d =&gt; +d.Total), d3.max(mortalidade_filtrada, d =&gt; +d.Total)]).nice()  // Define o intervalo de valores para o eixo Y com base no total\n    .range([height - marginBottom, marginTop]);  // Define o intervalo de pixels no eixo Y\n\n  // Definição de cores para as linhas\n  const color = d3.scaleOrdinal(d3.schemeCategory10);  // Usa uma paleta de cores pré-definida do D3\n\n  // Criação do elemento SVG para o gráfico\n  const svg = d3.create(\"svg\")\n    .attr(\"width\", width)  // Define a largura do SVG\n    .attr(\"height\", height)  // Define a altura do SVG\n    .attr(\"viewBox\", [0, 0, width, height])  // Define a visualização do SVG com base nas dimensões\n    .style(\"max-width\", \"100%\")  // Estilo para garantir que o gráfico seja responsivo\n    .style(\"height\", \"auto\")  // Estilo para ajustar a altura automaticamente\n    .style(\"overflow\", \"visible\")  // Permite que os elementos do gráfico saiam do limite do SVG\n    .style(\"font\", \"10px sans-serif\");  // Define o estilo da fonte no gráfico\n\n  // Adiciona o eixo X (ano)\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(0,${height - marginBottom})`)  // Posiciona o eixo X na parte inferior\n    .call(d3.axisBottom(x).tickFormat(d3.format(\"d\")));  // Aplica a escala X e formata os ticks como números inteiros\n\n  // Adiciona o eixo Y (total)\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${marginLeft},0)`)  // Posiciona o eixo Y à esquerda\n    .call(d3.axisLeft(y))  // Aplica a escala Y\n    .call(g =&gt; g.select(\".domain\").remove())  // Remove a linha do eixo Y\n    .call(g =&gt; g.append(\"text\")  // Adiciona texto ao lado do eixo Y\n      .attr(\"x\", -marginLeft)  // Posiciona o texto à esquerda do gráfico\n      .attr(\"y\", 10)  // Posiciona o texto no eixo Y\n      .attr(\"fill\", \"currentColor\")  // Define a cor do texto\n      .attr(\"text-anchor\", \"start\")  // Define o alinhamento do texto\n      .text(\"↑ Total (%)\"));  // Texto do eixo Y\n\n  // Agrupa os dados pela coluna UF (Unidade Federativa)\n  const groupedData = d3.group(mortalidade_filtrada, d =&gt; d.UF);\n\n  // Define a função para desenhar as linhas no gráfico\n  const line = d3.line()\n    .x(d =&gt; x(+d.Ano))  // Define a posição X da linha com base no ano\n    .y(d =&gt; y(+d.Total));  // Define a posição Y da linha com base no total\n\n  // Adiciona as linhas para cada grupo de dados\n  const paths = svg.append(\"g\")\n    .selectAll(\"path\")  // Seleciona todos os elementos \"path\" (caminhos das linhas)\n    .data(groupedData)  // Vincula os dados agrupados (por UF)\n    .join(\"path\")  // Cria um novo \"path\" para cada grupo de dados\n    .attr(\"fill\", \"none\")  // Define que as linhas não terão preenchimento\n    .attr(\"stroke\", ([key]) =&gt; color(key))  // Define a cor da linha de acordo com a UF\n    .attr(\"stroke-width\", 1.5)  // Define a espessura da linha\n    .attr(\"d\", ([, values]) =&gt; line(values));  // Desenha a linha para cada conjunto de dados\n\n  // Adiciona o texto com o nome da UF na extremidade de cada linha\n  svg.append(\"g\")\n    .selectAll(\"text\")\n    .data(groupedData)\n    .join(\"text\")\n    .attr(\"font-size\", 10)  // Define o tamanho da fonte do texto\n    .attr(\"x\", width - marginRight)  // Posiciona o texto à direita\n    .attr(\"y\", ([, values]) =&gt; y(+values[values.length - 1].Total))  // Posiciona o texto na última coordenada da linha\n    .attr(\"dy\", \"0.35em\")  // Ajusta a posição vertical do texto\n    .attr(\"text-anchor\", \"start\")  // Alinha o texto à esquerda\n    .attr(\"fill\", ([key]) =&gt; color(key))  // Define a cor do texto de acordo com a UF\n    .text(([key]) =&gt; key);  // Define o texto como o nome da UF\n\n\n\n  // Criação do tooltip (caixa de informação ao passar o mouse)\n  const tooltip = d3.select(\"body\").append(\"div\")\n    .style(\"position\", \"absolute\")  // Define a posição absoluta do tooltip\n    .style(\"background\", \"white\")  // Define o fundo branco do tooltip\n    .style(\"border\", \"1px solid #ccc\")  // Define a borda do tooltip\n    .style(\"padding\", \"5px\")  // Adiciona o espaçamento interno\n    .style(\"border-radius\", \"5px\")  // Define bordas arredondadas\n    .style(\"font-size\", \"12px\")  // Define o tamanho da fonte\n    .style(\"pointer-events\", \"none\")  // Impede a interação do tooltip com o gráfico\n    .style(\"opacity\", 0);  // Inicialmente o tooltip é invisível\n\n  // Adiciona interação para mostrar o tooltip quando o mouse passa sobre a linha\n  paths.on(\"pointermove\", (event, [uf, values]) =&gt; {\n    // Encontra o ponto mais próximo do mouse na linha\n    const [xm, ym] = d3.pointer(event);\n    const closest = d3.least(values, d =&gt; Math.hypot(x(+d.Ano) - xm, y(+d.Total) - ym));\n    \n    if (closest) {\n      const { Ano, Total } = closest;  // Obtém os dados do ponto mais próximo\n\n      // Destaque da linha: reduz opacidade das outras e aumenta a espessura da linha ativa\n      paths.attr(\"stroke-opacity\", 0.2);  \n      d3.select(event.target).attr(\"stroke-opacity\", 1).attr(\"stroke-width\", 2.5);\n\n      // Atualiza o tooltip com os dados do ponto mais próximo\n      tooltip.style(\"opacity\", 1)\n        .html(`UF: ${uf}&lt;br&gt;Ano: ${Ano}&lt;br&gt;Total: ${Total}`)\n        .style(\"left\", `${event.pageX + 10}px`)  // Posiciona o tooltip ao lado do mouse\n        .style(\"top\", `${event.pageY + 10}px`);  // Posiciona o tooltip acima do mouse\n    }\n  });\n\n  // Esconde o tooltip e restaura a opacidade das linhas quando o mouse sai\n  paths.on(\"pointerleave\", () =&gt; {\n    paths.attr(\"stroke-opacity\", 1).attr(\"stroke-width\", 1.5);  // Restaura a opacidade e espessura das linhas\n    tooltip.style(\"opacity\", 0);  // Oculta o tooltip\n  });\n\n  return svg.node();  // Retorna o elemento SVG para ser exibido\n}};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInputs.table(tabelaFiltrada)\n\n\n\n\n\n\n\nfunction converterParaCSV(dados) {\n  const cabecalho = Object.keys(dados[0]).join(\",\")\n  const linhas = dados.map(obj =&gt; \n    Object.values(obj).map(v =&gt; \n      `\"${String(v).replace(/\"/g, '\"\"')}\"`\n    ).join(\",\")\n  )\n  return [cabecalho, ...linhas].join(\"\\n\")\n}\ncsv = converterParaCSV(mortalidade_filtrada)\nhtml`\n&lt;body&gt;\n    &lt;a href=\"mortalidade1.csv\" download&gt;\n        &lt;button style=\"padding: 8px 16px; background: #3498db; color: white; border: none; border-radius: 4px; cursor: pointer; margin-top: 10px; width: 220px\"&gt;\n          ⬇️ Baixar CSV completo\n        &lt;/button&gt;\n    &lt;/a&gt;\n    &lt;a download=\"mortalidade_filtrada.csv\" href=\"${\"data:text/csv;charset=utf-8,\" + encodeURIComponent(csv)}\"&gt;\n        &lt;button style=\"padding: 8px 16px; background: #3498db; color: white; border: none; border-radius: 4px; cursor: pointer; margin-top: 10px; width: 220px\"&gt;\n          ⬇️ Baixar CSV filtrado\n        &lt;/button&gt;\n&lt;/a&gt;\n&lt;/body&gt;\n`"
  },
  {
    "objectID": "metodologia.html",
    "href": "metodologia.html",
    "title": "SIGERIP",
    "section": "",
    "text": "html`\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"pt-BR\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Metodologias de Projeção de Mortalidade&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\n            line-height: 1.6;\n            color: #333;\n            background-color: #f8f9fa;\n            margin: 0;\n            padding: 20px;\n        }\n        .container {\n            max-width: 900px;\n            margin: 0 auto;\n            background-color: #ffffff;\n            padding: 2rem;\n            border-radius: 8px;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.08);\n        }\n        h1 {\n            color: #2c3e50;\n            text-align: center;\n            border-bottom: 2px solid #e0e0e0;\n            padding-bottom: 10px;\n            margin-bottom: 30px;\n        }\n        h2 {\n            color: #34495e;\n            border-bottom: 1px solid #e0e0e0;\n            padding-bottom: 8px;\n            margin-top: 40px;\n        }\n        h3 {\n            color: #7f8c8d;\n            margin-top: 25px;\n        }\n        ul {\n            list-style-type: disc;\n            padding-left: 20px;\n        }\n        li {\n            margin-bottom: 10px;\n        }\n        p {\n            margin-bottom: 15px;\n        }\n        .formula {\n            background-color: #ecf0f1;\n            padding: 15px;\n            border-radius: 5px;\n            font-size: 1.1em;\n            text-align: center;\n            overflow-x: auto;\n            margin: 20px 0;\n        }\n        code {\n            background-color: #e9ecef;\n            padding: 2px 5px;\n            border-radius: 4px;\n            font-family: \"Courier New\", Courier, monospace;\n        }\n        .source {\n            font-style: italic;\n            color: #555;\n            font-size: 0.9em;\n            margin-top: 20px;\n        }\n        a {\n            color: #2980b9;\n            text-decoration: none;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;`"
  },
  {
    "objectID": "metodologia.html#metodologia-de-coleta-e-tratamento-dos-dados-de-mortalidade-infantil",
    "href": "metodologia.html#metodologia-de-coleta-e-tratamento-dos-dados-de-mortalidade-infantil",
    "title": "SIGERIP",
    "section": "Metodologia de Coleta e Tratamento dos Dados de Mortalidade Infantil",
    "text": "Metodologia de Coleta e Tratamento dos Dados de Mortalidade Infantil\n\nhtml`\n&lt;body&gt;\n    &lt;p&gt;A metodologia adotada para a coleta, tratamento e análise dos dados de mortalidade infantil neste projeto fundamenta-se em procedimentos técnicos rigorosos, com o objetivo de garantir a precisão, a comparabilidade e a integridade das informações em diferentes recortes geográficos, para o período de 2000 a 2023.&lt;/p&gt;\n\n    &lt;p&gt;Os dados utilizados foram obtidos a partir do arquivo consolidado disponível no link &lt;a href=\"https://docs.google.com/spreadsheets/d/1mJ4NdolOPlsAykFTHolrnh8odUaZE5WM/edit?gid=1015938775#gid=1015938775\" target=\"_blank\"&gt;Planilha de Dados Consolidados&lt;/a&gt;. As informações originais são provenientes do Sistema de Informações sobre Nascidos Vivos (SINASC) e do Sistema de Informações sobre Mortalidade (SIM), ambos disponibilizados pelo DATASUS (&lt;a href=\"https://datasus.saude.gov.br/informacoes-de-saude-tabnet/\" target=\"_blank\"&gt;Tabnet/DATASUS&lt;/a&gt;). No entanto, os dados presentes na planilha já foram consolidados e validados pelo Instituto Brasileiro de Geografia e Estatística (IBGE), o que confere maior confiabilidade e padronização às estatísticas apresentadas.&lt;/p&gt;\n\n    &lt;h3&gt;1. Estruturação das Bases de Dados&lt;/h3&gt;\n\n    &lt;p&gt;O primeiro passo consistiu na organização dos dados em duas bases distintas: uma contendo informações agregadas em nível nacional, regional e estadual, e outra composta exclusivamente por dados municipais. Essa separação permite análises comparativas entre diferentes escalas geográficas, facilita a identificação de padrões regionais e aprimora o controle de qualidade dos registros, possibilitando a detecção de eventuais inconsistências ou lacunas nos dados.&lt;/p&gt;\n\n    &lt;h3&gt;2. Variável Analisada&lt;/h3&gt;\n    &lt;p&gt;A principal variável analisada é a taxa de mortalidade infantil, definida como o número de óbitos de crianças menores de um ano de idade, por mil nascidos vivos, em determinado ano e localidade. Trata-se de um dos mais relevantes indicadores de saúde pública e desenvolvimento social, utilizado para monitorar tendências temporais, avaliar políticas de saúde e identificar desigualdades regionais e locais.&lt;/p&gt;\n\n    &lt;p&gt;A taxa de mortalidade infantil (TMI) é calculada pela seguinte fórmula:&lt;/p&gt;\n    \n    &lt;div class=\"formula\"&gt;\n        &lt;math xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mtext&gt;N&lt;/mtext&gt;&lt;mover accent='true'&gt;&lt;mtext&gt;u&lt;/mtext&gt;&lt;mo style=\"math-style:normal;math-depth:0;\" stretchy=\"false\"&gt;&#x2ca;&lt;/mo&gt;&lt;/mover&gt;&lt;mtext&gt;mero&#xa0;de&#xa0;&lt;/mtext&gt;&lt;mover accent='true'&gt;&lt;mtext&gt;O&lt;/mtext&gt;&lt;mo style=\"math-style:normal;math-depth:0;\" stretchy=\"false\"&gt;&#x2ca;&lt;/mo&gt;&lt;/mover&gt;&lt;mtext&gt;bitos&#xa0;de&#xa0;Menores&#xa0;de&#xa0;um&#xa0;Ano&lt;/mtext&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mtext&gt;N&lt;/mtext&gt;&lt;mover accent='true'&gt;&lt;mtext&gt;u&lt;/mtext&gt;&lt;mo style=\"math-style:normal;math-depth:0;\" stretchy=\"false\"&gt;&#x2ca;&lt;/mo&gt;&lt;/mover&gt;&lt;mtext&gt;merode&#xa0;Nascidos&#xa0;Vivos&lt;/mtext&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/math&gt;\n    &lt;/div&gt;\n\n    &lt;p&gt;onde:&lt;/p&gt;\n    &lt;ul&gt;\n        &lt;li&gt;O numerador corresponde ao total de óbitos de crianças menores de um ano, registrados no SIM;&lt;/li&gt;\n        &lt;li&gt;O denominador corresponde ao total de nascidos vivos, registrados no SINASC.&lt;/li&gt;\n    &lt;/ul&gt;\n    \n    &lt;h3&gt;3. Filtragem Temporal e Qualidade dos Registros&lt;/h3&gt;\n    &lt;p&gt;Considerando a existência de registros faltantes e inconsistências nos dados municipais referentes ao período de 1990 a 1999, optou-se por restringir as análises ao intervalo de 2000 a 2023. Essa decisão visa assegurar maior confiabilidade às estimativas, evitando distorções decorrentes de sub-registro ou ausência de informação em determinados municípios, especialmente nos anos anteriores a 2000.&lt;/p&gt;\n    \n    &lt;h3&gt;4. Tratamento dos Registros Municipais&lt;/h3&gt;\n    \n    &lt;p&gt;No processamento da base municipal, foram excluídos todos os registros classificados como \"Município Ignorado\", de modo a garantir que as análises reflitam apenas localidades devidamente identificadas e com dados consistentes. Esse procedimento contribui para a robustez das estatísticas, para a comparabilidade entre os diferentes municípios e para a transparência dos resultados apresentados.&lt;/p&gt;\n    \n    &lt;h3&gt;5. Disponibilidade e Transparência dos Dados&lt;/h3&gt;\n    \n    &lt;p&gt;Os dados tratados e organizados estão disponíveis para consulta e download no arquivo anexo, bem como na planilha pública referenciada. A disponibilização dos dados já consolidados pelo IBGE assegura a reprodutibilidade das análises e a transparência metodológica, permitindo que outros pesquisadores e gestores possam utilizar as mesmas informações em estudos e avaliações futuras.&lt;/p&gt;\n&lt;/body\n`"
  },
  {
    "objectID": "metodologia.html#projeções-de-mortalidade-do-ibge",
    "href": "metodologia.html#projeções-de-mortalidade-do-ibge",
    "title": "SIGERIP",
    "section": "Projeções de Mortalidade do IBGE",
    "text": "Projeções de Mortalidade do IBGE\n\nhtml`\n&lt;body&gt;\n\n    &lt;div&gt;\n        &lt;section id=\"ibge\"&gt;\n            \n            &lt;p&gt;As projeções de mortalidade do IBGE, conforme descrito no documento \"Projeções da população: notas metodológicas 01/2024\", adotam os seguintes procedimentos:&lt;/p&gt;\n\n            &lt;h3&gt;Nível da Mortalidade (Expectativa de Vida ao Nascer - &lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;e_0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;)&lt;/h3&gt;\n            &lt;ul&gt;\n                &lt;li&gt;Foi assumida uma convergência progressiva da esperança de vida ao nascer entre todas as Unidades da Federação (UFs), com base em tendências recentes.&lt;/li&gt;\n                &lt;li&gt;Os valores-limite adotados foram 85,0 anos para homens e 88,0 anos para mulheres, seguindo as Tábuas Modelo Oeste das Nações Unidas (UNITED NATIONS, 2011) e alinhados com as novas projeções da ONU (2024) para o Brasil.&lt;/li&gt;\n                &lt;li&gt;A projeção da &lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;e_0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;) foi realizada por meio de um ajuste logístico, aplicado separadamente por sexo e UF, utilizando dois pontos de referência:\n                    &lt;ul&gt;\n                        &lt;li&gt;A estimativa para 2023 (base em dados observados).&lt;/li&gt;\n                        &lt;li&gt;O valor da tábua limite em 2100.&lt;/li&gt;\n                    &lt;/ul&gt;\n                &lt;/li&gt;\n                &lt;li&gt;Essa abordagem visa garantir convergência regional no longo prazo, exceto para os homens do Amapá, onde foi utilizado um valor médio entre 2022 e 2023 devido a particularidades locais.&lt;/li&gt;\n            &lt;/ul&gt;\n\n            &lt;h3&gt;Padrão Etário da Mortalidade (Taxas Específicas por Idade)&lt;/h3&gt;\n            &lt;ul&gt;\n                &lt;li&gt;As taxas de mortalidade por idade foram projetadas por meio de uma função linear, considerando a estrutura de mortalidade dos anos de 2023 e 2100.&lt;/li&gt;\n                &lt;li&gt;O ajuste das curvas de mortalidade garantiu que a esperança de vida ao nascer calculada a partir das taxas projetadas coincidisse com a &lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;e_0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;) obtida independentemente na primeira etapa.&lt;/li&gt;\n            &lt;/ul&gt;\n\n            &lt;h3&gt;Fontes e Notas Adicionais&lt;/h3&gt;\n            &lt;ul&gt;\n                &lt;li&gt;A metodologia foi definida após análise comparativa de diferentes abordagens, incluindo tábuas históricas do IBGE (1980, 1991, 2000, 2010) e estimativas anuais recentes.&lt;/li&gt;\n                &lt;li&gt;O limite inferior da curva logística foi fixado em 35 anos para homens e 40 anos para mulheres, enquanto o superior foi calibrado para minimizar o Erro Quadrático Médio (EQM).&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;p class=\"source\"&gt;\n                &lt;strong&gt;Fonte:&lt;/strong&gt; IBGE. Projeções da população: notas metodológicas 01/2024. Disponível em: &lt;a href=\"https://biblioteca.ibge.gov.br/index.php/biblioteca-catalogo?view=detalhes&id=2102111\" target=\"_blank\"&gt;https://biblioteca.ibge.gov.br/...&lt;/a&gt;\n            &lt;/p&gt;\n        &lt;/section&gt;\n        \n    &lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n`"
  },
  {
    "objectID": "metodologia.html#modelo-lee-carter",
    "href": "metodologia.html#modelo-lee-carter",
    "title": "SIGERIP",
    "section": "Modelo Lee-Carter",
    "text": "Modelo Lee-Carter\n\nhtml`\n&lt;section id=\"lee-carter\"&gt;\n    \n    &lt;h3&gt;Base do Modelo&lt;/h3&gt;\n    &lt;p&gt;O método de Lee & Carter (1992) foi aplicado para projeção da mortalidade, modelando a taxa central de mortalidade (&lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;m_{x,t}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;) como:&lt;/p&gt;\n    &lt;div class=\"formula\"&gt;\n        &lt;math display=\"block\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;mi&gt;log&lt;/mi&gt;&lt;mo&gt;&#8289;&lt;/mo&gt;&lt;/mrow&gt;&lt;mo stretchy=\"false\" form=\"prefix\"&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo stretchy=\"false\" form=\"postfix\"&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;⋅&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;ϵ&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=\"application/x-tex\"&gt;\\log(m_{x,t}) = a_x + b_x \\cdot k_t + \\epsilon_{x,t}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Onde:&lt;/p&gt;\n    &lt;ul&gt;\n        &lt;li&gt;&lt;code&gt;&lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;a_x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/code&gt;: Média histórica da mortalidade na idade &lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;annotation encoding=\"application/x-tex\"&gt;x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;.&lt;/li&gt;\n        &lt;li&gt;&lt;code&gt;&lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;b_x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/code&gt;: Sensibilidade da idade &lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;annotation encoding=\"application/x-tex\"&gt;x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; a variações no índice &lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;k_t&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;.&lt;/li&gt;\n        &lt;li&gt;&lt;code&gt;&lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;k_t&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/code&gt;: Índice temporal de mortalidade (modelado como um processo estocástico ARIMA).&lt;/li&gt;\n        &lt;li&gt;&lt;code&gt;&lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;ϵ&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;\\epsilon_{x,t}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/code&gt;: Erro aleatório.&lt;/li&gt;\n    &lt;/ul&gt;\n\n    &lt;h3&gt;Implementação&lt;/h3&gt;\n    &lt;p&gt;Utilizou-se o pacote &lt;code&gt;demography&lt;/code&gt; do R (lca ou forecast), que estima os parâmetros &lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;a_x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;, &lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;b_x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; e &lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;k_t&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; via Singular Value Decomposition (SVD) e projeta &lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;k_t&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; com ARIMA(0,1,0) (random walk com drift) como padrão.&lt;/p&gt;\n\n    &lt;h3&gt;Métricas de Avaliação de Erro&lt;/h3&gt;\n    &lt;p&gt;Para validar a acurácia das projeções, calcularam-se MSE (erro quadrático médio), MAE (erro absoluto médio) e sMAPE (erro percentual absoluto médio simétrico) para comparar valores observados e projetados.&lt;/p&gt;\n\n    &lt;h3&gt;Incerteza das Projeções&lt;/h3&gt;\n    &lt;p&gt;Os intervalos de confiança (IC 95%) foram gerados por simulação estocástica, considerando a variabilidade dos parâmetros &lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;b_x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; e &lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;k_t&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;.&lt;/p&gt;\n    &lt;p class=\"source\"&gt;&lt;strong&gt;Referência:&lt;/strong&gt; Lee & Carter (1992); pacote demography (Hyndman et al.).&lt;/p&gt;\n&lt;/section&gt;\n`"
  },
  {
    "objectID": "metodologia.html#modelo-híbrido-arima-ets-com-ponderação-dinâmica",
    "href": "metodologia.html#modelo-híbrido-arima-ets-com-ponderação-dinâmica",
    "title": "SIGERIP",
    "section": "Modelo Híbrido ARIMA-ETS com Ponderação Dinâmica",
    "text": "Modelo Híbrido ARIMA-ETS com Ponderação Dinâmica\n\nhtml`\n&lt;section id=\"hibrido\"&gt;\n\n    &lt;h3&gt;Base do Modelo&lt;/h3&gt;\n    &lt;p&gt;O método combina modelos ARIMA (para capturar autocorrelação e tendência) e ETS (para suavização exponencial com amortecimento de tendência), ponderados dinamicamente conforme seu desempenho em validação. A previsão final é dada por:&lt;/p&gt;\n    &lt;div class=\"formula\"&gt;\n        &lt;math display=\"block\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mover&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo accent=\"true\"&gt;̂&lt;/mo&gt;&lt;/mover&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;⋅&lt;/mo&gt;&lt;msub&gt;&lt;mover&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo accent=\"true\"&gt;̂&lt;/mo&gt;&lt;/mover&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;⋅&lt;/mo&gt;&lt;msub&gt;&lt;mover&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mo accent=\"true\"&gt;̂&lt;/mo&gt;&lt;/mover&gt;&lt;mrow&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=\"application/x-tex\"&gt;\\hat{y}_t = w_{ARIMA} \\cdot \\hat{y}_{ARIMA,t} + w_{ETS} \\cdot \\hat{y}_{ETS,t}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;\n    &lt;/div&gt;\n    &lt;ul&gt;\n        &lt;li&gt;&lt;strong&gt;ARIMA(p,d,q):&lt;/strong&gt; Ajustado automaticamente via minimização do AIC.&lt;/li&gt;\n        &lt;li&gt;&lt;strong&gt;ETS (Holt-Winters):&lt;/strong&gt; Modelo aditivo com tendência amortecida.&lt;/li&gt;\n        &lt;li&gt;&lt;strong&gt;Pesos (&lt;code&gt;&lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;w_{ARIMA}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/code&gt;, &lt;code&gt;&lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;w_{ETS}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/code&gt;):&lt;/strong&gt; Definidos pelo inverso do MSE na validação, priorizando o modelo mais preciso.&lt;/li&gt;\n    &lt;/ul&gt;\n\n    &lt;h3&gt;Implementação&lt;/h3&gt;\n    &lt;ul&gt;\n        &lt;li&gt;&lt;strong&gt;Treino (2000–2010):&lt;/strong&gt; Ajuste dos modelos ARIMA e ETS.&lt;/li&gt;\n        &lt;li&gt;&lt;strong&gt;Validação (2011–2014):&lt;/strong&gt; Cálculo dos pesos ótimos.&lt;/li&gt;\n        &lt;li&gt;&lt;strong&gt;Teste (2015–2019):&lt;/strong&gt; Avaliação final com métricas robustas.&lt;/li&gt;\n    &lt;/ul&gt;\n\n    &lt;h3&gt;Métricas de Avaliação&lt;/h3&gt;\n    &lt;p&gt;Foram calculados: MSE (erro quadrático médio), MAE (erro absoluto médio) e sMAPE (erro percentual absoluto simétrico).&lt;/p&gt;\n\n    &lt;h3&gt;Intervalos de Confiança&lt;/h3&gt;\n    &lt;p&gt;Os intervalos de confiança (IC 95%) foram estimados por simulação de Monte Carlo, considerando:&lt;/p&gt;\n    &lt;ul&gt;\n        &lt;li&gt;&lt;strong&gt;Variabilidade do ARIMA:&lt;/strong&gt; Distribuição dos resíduos e incerteza nos parâmetros &lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=\"false\" form=\"prefix\"&gt;(&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;q&lt;/mi&gt;&lt;mo stretchy=\"false\" form=\"postfix\"&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=\"application/x-tex\"&gt;(p,d,q)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;.&lt;/li&gt;\n        &lt;li&gt;&lt;strong&gt;Variabilidade do ETS:&lt;/strong&gt; Erro de suavização e parâmetros de tendência.&lt;/li&gt;\n        &lt;li&gt;&lt;strong&gt;Propagação de incerteza:&lt;/strong&gt; Combinação das distribuições preditivas de ambos modelos, mantendo a proporção dos pesos &lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;w_{ARIMA}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt; e &lt;math display=\"inline\" xmlns=\"http://www.w3.org/1998/Math/MathML\"&gt;&lt;semantics&gt;&lt;msub&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;annotation encoding=\"application/x-tex\"&gt;w_{ETS}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;.&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;p class=\"source\"&gt;&lt;strong&gt;Referência:&lt;/strong&gt; Baseado em metodologias de Hyndman & Athanasopoulos (2018).&lt;/p&gt;\n&lt;/section&gt;\n`"
  },
  {
    "objectID": "mort_inf.html",
    "href": "mort_inf.html",
    "title": "SIGERIP",
    "section": "",
    "text": "GráficoTabela\n\n\n\ndadosOriginais = FileAttachment(\"dados/mort_infantil.csv\").csv({typed: true})\n\nlistaDeEstados = [\n  { nome: \"Acre\", codigo: \"12\" },\n  { nome: \"Alagoas\", codigo: \"27\" },\n  { nome: \"Amapá\", codigo: 16 },\n  { nome: \"Amazonas\", codigo: \"13\" },\n  { nome: \"Bahia\", codigo: \"29\" },\n  { nome: \"Ceará\", codigo: \"23\" },\n  { nome: \"Distrito Federal\", codigo: \"53\" },\n  { nome: \"Espírito Santo\", codigo: \"32\" },\n  { nome: \"Goiás\", codigo: \"52\" },\n  { nome: \"Maranhão\", codigo: \"21\" },\n  { nome: \"Mato Grosso\", codigo: \"51\" },\n  { nome: \"Mato Grosso do Sul\", codigo: \"50\" },\n  { nome: \"Minas Gerais\", codigo: \"31\" },\n  { nome: \"Pará\", codigo: \"15\" },\n  { nome: \"Paraíba\", codigo: \"25\" },\n  { nome: \"Paraná\", codigo: \"41\" },\n  { nome: \"Pernambuco\", codigo: \"26\" },\n  { nome: \"Piauí\", codigo: \"22\" },\n  { nome: \"Rio Grande do Norte\", codigo: \"24\" },\n  { nome: \"Rio Grande do Sul\", codigo: \"43\" },\n  { nome: \"Rio de Janeiro\", codigo: \"33\" },\n  { nome: \"Rondônia\", codigo: \"11\" },\n  { nome: \"Roraima\", codigo: \"14\" },\n  { nome: \"Santa Catarina\", codigo: \"42\" },\n  { nome: \"São Paulo\", codigo: \"35\" },\n  { nome: \"Sergipe\", codigo: \"28\" },\n  { nome: \"Tocantins\", codigo: \"17\" }\n];\n\ndadosProcessados = dadosOriginais.map(d =&gt; {\n  const codigo = String(d.cod_IBGE);\n  let nivel = \"Desconhecido\";\n\n  if (d.Localidade === \"Brasil\") {\n    nivel = \"Brasil\";\n  } else if (codigo.length === 1) {\n    nivel = \"Região\";\n  } else if (codigo.length === 2) {\n    nivel = \"Estado\";\n  } else if (codigo.length === 7) {\n    nivel = \"Município\";\n  }\n\n  // Retorna o dado original com a nova coluna 'nivel'\n  return {...d, nivel: nivel};\n})\n\n// CÉLULA 3: CRIAR AS LISTAS PARA OS MENUS\n\n// Lista de nomes de Regiões\nlistaRegioes = Array.from(new Set(\n  dadosProcessados\n    .filter(d =&gt; d.nivel === \"Região\")\n    .map(d =&gt; d.Localidade)\n)).sort();\n\n// Lista de Estados (nomes e códigos)\nlistaEstados = dadosProcessados\n  .filter(d =&gt; d.nivel === \"Estado\")\n  .map(d =&gt; ({ nome: d.Localidade, codigo: String(d.cod_IBGE) }))\n  .sort((a, b) =&gt; a.nome.localeCompare(b.nome));\n\n// Lista de nomes de Estados para o menu\nlistaNomesEstados = [...new Set(listaEstados.map(e =&gt; e.nome))].sort();\n\n// CÉLULA 4 (NOVA): SELETOR DE NÍVEL\nviewof nivel = Inputs.radio([\"Brasil\", \"Região\", \"Estado\", \"Município\"], {\n  label: \"1. Escolha o Nível\",\n  value: \"Brasil\"\n})\n\n\nviewof localidadeComFiltro = {\n  if (nivel === \"Brasil\") {\n    return Inputs.text({label: \"Localidade\", value: \"Brasil\", disabled: true});\n  }\n\n  if (nivel === \"Região\") {\n    return Inputs.select(listaRegioes, {label: \"2. Escolha a Região\"});\n  }\n\n  if (nivel === \"Estado\") {\n    return Inputs.select(listaNomesEstados, {label: \"2. Escolha o Estado\"});\n  }\n\n  if (nivel === \"Município\") {\n    const container = html`\n      &lt;div style=\"font-family: var(--sans-serif, system-ui);\"&gt;\n        &lt;div style=\"margin-bottom: 15px;\"&gt;\n          &lt;label style=\"font-weight: 500; display: block; margin-bottom: 5px;\"&gt;\n            2. Escolha o Estado:\n          &lt;/label&gt;\n          &lt;select id=\"seletorEstado\" style=\"\n            width: 100%; \n            padding: 8px; \n            border: 1px solid #ccc; \n            border-radius: 4px;\n            background: white;\n          \"&gt;\n            ${listaDeEstados.map(e =&gt; \n              `&lt;option value=\"${e.codigo}\"&gt;${e.nome}&lt;/option&gt;`\n            ).join('')}\n          &lt;/select&gt;\n        &lt;/div&gt;\n\n        &lt;div&gt;\n          &lt;label style=\"font-weight: 500; display: block; margin-bottom: 5px;\"&gt;\n            3. Busque o Município:\n          &lt;/label&gt;\n          \n          &lt;div style=\"position: relative;\"&gt;\n            &lt;input \n              type=\"text\" \n              id=\"inputBusca\" \n              placeholder=\"Digite para buscar município...\" \n              autocomplete=\"off\"\n              style=\"\n                width: 100%; \n                padding: 8px; \n                border: 1px solid #ccc; \n                border-radius: 4px;\n                box-sizing: border-box;\n              \"\n            &gt;\n            \n            &lt;div id=\"dropdown\" style=\"\n              position: absolute;\n              top: 100%;\n              left: 0;\n              right: 0;\n              background: white;\n              border: 1px solid #ccc;\n              border-top: none;\n              border-radius: 0 0 4px 4px;\n              max-height: 350px;\n              overflow-y: auto;\n              display: none;\n              z-index: 1000;\n              box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n            \"&gt;&lt;/div&gt;\n          &lt;/div&gt;\n          \n          &lt;div id=\"municipioSelecionado\" style=\"\n            margin-top: 8px; \n            font-size: 0.9em; \n            color: #666;\n            font-style: italic;\n          \"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    `;\n\n    const seletorEstado = container.querySelector('#seletorEstado');\n    const inputBusca = container.querySelector('#inputBusca');\n    const dropdown = container.querySelector('#dropdown');\n    const municipioSelecionado = container.querySelector('#municipioSelecionado');\n\n    let municipiosDisponiveis = [];\n    let valorSelecionado = '';\n\n    // Função para buscar municípios do estado\n    function carregarMunicipios() {\n      const codigoEstado = seletorEstado.value;\n      \n      // Remove duplicatas usando Set\n      const municipiosUnicos = [...new Set(\n        dadosProcessados\n          .filter(d =&gt; \n            d.nivel === \"Município\" && \n            String(d.cod_IBGE).startsWith(codigoEstado)\n          )\n          .map(d =&gt; d.Localidade)\n      )].sort();\n      \n      municipiosDisponiveis = municipiosUnicos;\n      \n      // Pré-seleciona o primeiro município\n      if (municipiosDisponiveis.length &gt; 0) {\n        valorSelecionado = municipiosDisponiveis[0];\n        inputBusca.value = valorSelecionado;\n        municipioSelecionado.textContent = `Município selecionado: ${valorSelecionado}`;\n        \n        // Dispara evento inicial\n        container.value = valorSelecionado;\n        container.dispatchEvent(new CustomEvent(\"input\"));\n      } else {\n        inputBusca.value = '';\n        valorSelecionado = '';\n        municipioSelecionado.textContent = '';\n      }\n      \n      dropdown.style.display = 'none';\n      inputBusca.placeholder = `Digite para buscar entre ${municipiosDisponiveis.length} municípios...`;\n    }\n\n    // Função para filtrar e mostrar opções\n    function mostrarOpcoes(filtro = '') {\n      const opcoesFiltradas = municipiosDisponiveis.filter(municipio =&gt;\n        municipio.toLowerCase().includes(filtro.toLowerCase())\n      ).slice(0, 100); // Aumenta para 100 resultados\n\n      if (opcoesFiltradas.length === 0) {\n        dropdown.innerHTML = '&lt;div style=\"padding: 12px; color: #999; text-align: center;\"&gt;Nenhum município encontrado&lt;/div&gt;';\n      } else {\n        dropdown.innerHTML = opcoesFiltradas\n          .map(municipio =&gt; `\n            &lt;div class=\"opcao-municipio\" data-value=\"${municipio}\" style=\"\n              padding: 10px 12px;\n              cursor: pointer;\n              border-bottom: 1px solid #f0f0f0;\n              transition: background-color 0.2s ease;\n              font-size: 14px;\n            \"&gt;${municipio}&lt;/div&gt;\n          `).join('');\n        \n        // Adiciona eventos de clique\n        dropdown.querySelectorAll('.opcao-municipio').forEach(opcao =&gt; {\n          opcao.addEventListener('click', () =&gt; {\n            valorSelecionado = opcao.dataset.value;\n            inputBusca.value = valorSelecionado;\n            municipioSelecionado.textContent = `Município selecionado: ${valorSelecionado}`;\n            dropdown.style.display = 'none';\n            \n            // Dispara evento de mudança\n            container.value = valorSelecionado;\n            container.dispatchEvent(new CustomEvent(\"input\"));\n          });\n\n          // Hover effect\n          opcao.addEventListener('mouseenter', () =&gt; {\n            opcao.style.backgroundColor = '#f8f9fa';\n          });\n          opcao.addEventListener('mouseleave', () =&gt; {\n            opcao.style.backgroundColor = 'white';\n          });\n        });\n      }\n\n      dropdown.style.display = opcoesFiltradas.length &gt; 0 || filtro ? 'block' : 'none';\n    }\n\n    // Event listeners\n    seletorEstado.addEventListener('change', carregarMunicipios);\n\n    inputBusca.addEventListener('input', (e) =&gt; {\n      const filtro = e.target.value;\n      if (filtro.length &gt; 0) {\n        mostrarOpcoes(filtro);\n      } else {\n        dropdown.style.display = 'none';\n      }\n    });\n\n    inputBusca.addEventListener('focus', () =&gt; {\n      if (municipiosDisponiveis.length &gt; 0) {\n        mostrarOpcoes(inputBusca.value);\n      }\n    });\n\n    // Fecha dropdown ao clicar fora\n    document.addEventListener('click', (e) =&gt; {\n      if (!container.contains(e.target)) {\n        dropdown.style.display = 'none';\n      }\n    });\n\n    // Navegação por teclado\n    inputBusca.addEventListener('keydown', (e) =&gt; {\n      const opcoes = dropdown.querySelectorAll('.opcao-municipio');\n      const ativas = Array.from(opcoes);\n      const currentIndex = ativas.findIndex(opcao =&gt; \n        opcao.style.backgroundColor === 'rgb(224, 242, 254)'\n      );\n\n      if (e.key === 'ArrowDown') {\n        e.preventDefault();\n        const nextIndex = Math.min(currentIndex + 1, ativas.length - 1);\n        ativas.forEach((opcao, i) =&gt; {\n          opcao.style.backgroundColor = i === nextIndex ? '#e0f2fe' : 'white';\n        });\n      } else if (e.key === 'ArrowUp') {\n        e.preventDefault();\n        const prevIndex = Math.max(currentIndex - 1, 0);\n        ativas.forEach((opcao, i) =&gt; {\n          opcao.style.backgroundColor = i === prevIndex ? '#e0f2fe' : 'white';\n        });\n      } else if (e.key === 'Enter') {\n        e.preventDefault();\n        const opcaoSelecionada = ativas[currentIndex];\n        if (opcaoSelecionada) {\n          opcaoSelecionada.click();\n        }\n      } else if (e.key === 'Escape') {\n        dropdown.style.display = 'none';\n      }\n    });\n\n    // Inicializa\n    carregarMunicipios();\n    \n    return container;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{\n  const ptBRLocaleDefinition = {\n    decimal: \",\",\n    thousands: \"\",\n    grouping: [3],\n    currency: [\"R$\", \"\"]\n  };\n  d3.formatDefaultLocale(ptBRLocaleDefinition);\n  \n  const width = 760;\n  const height = 500;\n  const margin = { top: 60, right: 30, bottom: 50, left: 50 };\n  const cores = {\n    Taxa: \"steelblue\",\n    masculino: \"darkorange\",\n    feminino: \"green\"\n  };\n\n  const svg = d3.create(\"svg\")\n    .attr(\"viewBox\", [0, 0, width, height])\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic; font: 10px sans-serif;\")\n    .style(\"-webkit-tap-highlight-color\", \"transparent\")\n    .style(\"overflow\", \"visible\")\n\n  // Legenda\n  const legend = svg.append(\"g\")\n    .attr(\"transform\", `translate(${width/2 - 120}, 50)`);\n\n  // Processamento dos dados para todo o Brasil\n  const filteredData = dadosOriginais\n    .filter(d =&gt; d.Localidade === localidadeComFiltro)\n    .map(d =&gt; ({\n      ...d,\n      Ano: +d.Ano,\n      Taxa: +d.Taxa\n    }))\n    .sort((a, b) =&gt; a.Ano - b.Ano);\n\n  // Escalas únicas para todo o gráfico\n  const xScale = d3.scaleLinear()\n    .domain(d3.extent(filteredData, d =&gt; d.Ano))\n    .range([margin.left, width - margin.right]);\n\n  const yValues = filteredData.flatMap(d =&gt; d.Taxa);\n  const yScale = d3.scaleLinear()\n    .domain([d3.min(yValues), d3.max(yValues)]).nice()\n    .range([height - margin.bottom, margin.top]);\n\n  // Eixos\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\n    .call(d3.axisBottom(xScale).ticks(10))\n    .append(\"text\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", 35)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", \"black\")\n    .text(\"Ano\");\n\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, 0)`)\n    .call(d3.axisLeft(yScale).ticks(8))\n    .append(\"text\")\n    .attr(\"transform\", \"rotate(-90)\")\n    .attr(\"y\", -40)\n    .attr(\"x\", -height / 2)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", \"black\")\n    .text(\"Taxa\");\n\n  // Função para gerar as linhas\n  const gerarLinha = (variavel, cor) =&gt; {\n    const linha = d3.line()\n      .x(d =&gt; xScale(d.Ano))\n      .y(d =&gt; yScale(d[variavel]))\n      //.curve(d3.curveMonotoneX); //suaviza a linha\n\n    svg.append(\"path\")\n      .datum(filteredData)\n      .attr(\"d\", linha)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", cor)\n      .attr(\"stroke-width\", 2);\n  };\n\n  // Adiciona as três linhas principais\n  gerarLinha(\"Taxa\", cores.Taxa);\n\n  return svg.node();\n}\n\n\n\n\n\n\n\n\n\nhtml`&lt;h2&gt;Tábua de mortalidade utilizada&lt;/h2&gt;`\n\n\n\n\n\n\n\nInputs.table(dadosOriginais)\n\n\n\n\n\n\n\nhtml`\n&lt;body&gt;\n    &lt;br&gt;\n    &lt;p&gt;Baixar \n    &lt;a href=\"dados/output.csv\" download&gt;\n        dados.\n    &lt;/a&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n`"
  },
  {
    "objectID": "mort_inf.html#taxa-de-mortalidade-infantil",
    "href": "mort_inf.html#taxa-de-mortalidade-infantil",
    "title": "SIGERIP",
    "section": "",
    "text": "GráficoTabela\n\n\n\ndadosOriginais = FileAttachment(\"dados/mort_infantil.csv\").csv({typed: true})\n\nlistaDeEstados = [\n  { nome: \"Acre\", codigo: \"12\" },\n  { nome: \"Alagoas\", codigo: \"27\" },\n  { nome: \"Amapá\", codigo: 16 },\n  { nome: \"Amazonas\", codigo: \"13\" },\n  { nome: \"Bahia\", codigo: \"29\" },\n  { nome: \"Ceará\", codigo: \"23\" },\n  { nome: \"Distrito Federal\", codigo: \"53\" },\n  { nome: \"Espírito Santo\", codigo: \"32\" },\n  { nome: \"Goiás\", codigo: \"52\" },\n  { nome: \"Maranhão\", codigo: \"21\" },\n  { nome: \"Mato Grosso\", codigo: \"51\" },\n  { nome: \"Mato Grosso do Sul\", codigo: \"50\" },\n  { nome: \"Minas Gerais\", codigo: \"31\" },\n  { nome: \"Pará\", codigo: \"15\" },\n  { nome: \"Paraíba\", codigo: \"25\" },\n  { nome: \"Paraná\", codigo: \"41\" },\n  { nome: \"Pernambuco\", codigo: \"26\" },\n  { nome: \"Piauí\", codigo: \"22\" },\n  { nome: \"Rio Grande do Norte\", codigo: \"24\" },\n  { nome: \"Rio Grande do Sul\", codigo: \"43\" },\n  { nome: \"Rio de Janeiro\", codigo: \"33\" },\n  { nome: \"Rondônia\", codigo: \"11\" },\n  { nome: \"Roraima\", codigo: \"14\" },\n  { nome: \"Santa Catarina\", codigo: \"42\" },\n  { nome: \"São Paulo\", codigo: \"35\" },\n  { nome: \"Sergipe\", codigo: \"28\" },\n  { nome: \"Tocantins\", codigo: \"17\" }\n];\n\ndadosProcessados = dadosOriginais.map(d =&gt; {\n  const codigo = String(d.cod_IBGE);\n  let nivel = \"Desconhecido\";\n\n  if (d.Localidade === \"Brasil\") {\n    nivel = \"Brasil\";\n  } else if (codigo.length === 1) {\n    nivel = \"Região\";\n  } else if (codigo.length === 2) {\n    nivel = \"Estado\";\n  } else if (codigo.length === 7) {\n    nivel = \"Município\";\n  }\n\n  // Retorna o dado original com a nova coluna 'nivel'\n  return {...d, nivel: nivel};\n})\n\n// CÉLULA 3: CRIAR AS LISTAS PARA OS MENUS\n\n// Lista de nomes de Regiões\nlistaRegioes = Array.from(new Set(\n  dadosProcessados\n    .filter(d =&gt; d.nivel === \"Região\")\n    .map(d =&gt; d.Localidade)\n)).sort();\n\n// Lista de Estados (nomes e códigos)\nlistaEstados = dadosProcessados\n  .filter(d =&gt; d.nivel === \"Estado\")\n  .map(d =&gt; ({ nome: d.Localidade, codigo: String(d.cod_IBGE) }))\n  .sort((a, b) =&gt; a.nome.localeCompare(b.nome));\n\n// Lista de nomes de Estados para o menu\nlistaNomesEstados = [...new Set(listaEstados.map(e =&gt; e.nome))].sort();\n\n// CÉLULA 4 (NOVA): SELETOR DE NÍVEL\nviewof nivel = Inputs.radio([\"Brasil\", \"Região\", \"Estado\", \"Município\"], {\n  label: \"1. Escolha o Nível\",\n  value: \"Brasil\"\n})\n\n\nviewof localidadeComFiltro = {\n  if (nivel === \"Brasil\") {\n    return Inputs.text({label: \"Localidade\", value: \"Brasil\", disabled: true});\n  }\n\n  if (nivel === \"Região\") {\n    return Inputs.select(listaRegioes, {label: \"2. Escolha a Região\"});\n  }\n\n  if (nivel === \"Estado\") {\n    return Inputs.select(listaNomesEstados, {label: \"2. Escolha o Estado\"});\n  }\n\n  if (nivel === \"Município\") {\n    const container = html`\n      &lt;div style=\"font-family: var(--sans-serif, system-ui);\"&gt;\n        &lt;div style=\"margin-bottom: 15px;\"&gt;\n          &lt;label style=\"font-weight: 500; display: block; margin-bottom: 5px;\"&gt;\n            2. Escolha o Estado:\n          &lt;/label&gt;\n          &lt;select id=\"seletorEstado\" style=\"\n            width: 100%; \n            padding: 8px; \n            border: 1px solid #ccc; \n            border-radius: 4px;\n            background: white;\n          \"&gt;\n            ${listaDeEstados.map(e =&gt; \n              `&lt;option value=\"${e.codigo}\"&gt;${e.nome}&lt;/option&gt;`\n            ).join('')}\n          &lt;/select&gt;\n        &lt;/div&gt;\n\n        &lt;div&gt;\n          &lt;label style=\"font-weight: 500; display: block; margin-bottom: 5px;\"&gt;\n            3. Busque o Município:\n          &lt;/label&gt;\n          \n          &lt;div style=\"position: relative;\"&gt;\n            &lt;input \n              type=\"text\" \n              id=\"inputBusca\" \n              placeholder=\"Digite para buscar município...\" \n              autocomplete=\"off\"\n              style=\"\n                width: 100%; \n                padding: 8px; \n                border: 1px solid #ccc; \n                border-radius: 4px;\n                box-sizing: border-box;\n              \"\n            &gt;\n            \n            &lt;div id=\"dropdown\" style=\"\n              position: absolute;\n              top: 100%;\n              left: 0;\n              right: 0;\n              background: white;\n              border: 1px solid #ccc;\n              border-top: none;\n              border-radius: 0 0 4px 4px;\n              max-height: 350px;\n              overflow-y: auto;\n              display: none;\n              z-index: 1000;\n              box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n            \"&gt;&lt;/div&gt;\n          &lt;/div&gt;\n          \n          &lt;div id=\"municipioSelecionado\" style=\"\n            margin-top: 8px; \n            font-size: 0.9em; \n            color: #666;\n            font-style: italic;\n          \"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    `;\n\n    const seletorEstado = container.querySelector('#seletorEstado');\n    const inputBusca = container.querySelector('#inputBusca');\n    const dropdown = container.querySelector('#dropdown');\n    const municipioSelecionado = container.querySelector('#municipioSelecionado');\n\n    let municipiosDisponiveis = [];\n    let valorSelecionado = '';\n\n    // Função para buscar municípios do estado\n    function carregarMunicipios() {\n      const codigoEstado = seletorEstado.value;\n      \n      // Remove duplicatas usando Set\n      const municipiosUnicos = [...new Set(\n        dadosProcessados\n          .filter(d =&gt; \n            d.nivel === \"Município\" && \n            String(d.cod_IBGE).startsWith(codigoEstado)\n          )\n          .map(d =&gt; d.Localidade)\n      )].sort();\n      \n      municipiosDisponiveis = municipiosUnicos;\n      \n      // Pré-seleciona o primeiro município\n      if (municipiosDisponiveis.length &gt; 0) {\n        valorSelecionado = municipiosDisponiveis[0];\n        inputBusca.value = valorSelecionado;\n        municipioSelecionado.textContent = `Município selecionado: ${valorSelecionado}`;\n        \n        // Dispara evento inicial\n        container.value = valorSelecionado;\n        container.dispatchEvent(new CustomEvent(\"input\"));\n      } else {\n        inputBusca.value = '';\n        valorSelecionado = '';\n        municipioSelecionado.textContent = '';\n      }\n      \n      dropdown.style.display = 'none';\n      inputBusca.placeholder = `Digite para buscar entre ${municipiosDisponiveis.length} municípios...`;\n    }\n\n    // Função para filtrar e mostrar opções\n    function mostrarOpcoes(filtro = '') {\n      const opcoesFiltradas = municipiosDisponiveis.filter(municipio =&gt;\n        municipio.toLowerCase().includes(filtro.toLowerCase())\n      ).slice(0, 100); // Aumenta para 100 resultados\n\n      if (opcoesFiltradas.length === 0) {\n        dropdown.innerHTML = '&lt;div style=\"padding: 12px; color: #999; text-align: center;\"&gt;Nenhum município encontrado&lt;/div&gt;';\n      } else {\n        dropdown.innerHTML = opcoesFiltradas\n          .map(municipio =&gt; `\n            &lt;div class=\"opcao-municipio\" data-value=\"${municipio}\" style=\"\n              padding: 10px 12px;\n              cursor: pointer;\n              border-bottom: 1px solid #f0f0f0;\n              transition: background-color 0.2s ease;\n              font-size: 14px;\n            \"&gt;${municipio}&lt;/div&gt;\n          `).join('');\n        \n        // Adiciona eventos de clique\n        dropdown.querySelectorAll('.opcao-municipio').forEach(opcao =&gt; {\n          opcao.addEventListener('click', () =&gt; {\n            valorSelecionado = opcao.dataset.value;\n            inputBusca.value = valorSelecionado;\n            municipioSelecionado.textContent = `Município selecionado: ${valorSelecionado}`;\n            dropdown.style.display = 'none';\n            \n            // Dispara evento de mudança\n            container.value = valorSelecionado;\n            container.dispatchEvent(new CustomEvent(\"input\"));\n          });\n\n          // Hover effect\n          opcao.addEventListener('mouseenter', () =&gt; {\n            opcao.style.backgroundColor = '#f8f9fa';\n          });\n          opcao.addEventListener('mouseleave', () =&gt; {\n            opcao.style.backgroundColor = 'white';\n          });\n        });\n      }\n\n      dropdown.style.display = opcoesFiltradas.length &gt; 0 || filtro ? 'block' : 'none';\n    }\n\n    // Event listeners\n    seletorEstado.addEventListener('change', carregarMunicipios);\n\n    inputBusca.addEventListener('input', (e) =&gt; {\n      const filtro = e.target.value;\n      if (filtro.length &gt; 0) {\n        mostrarOpcoes(filtro);\n      } else {\n        dropdown.style.display = 'none';\n      }\n    });\n\n    inputBusca.addEventListener('focus', () =&gt; {\n      if (municipiosDisponiveis.length &gt; 0) {\n        mostrarOpcoes(inputBusca.value);\n      }\n    });\n\n    // Fecha dropdown ao clicar fora\n    document.addEventListener('click', (e) =&gt; {\n      if (!container.contains(e.target)) {\n        dropdown.style.display = 'none';\n      }\n    });\n\n    // Navegação por teclado\n    inputBusca.addEventListener('keydown', (e) =&gt; {\n      const opcoes = dropdown.querySelectorAll('.opcao-municipio');\n      const ativas = Array.from(opcoes);\n      const currentIndex = ativas.findIndex(opcao =&gt; \n        opcao.style.backgroundColor === 'rgb(224, 242, 254)'\n      );\n\n      if (e.key === 'ArrowDown') {\n        e.preventDefault();\n        const nextIndex = Math.min(currentIndex + 1, ativas.length - 1);\n        ativas.forEach((opcao, i) =&gt; {\n          opcao.style.backgroundColor = i === nextIndex ? '#e0f2fe' : 'white';\n        });\n      } else if (e.key === 'ArrowUp') {\n        e.preventDefault();\n        const prevIndex = Math.max(currentIndex - 1, 0);\n        ativas.forEach((opcao, i) =&gt; {\n          opcao.style.backgroundColor = i === prevIndex ? '#e0f2fe' : 'white';\n        });\n      } else if (e.key === 'Enter') {\n        e.preventDefault();\n        const opcaoSelecionada = ativas[currentIndex];\n        if (opcaoSelecionada) {\n          opcaoSelecionada.click();\n        }\n      } else if (e.key === 'Escape') {\n        dropdown.style.display = 'none';\n      }\n    });\n\n    // Inicializa\n    carregarMunicipios();\n    \n    return container;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{\n  const ptBRLocaleDefinition = {\n    decimal: \",\",\n    thousands: \"\",\n    grouping: [3],\n    currency: [\"R$\", \"\"]\n  };\n  d3.formatDefaultLocale(ptBRLocaleDefinition);\n  \n  const width = 760;\n  const height = 500;\n  const margin = { top: 60, right: 30, bottom: 50, left: 50 };\n  const cores = {\n    Taxa: \"steelblue\",\n    masculino: \"darkorange\",\n    feminino: \"green\"\n  };\n\n  const svg = d3.create(\"svg\")\n    .attr(\"viewBox\", [0, 0, width, height])\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic; font: 10px sans-serif;\")\n    .style(\"-webkit-tap-highlight-color\", \"transparent\")\n    .style(\"overflow\", \"visible\")\n\n  // Legenda\n  const legend = svg.append(\"g\")\n    .attr(\"transform\", `translate(${width/2 - 120}, 50)`);\n\n  // Processamento dos dados para todo o Brasil\n  const filteredData = dadosOriginais\n    .filter(d =&gt; d.Localidade === localidadeComFiltro)\n    .map(d =&gt; ({\n      ...d,\n      Ano: +d.Ano,\n      Taxa: +d.Taxa\n    }))\n    .sort((a, b) =&gt; a.Ano - b.Ano);\n\n  // Escalas únicas para todo o gráfico\n  const xScale = d3.scaleLinear()\n    .domain(d3.extent(filteredData, d =&gt; d.Ano))\n    .range([margin.left, width - margin.right]);\n\n  const yValues = filteredData.flatMap(d =&gt; d.Taxa);\n  const yScale = d3.scaleLinear()\n    .domain([d3.min(yValues), d3.max(yValues)]).nice()\n    .range([height - margin.bottom, margin.top]);\n\n  // Eixos\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\n    .call(d3.axisBottom(xScale).ticks(10))\n    .append(\"text\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", 35)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", \"black\")\n    .text(\"Ano\");\n\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, 0)`)\n    .call(d3.axisLeft(yScale).ticks(8))\n    .append(\"text\")\n    .attr(\"transform\", \"rotate(-90)\")\n    .attr(\"y\", -40)\n    .attr(\"x\", -height / 2)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", \"black\")\n    .text(\"Taxa\");\n\n  // Função para gerar as linhas\n  const gerarLinha = (variavel, cor) =&gt; {\n    const linha = d3.line()\n      .x(d =&gt; xScale(d.Ano))\n      .y(d =&gt; yScale(d[variavel]))\n      //.curve(d3.curveMonotoneX); //suaviza a linha\n\n    svg.append(\"path\")\n      .datum(filteredData)\n      .attr(\"d\", linha)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", cor)\n      .attr(\"stroke-width\", 2);\n  };\n\n  // Adiciona as três linhas principais\n  gerarLinha(\"Taxa\", cores.Taxa);\n\n  return svg.node();\n}\n\n\n\n\n\n\n\n\n\nhtml`&lt;h2&gt;Tábua de mortalidade utilizada&lt;/h2&gt;`\n\n\n\n\n\n\n\nInputs.table(dadosOriginais)\n\n\n\n\n\n\n\nhtml`\n&lt;body&gt;\n    &lt;br&gt;\n    &lt;p&gt;Baixar \n    &lt;a href=\"dados/output.csv\" download&gt;\n        dados.\n    &lt;/a&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n`"
  },
  {
    "objectID": "previsao_mortalidade.html",
    "href": "previsao_mortalidade.html",
    "title": "SIGERIP",
    "section": "",
    "text": "GráficoTabela\n\n\n\nprev_comb = await FileAttachment('dados/dados1/previsoes_combinad.csv').csv()\nprev_lm = await FileAttachment('dados/dados2/previoes_lm.csv').csv()\nprev_lc = await FileAttachment('dados/dados2/previoes_lc.csv').csv()\n\nmodelos = [\"ARIMA+ETS\", \"Lee-Carter\", \"Lee-Miller\"]\nregioes = [\"Brasil\", \"Centro-Oeste\", \"Nordeste\", \"Norte\", \"Sudeste\", \"Sul\", \"Acre\", \"Alagoas\", \"Amapá\", \"Amazonas\", \"Bahia\", \"Ceará\", \"Distrito Federal\", \"Espírito Santo\", \"Goiás\", \"Maranhão\", \"Mato Grosso\", \"Mato Grosso do Sul\", \"Minas Gerais\", \"Pará\", \"Paraíba\", \"Paraná\", \"Pernambuco\", \"Piauí\", \"Rio de Janeiro\", \"Rio Grande do Norte\", \"Rio Grande do Sul\", \"Rondônia\", \"Roraima\", \"Santa Catarina\", \"São Paulo\", \"Sergipe\", \"Tocantins\"]\n\n// Definição do componente reativo\n// Define o componente de seleção\nviewof seletores2 = {\n  const form = html`&lt;form style=\"\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    gap: 30px;\n    justify-content: center;\n  \"&gt;\n    &lt;!-- Select para Região --&gt;\n    &lt;div style=\"min-width: 200px; max-width: 300px;\"&gt;\n      &lt;label style=\"display: block; text-align: center; margin-bottom: 8px;\"&gt;Local:&lt;/label&gt;\n      &lt;select name=\"regiao\" style=\"\n        display: block;\n        margin: 0 auto;\n        padding: 6px 12px;\n        border: 1px solid #ccc;\n        border-radius: 20px;\n        font-size: 16px;\n        text-align: center;\n        width: fit-content;\n        min-width: 180px;\n        background-color: #f8f9fa;\n      \"&gt;\n        ${regioes.map(r =&gt; `&lt;option value=\"${r}\"&gt;${r}&lt;/option&gt;`).join('')}\n      &lt;/select&gt;\n    &lt;/div&gt;\n    \n    &lt;!-- Checkboxes para Modelos --&gt;\n    &lt;div style=\"min-width: 200px; max-width: 300px;\"&gt;\n      &lt;label style=\"display: block; text-align: center; margin-bottom: 8px;\"&gt;Modelo:&lt;/label&gt;\n      &lt;select name=\"modelo\" style=\"\n        display: block;\n        margin: 0 auto;\n        padding: 6px 12px;\n        border: 1px solid #ccc;\n        border-radius: 20px;\n        font-size: 16px;\n        text-align: center;\n        width: fit-content;\n        min-width: 180px;\n        background-color: #f8f9fa;\n      \"&gt;\n        ${modelos.map(r =&gt; `&lt;option value=\"${r}\"&gt;${r}&lt;/option&gt;`).join('')}\n      &lt;/select&gt;\n    &lt;/div&gt;\n    \n    &lt;!-- Radio para Sexo --&gt;\n    &lt;div style=\"min-width: 200px; max-width: 300px;\"&gt;\n      &lt;label style=\"display: block; text-align: center; margin-bottom: 8px;\"&gt;Sexo:&lt;/label&gt;\n      &lt;div style=\"\n        display: flex;\n        gap: 15px;\n        justify-content: center;\n      \"&gt;\n        &lt;label style=\"display: flex; align-items: center; gap: 5px;\"&gt;\n          &lt;input type=\"radio\" name=\"sexo\" value=\"Ambos\" checked&gt;\n          Ambos\n        &lt;/label&gt;\n        &lt;label style=\"display: flex; align-items: center; gap: 5px;\"&gt;\n          &lt;input type=\"radio\" name=\"sexo\" value=\"Homens\"&gt;\n          Homens\n        &lt;/label&gt;\n        &lt;label style=\"display: flex; align-items: center; gap: 5px;\"&gt;\n          &lt;input type=\"radio\" name=\"sexo\" value=\"Mulheres\"&gt;\n          Mulheres\n        &lt;/label&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/form&gt;`;\n  \n  // Definir valor inicial\n  form.value = {\n    regiao: regioes[5],\n    modelo: 'ARIMA+ETS',\n    sexo: 'Ambos'\n  };\n  \n  // Atualizar valor ao modificar select\n  form.querySelector('select[name=\"regiao\"]').addEventListener('change', e =&gt; {\n    form.value = {\n      ...form.value,\n      regiao: e.target.value\n    };\n    form.dispatchEvent(new Event('input'));\n  });\n  \n  // Atualizar valor ao modificar checkboxes\n  form.querySelector('select[name=\"modelo\"]').addEventListener('change', e =&gt; {\n    form.value = {\n      ...form.value,\n      modelo: e.target.value\n    };\n    form.dispatchEvent(new Event('input'));\n  });\n  \n  // Atualizar valor ao modificar radios\n  const radios = form.querySelectorAll('input[name=\"sexo\"]');\n  for (const radio of radios) {\n    radio.addEventListener('change', () =&gt; {\n      form.value = {\n        ...form.value,\n        sexo: radio.value\n      };\n      form.dispatchEvent(new Event('input'));\n    });\n  }\n  \n  return form;\n}\n\n// Extrair valores individuais em células separadas\nregiao2 = seletores2.regiao\nmodelo2 = seletores2.modelo\nsexo = seletores2.sexo\n\n\n\ndata_filter1 = prev_comb.filter(d =&gt; d.Local === regiao2 && d.Sexo === sexo).map(d =&gt; ({\n  ano: +d.Ano,\n  faixa: d.faixa_etaria,\n  prev: Math.log(d.nMx_previsão)\n}))\n\ndata_filter2 = prev_lm.filter(d =&gt; d.regiao === regiao2 && d.taxa === sexo).map(d =&gt; ({\n  ano: +d.ano,\n  faixa: d.Faixa_Etaria,\n  prev: Math.log(d.previsto)\n}))\n\ndata_filter3 = prev_lc.filter(d =&gt; d.regiao === regiao2 && d.taxa === sexo).map(d =&gt; ({\n  ano: +d.ano,\n  faixa: d.Faixa_Etaria,\n  prev: Math.log(d.previsto)\n}))\n\n// Função principal para criar gráficos\nfunction createChart(data, title) {\n\n  const ptBRLocaleDefinition = {\n    decimal: \",\",\n    thousands: \"\",\n    grouping: [3],\n    currency: [\"R$\", \"\"]\n  };\n  d3.formatDefaultLocale(ptBRLocaleDefinition);\n\n  const width = 760;\n  const height = 500;\n  const margin = {top: 30, right: 20, bottom: 40, left: 50};\n  \n  const svg = d3.create(\"svg\")\n    .attr(\"viewBox\", [0, 0, width, height])\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic; font: 10px sans-serif;\")\n      .style(\"-webkit-tap-highlight-color\", \"transparent\")\n      .style(\"overflow\", \"visible\");\n\n  // Escalas\n  const x = d3.scalePoint()\n    .domain([...new Set(data.map(d =&gt; d.faixa))])\n    .range([margin.left, width - margin.right])\n    .padding(0.5);\n\n  const y = d3.scaleLinear()\n    .domain(d3.extent(data, d =&gt; d.prev)).nice()\n    .range([height - margin.bottom, margin.top]);\n\n  // Eixos\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n    .call(d3.axisBottom(x))\n    .selectAll(\"text\")\n    .style(\"text-anchor\", \"end\")\n    .attr(\"dx\", \"-.8em\")\n    .attr(\"dy\", \".15em\")\n    .attr(\"transform\", \"rotate(-45)\");\n\n  svg.append(\"text\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", height) // Posição abaixo do eixo\n    .style(\"font-size\", \"14px\")\n    .style(\"fill\", \"currentColor\")\n    .text(\"Faixa Etária\");\n    \n\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},0)`)\n    .call(d3.axisLeft(y).ticks(height / 40))\n    .call(g =&gt; g.select(\".domain\").remove())\n    .style(\"font-size\", \"12px\")\n    .call(g =&gt; g.selectAll(\".tick line\").clone()\n      .attr(\"x2\", width - margin.left - margin.right)\n      .attr(\"stroke-opacity\", 0.1))\n    .call(g =&gt; g.append(\"text\")\n      .attr(\"x\", -margin.left)\n      .attr(\"y\", 15)\n      .attr(\"fill\", \"currentColor\")\n      .attr(\"text-anchor\", \"start\")\n      .style(\"font-size\", \"18px\")\n      .text(\"log(Mx)\"));\n  \n\n  // Gradiente e cores\n  const colorScale = d3.scaleSequential(d3.interpolateViridis)\n    .domain([2024, 2070]);\n\n  const defs = svg.append(\"defs\");\n  const nestedData = d3.groups(data, d =&gt; d.ano);\n\n  nestedData.forEach(([year, values]) =&gt; {\n    const gradientId = `gradient-${title}-${year}`;\n    \n    const gradient = defs.append(\"linearGradient\")\n      .attr(\"id\", gradientId)\n      .attr(\"gradientUnits\", \"userSpaceOnUse\")\n      .attr(\"x1\", margin.left)\n      .attr(\"y1\", 0)\n      .attr(\"x2\", width - margin.right)\n      .attr(\"y2\", 0);\n\n    gradient.append(\"stop\")\n      .attr(\"offset\", \"0%\")\n      .attr(\"stop-color\", colorScale(year));\n\n    gradient.append(\"stop\")\n      .attr(\"offset\", \"100%\")\n      .attr(\"stop-color\", colorScale(Math.min(year + 10, 2070)));\n  });\n\n  // Linhas\n  const line = d3.line()\n    .x(d =&gt; x(d.faixa))\n    .y(d =&gt; y(d.prev));\n\n  nestedData.forEach(([year, values]) =&gt; {\n    svg.append(\"path\")\n      .datum(values)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", `url(#gradient-${title}-${year})`)\n      .attr(\"stroke-width\", 2.5)\n      .attr(\"d\", line);\n  });\n\n  // Legenda\n  const legendWidth = 200;\n  const legendHeight = 20;\n  const legendX = width - margin.right - legendWidth;\n  const legendY = margin.top;\n\n  const legendGradient = defs.append(\"linearGradient\")\n    .attr(\"id\", `legend-${title}`)\n    .attr(\"x1\", \"0%\")\n    .attr(\"y1\", \"0%\")\n    .attr(\"x2\", \"100%\")\n    .attr(\"y2\", \"0%\");\n\n  const years = [2024, 2035, 2045, 2055, 2070];\n  years.forEach((year, i) =&gt; {\n    legendGradient.append(\"stop\")\n      .attr(\"offset\", `${i * 100 / (years.length - 1)}%`)\n      .attr(\"stop-color\", colorScale(year));\n  });\n\n  svg.append(\"rect\")\n    .attr(\"x\", legendX)\n    .attr(\"y\", legendY)\n    .attr(\"width\", legendWidth)\n    .attr(\"height\", legendHeight)\n    .style(\"fill\", `url(#legend-${title})`);\n\n  svg.append(\"text\")\n    .attr(\"x\", legendX)\n    .attr(\"y\", legendY - 5)\n    .attr(\"font-size\", \"12px\")\n    .text(\"Anos (2024-2070)\");\n\n  years.forEach((year, i) =&gt; {\n    svg.append(\"text\")\n      .attr(\"x\", legendX + (i * legendWidth / (years.length - 1)))\n      .attr(\"y\", legendY + legendHeight + 15)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", \"10px\")\n      .text(year);\n  });\n\n  // Título\n  svg.append(\"text\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .style(\"font-size\", \"1.2em\")\n    .text(title);\n\n  return svg.node();\n}\n\n// Renderização dos gráficos\n{\n  const container = document.createElement('div');\n  container.style.display = \"grid\";\n  container.style.gap = \"2rem\";\n  container.style.justifyContent = \"center\";\n\n  if (modelo2.includes(\"ARIMA+ETS\")) {\n    container.appendChild(createChart(data_filter1, \"ARIMA+ETS\"));\n  }\n  if (modelo2.includes(\"Lee-Miller\")) {\n    container.appendChild(createChart(data_filter2, \"Lee-Miller\"));\n  }\n  if (modelo2.includes(\"Lee-Carter\")) {\n    container.appendChild(createChart(data_filter3, \"Lee-Carter\"));\n  }\n\n  return modelo2.length === 0 \n    ? html`&lt;p&gt;Nenhum dado selecionado.&lt;/p&gt;`\n    : container;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{  \n  if (modelo2.includes(\"ARIMA+ETS\")) {\n    return html`&lt;p&gt;Para acessar a metodologia utilizada no modelo combinado ARIMA com ETS, &lt;a href=\"metodologia.html#modelo-h%C3%ADbrido-arima-ets-com-pondera%C3%A7%C3%A3o-din%C3%A2mica\"&gt;clique aqui&lt;/a&gt;.&lt;/p&gt;`;\n  }\n  else if (modelo2.includes(\"Lee-Miller\")) {\n    return html`&lt;p&gt;Para acessar a metodologia utilizada no modelo Lee-Miller, &lt;a href=\"metodologia.html#modelo-lee-carter\"&gt;clique aqui&lt;/a&gt;.&lt;/p&gt;`;\n  }\n  else if (modelo2.includes(\"Lee-Carter\")) {\n    return html`&lt;p&gt;Para acessar a metodologia utilizada no modelo Lee-Carter, &lt;a href=\"metodologia.html#modelo-lee-carter\"&gt;clique aqui&lt;/a&gt;.&lt;/p&gt;`;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\nhtml`&lt;h2&gt;Tabela de previsão modelo ARIMA+ETS&lt;/h2&gt;`\n\n\n\n\n\n\n\nInputs.table(prev_comb)\n\n\n\n\n\n\n\nhtml`&lt;h2&gt;Tabela de previsão modelo Lee-Miller&lt;/h2&gt;`\n\n\n\n\n\n\n\nInputs.table(prev_lm)\n\n\n\n\n\n\n\nhtml`&lt;h2&gt;Tabela de previsão modelo Lee-Carter&lt;/h2&gt;`\n\n\n\n\n\n\n\nInputs.table(prev_lc)\n\n\n\n\n\n\n\nhtml`\n&lt;body&gt;\n    &lt;br&gt;\n    &lt;p&gt;Baixar previsões do modelo combinado \n    &lt;a href=\"dados/dados1/previsoes_combinado.csv\" download&gt;\n        ARIMA+ETS.\n    &lt;/a&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;Baixar previsões do modelo \n    &lt;a href=\"dados/dados2/previoes_lc.csv\" download&gt;\n        Lee-Carter.\n    &lt;/a&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;Baixar previsões do modelo\n    &lt;a href=\"dados/dados2/previoes_lm.csv\" download&gt;\n        Lee-Miller.\n    &lt;/a&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n`"
  },
  {
    "objectID": "previsao_mortalidade.html#previsão-da-taxa-central-de-mortalidade-para-os-anos-2024-2070",
    "href": "previsao_mortalidade.html#previsão-da-taxa-central-de-mortalidade-para-os-anos-2024-2070",
    "title": "SIGERIP",
    "section": "",
    "text": "GráficoTabela\n\n\n\nprev_comb = await FileAttachment('dados/dados1/previsoes_combinad.csv').csv()\nprev_lm = await FileAttachment('dados/dados2/previoes_lm.csv').csv()\nprev_lc = await FileAttachment('dados/dados2/previoes_lc.csv').csv()\n\nmodelos = [\"ARIMA+ETS\", \"Lee-Carter\", \"Lee-Miller\"]\nregioes = [\"Brasil\", \"Centro-Oeste\", \"Nordeste\", \"Norte\", \"Sudeste\", \"Sul\", \"Acre\", \"Alagoas\", \"Amapá\", \"Amazonas\", \"Bahia\", \"Ceará\", \"Distrito Federal\", \"Espírito Santo\", \"Goiás\", \"Maranhão\", \"Mato Grosso\", \"Mato Grosso do Sul\", \"Minas Gerais\", \"Pará\", \"Paraíba\", \"Paraná\", \"Pernambuco\", \"Piauí\", \"Rio de Janeiro\", \"Rio Grande do Norte\", \"Rio Grande do Sul\", \"Rondônia\", \"Roraima\", \"Santa Catarina\", \"São Paulo\", \"Sergipe\", \"Tocantins\"]\n\n// Definição do componente reativo\n// Define o componente de seleção\nviewof seletores2 = {\n  const form = html`&lt;form style=\"\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    gap: 30px;\n    justify-content: center;\n  \"&gt;\n    &lt;!-- Select para Região --&gt;\n    &lt;div style=\"min-width: 200px; max-width: 300px;\"&gt;\n      &lt;label style=\"display: block; text-align: center; margin-bottom: 8px;\"&gt;Local:&lt;/label&gt;\n      &lt;select name=\"regiao\" style=\"\n        display: block;\n        margin: 0 auto;\n        padding: 6px 12px;\n        border: 1px solid #ccc;\n        border-radius: 20px;\n        font-size: 16px;\n        text-align: center;\n        width: fit-content;\n        min-width: 180px;\n        background-color: #f8f9fa;\n      \"&gt;\n        ${regioes.map(r =&gt; `&lt;option value=\"${r}\"&gt;${r}&lt;/option&gt;`).join('')}\n      &lt;/select&gt;\n    &lt;/div&gt;\n    \n    &lt;!-- Checkboxes para Modelos --&gt;\n    &lt;div style=\"min-width: 200px; max-width: 300px;\"&gt;\n      &lt;label style=\"display: block; text-align: center; margin-bottom: 8px;\"&gt;Modelo:&lt;/label&gt;\n      &lt;select name=\"modelo\" style=\"\n        display: block;\n        margin: 0 auto;\n        padding: 6px 12px;\n        border: 1px solid #ccc;\n        border-radius: 20px;\n        font-size: 16px;\n        text-align: center;\n        width: fit-content;\n        min-width: 180px;\n        background-color: #f8f9fa;\n      \"&gt;\n        ${modelos.map(r =&gt; `&lt;option value=\"${r}\"&gt;${r}&lt;/option&gt;`).join('')}\n      &lt;/select&gt;\n    &lt;/div&gt;\n    \n    &lt;!-- Radio para Sexo --&gt;\n    &lt;div style=\"min-width: 200px; max-width: 300px;\"&gt;\n      &lt;label style=\"display: block; text-align: center; margin-bottom: 8px;\"&gt;Sexo:&lt;/label&gt;\n      &lt;div style=\"\n        display: flex;\n        gap: 15px;\n        justify-content: center;\n      \"&gt;\n        &lt;label style=\"display: flex; align-items: center; gap: 5px;\"&gt;\n          &lt;input type=\"radio\" name=\"sexo\" value=\"Ambos\" checked&gt;\n          Ambos\n        &lt;/label&gt;\n        &lt;label style=\"display: flex; align-items: center; gap: 5px;\"&gt;\n          &lt;input type=\"radio\" name=\"sexo\" value=\"Homens\"&gt;\n          Homens\n        &lt;/label&gt;\n        &lt;label style=\"display: flex; align-items: center; gap: 5px;\"&gt;\n          &lt;input type=\"radio\" name=\"sexo\" value=\"Mulheres\"&gt;\n          Mulheres\n        &lt;/label&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/form&gt;`;\n  \n  // Definir valor inicial\n  form.value = {\n    regiao: regioes[5],\n    modelo: 'ARIMA+ETS',\n    sexo: 'Ambos'\n  };\n  \n  // Atualizar valor ao modificar select\n  form.querySelector('select[name=\"regiao\"]').addEventListener('change', e =&gt; {\n    form.value = {\n      ...form.value,\n      regiao: e.target.value\n    };\n    form.dispatchEvent(new Event('input'));\n  });\n  \n  // Atualizar valor ao modificar checkboxes\n  form.querySelector('select[name=\"modelo\"]').addEventListener('change', e =&gt; {\n    form.value = {\n      ...form.value,\n      modelo: e.target.value\n    };\n    form.dispatchEvent(new Event('input'));\n  });\n  \n  // Atualizar valor ao modificar radios\n  const radios = form.querySelectorAll('input[name=\"sexo\"]');\n  for (const radio of radios) {\n    radio.addEventListener('change', () =&gt; {\n      form.value = {\n        ...form.value,\n        sexo: radio.value\n      };\n      form.dispatchEvent(new Event('input'));\n    });\n  }\n  \n  return form;\n}\n\n// Extrair valores individuais em células separadas\nregiao2 = seletores2.regiao\nmodelo2 = seletores2.modelo\nsexo = seletores2.sexo\n\n\n\ndata_filter1 = prev_comb.filter(d =&gt; d.Local === regiao2 && d.Sexo === sexo).map(d =&gt; ({\n  ano: +d.Ano,\n  faixa: d.faixa_etaria,\n  prev: Math.log(d.nMx_previsão)\n}))\n\ndata_filter2 = prev_lm.filter(d =&gt; d.regiao === regiao2 && d.taxa === sexo).map(d =&gt; ({\n  ano: +d.ano,\n  faixa: d.Faixa_Etaria,\n  prev: Math.log(d.previsto)\n}))\n\ndata_filter3 = prev_lc.filter(d =&gt; d.regiao === regiao2 && d.taxa === sexo).map(d =&gt; ({\n  ano: +d.ano,\n  faixa: d.Faixa_Etaria,\n  prev: Math.log(d.previsto)\n}))\n\n// Função principal para criar gráficos\nfunction createChart(data, title) {\n\n  const ptBRLocaleDefinition = {\n    decimal: \",\",\n    thousands: \"\",\n    grouping: [3],\n    currency: [\"R$\", \"\"]\n  };\n  d3.formatDefaultLocale(ptBRLocaleDefinition);\n\n  const width = 760;\n  const height = 500;\n  const margin = {top: 30, right: 20, bottom: 40, left: 50};\n  \n  const svg = d3.create(\"svg\")\n    .attr(\"viewBox\", [0, 0, width, height])\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic; font: 10px sans-serif;\")\n      .style(\"-webkit-tap-highlight-color\", \"transparent\")\n      .style(\"overflow\", \"visible\");\n\n  // Escalas\n  const x = d3.scalePoint()\n    .domain([...new Set(data.map(d =&gt; d.faixa))])\n    .range([margin.left, width - margin.right])\n    .padding(0.5);\n\n  const y = d3.scaleLinear()\n    .domain(d3.extent(data, d =&gt; d.prev)).nice()\n    .range([height - margin.bottom, margin.top]);\n\n  // Eixos\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n    .call(d3.axisBottom(x))\n    .selectAll(\"text\")\n    .style(\"text-anchor\", \"end\")\n    .attr(\"dx\", \"-.8em\")\n    .attr(\"dy\", \".15em\")\n    .attr(\"transform\", \"rotate(-45)\");\n\n  svg.append(\"text\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", height) // Posição abaixo do eixo\n    .style(\"font-size\", \"14px\")\n    .style(\"fill\", \"currentColor\")\n    .text(\"Faixa Etária\");\n    \n\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},0)`)\n    .call(d3.axisLeft(y).ticks(height / 40))\n    .call(g =&gt; g.select(\".domain\").remove())\n    .style(\"font-size\", \"12px\")\n    .call(g =&gt; g.selectAll(\".tick line\").clone()\n      .attr(\"x2\", width - margin.left - margin.right)\n      .attr(\"stroke-opacity\", 0.1))\n    .call(g =&gt; g.append(\"text\")\n      .attr(\"x\", -margin.left)\n      .attr(\"y\", 15)\n      .attr(\"fill\", \"currentColor\")\n      .attr(\"text-anchor\", \"start\")\n      .style(\"font-size\", \"18px\")\n      .text(\"log(Mx)\"));\n  \n\n  // Gradiente e cores\n  const colorScale = d3.scaleSequential(d3.interpolateViridis)\n    .domain([2024, 2070]);\n\n  const defs = svg.append(\"defs\");\n  const nestedData = d3.groups(data, d =&gt; d.ano);\n\n  nestedData.forEach(([year, values]) =&gt; {\n    const gradientId = `gradient-${title}-${year}`;\n    \n    const gradient = defs.append(\"linearGradient\")\n      .attr(\"id\", gradientId)\n      .attr(\"gradientUnits\", \"userSpaceOnUse\")\n      .attr(\"x1\", margin.left)\n      .attr(\"y1\", 0)\n      .attr(\"x2\", width - margin.right)\n      .attr(\"y2\", 0);\n\n    gradient.append(\"stop\")\n      .attr(\"offset\", \"0%\")\n      .attr(\"stop-color\", colorScale(year));\n\n    gradient.append(\"stop\")\n      .attr(\"offset\", \"100%\")\n      .attr(\"stop-color\", colorScale(Math.min(year + 10, 2070)));\n  });\n\n  // Linhas\n  const line = d3.line()\n    .x(d =&gt; x(d.faixa))\n    .y(d =&gt; y(d.prev));\n\n  nestedData.forEach(([year, values]) =&gt; {\n    svg.append(\"path\")\n      .datum(values)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", `url(#gradient-${title}-${year})`)\n      .attr(\"stroke-width\", 2.5)\n      .attr(\"d\", line);\n  });\n\n  // Legenda\n  const legendWidth = 200;\n  const legendHeight = 20;\n  const legendX = width - margin.right - legendWidth;\n  const legendY = margin.top;\n\n  const legendGradient = defs.append(\"linearGradient\")\n    .attr(\"id\", `legend-${title}`)\n    .attr(\"x1\", \"0%\")\n    .attr(\"y1\", \"0%\")\n    .attr(\"x2\", \"100%\")\n    .attr(\"y2\", \"0%\");\n\n  const years = [2024, 2035, 2045, 2055, 2070];\n  years.forEach((year, i) =&gt; {\n    legendGradient.append(\"stop\")\n      .attr(\"offset\", `${i * 100 / (years.length - 1)}%`)\n      .attr(\"stop-color\", colorScale(year));\n  });\n\n  svg.append(\"rect\")\n    .attr(\"x\", legendX)\n    .attr(\"y\", legendY)\n    .attr(\"width\", legendWidth)\n    .attr(\"height\", legendHeight)\n    .style(\"fill\", `url(#legend-${title})`);\n\n  svg.append(\"text\")\n    .attr(\"x\", legendX)\n    .attr(\"y\", legendY - 5)\n    .attr(\"font-size\", \"12px\")\n    .text(\"Anos (2024-2070)\");\n\n  years.forEach((year, i) =&gt; {\n    svg.append(\"text\")\n      .attr(\"x\", legendX + (i * legendWidth / (years.length - 1)))\n      .attr(\"y\", legendY + legendHeight + 15)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", \"10px\")\n      .text(year);\n  });\n\n  // Título\n  svg.append(\"text\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .style(\"font-size\", \"1.2em\")\n    .text(title);\n\n  return svg.node();\n}\n\n// Renderização dos gráficos\n{\n  const container = document.createElement('div');\n  container.style.display = \"grid\";\n  container.style.gap = \"2rem\";\n  container.style.justifyContent = \"center\";\n\n  if (modelo2.includes(\"ARIMA+ETS\")) {\n    container.appendChild(createChart(data_filter1, \"ARIMA+ETS\"));\n  }\n  if (modelo2.includes(\"Lee-Miller\")) {\n    container.appendChild(createChart(data_filter2, \"Lee-Miller\"));\n  }\n  if (modelo2.includes(\"Lee-Carter\")) {\n    container.appendChild(createChart(data_filter3, \"Lee-Carter\"));\n  }\n\n  return modelo2.length === 0 \n    ? html`&lt;p&gt;Nenhum dado selecionado.&lt;/p&gt;`\n    : container;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{  \n  if (modelo2.includes(\"ARIMA+ETS\")) {\n    return html`&lt;p&gt;Para acessar a metodologia utilizada no modelo combinado ARIMA com ETS, &lt;a href=\"metodologia.html#modelo-h%C3%ADbrido-arima-ets-com-pondera%C3%A7%C3%A3o-din%C3%A2mica\"&gt;clique aqui&lt;/a&gt;.&lt;/p&gt;`;\n  }\n  else if (modelo2.includes(\"Lee-Miller\")) {\n    return html`&lt;p&gt;Para acessar a metodologia utilizada no modelo Lee-Miller, &lt;a href=\"metodologia.html#modelo-lee-carter\"&gt;clique aqui&lt;/a&gt;.&lt;/p&gt;`;\n  }\n  else if (modelo2.includes(\"Lee-Carter\")) {\n    return html`&lt;p&gt;Para acessar a metodologia utilizada no modelo Lee-Carter, &lt;a href=\"metodologia.html#modelo-lee-carter\"&gt;clique aqui&lt;/a&gt;.&lt;/p&gt;`;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\nhtml`&lt;h2&gt;Tabela de previsão modelo ARIMA+ETS&lt;/h2&gt;`\n\n\n\n\n\n\n\nInputs.table(prev_comb)\n\n\n\n\n\n\n\nhtml`&lt;h2&gt;Tabela de previsão modelo Lee-Miller&lt;/h2&gt;`\n\n\n\n\n\n\n\nInputs.table(prev_lm)\n\n\n\n\n\n\n\nhtml`&lt;h2&gt;Tabela de previsão modelo Lee-Carter&lt;/h2&gt;`\n\n\n\n\n\n\n\nInputs.table(prev_lc)\n\n\n\n\n\n\n\nhtml`\n&lt;body&gt;\n    &lt;br&gt;\n    &lt;p&gt;Baixar previsões do modelo combinado \n    &lt;a href=\"dados/dados1/previsoes_combinado.csv\" download&gt;\n        ARIMA+ETS.\n    &lt;/a&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;Baixar previsões do modelo \n    &lt;a href=\"dados/dados2/previoes_lc.csv\" download&gt;\n        Lee-Carter.\n    &lt;/a&gt;\n    &lt;/p&gt;\n\n    &lt;p&gt;Baixar previsões do modelo\n    &lt;a href=\"dados/dados2/previoes_lm.csv\" download&gt;\n        Lee-Miller.\n    &lt;/a&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n`"
  },
  {
    "objectID": "previsao_mortalidade.html#métricas-de-erro",
    "href": "previsao_mortalidade.html#métricas-de-erro",
    "title": "SIGERIP",
    "section": "Métricas de Erro",
    "text": "Métricas de Erro\n\nerros = await FileAttachment(\"dados/dados2/erros.csv\").csv({typed: true})\nerros2 = await FileAttachment(\"dados/dados1/metricas_erro_combinado_.csv\").csv({typed: true})\n//modelos = [\"ARIMA+ETS\", \"Lee-Carter\", \"Lee-Miller\"]\nregioes2 = [...new Set(erros.map(d =&gt; d.regiao))].sort()\nanos2 = [...new Set(erros.map(d =&gt; d.ano))].sort()\n\n/*erro = erros.filter(d =&gt; d.regiao === regiao4 && d.taxa === sexo4 && +d.ano === ano4)\n  .map(d =&gt; ({\n  faixa: d.faixa_etaria,\n  mx_real: Number(d.mx_real).toFixed(5), \n  mx_prev: Number(d.mx_lc).toFixed(5),\n  RMSE: Number(d.RMSE_LC).toFixed(5),\n  MAPE: Number(d.MAPE_LC).toFixed(5),\n  MAE: Number(d.MAE_LC).toFixed(5)\n}))\nInputs.table(erro)*/\n{\n// Variável para guardar o resultado final\n  let dadosTabela;\n\n  // 2. Agora, usamos 'if' para verificar qual modelo foi selecionado\n  if (seletores2.modelo === \"Lee-Carter\") {\n    // 3. Se for Lee-Carter, mapeamos usando as colunas com sufixo _LC\n    dadosTabela = erros.filter(d =&gt; d.regiao === regiao2 && d.taxa === sexo)\n      .map(d =&gt; ({\n      faixa: d.faixa_etaria,\n      RMSE: Number(d.RMSE_LC).toFixed(5),\n      MAPE: Number(d.MAPE_LC).toFixed(5),\n      MAE: Number(d.MAE_LC).toFixed(5)\n    }));\n    }else if (seletores2.modelo === \"Lee-Miller\") {\n      dadosTabela = erros.filter(d =&gt; d.regiao === regiao2 && d.taxa === sexo)\n      .map(d =&gt; ({\n      faixa: d.faixa_etaria,\n      RMSE: Number(d.RMSE_LM).toFixed(5),\n      MAPE: Number(d.MAPE_LM).toFixed(5),\n      MAE: Number(d.MAE_LM).toFixed(5)\n    }));\n    }else if (seletores2.modelo === \"ARIMA+ETS\") {\n      dadosTabela = erros2.filter(d =&gt; d.Local === regiao2 && d.Sexo === sexo)\n      .map(d =&gt; ({\n      faixa: d.faixa,\n      //mx_real: Number(d.mx_real).toFixed(5), \n      //mx_prev: Number(d.mx_lm).toFixed(5),\n      RMSE: Number(d.RMSE).toFixed(5),\n      MAPE: Number(d.MAPE).toFixed(5),\n      //MAE: Number(d.MAE_LM).toFixed(5)\n    }));\n    }\n\n  return Inputs.table(dadosTabela);\n}"
  }
]