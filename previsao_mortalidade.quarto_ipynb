{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "execute: \n",
        "  echo: false\n",
        "  panel: sidebar\n",
        "---\n",
        "\n",
        "```{ojs}\n",
        "d3 = require(\"d3@7\")\n",
        "\n",
        "// carregando dados\n",
        "dados = await FileAttachment(\"dados/dados2/erros.csv\").csv()\n",
        "tabua_combinada = await FileAttachment(\"dados/dados1/previsoes_combinado.csv\").csv()\n",
        "\n",
        "// filtros para gráficos\n",
        "// região\n",
        "regioes = [\"Brasil\", \"Norte\", \"Nordeste\", \"Centro-Oeste\", \"Sudeste\", \"Sul\", \"Acre\", \"Alagoas\", \"Amapá\", \"Amazonas\", \"Bahia\", \"Ceará\", \"Distrito Federal\", \"Espírito Santo\", \"Goiás\", \"Maranhão\", \"Mato Grosso\", \"Mato Grosso do Sul\", \"Minas Gerais\", \"Pará\", \"Paraíba\", \"Paraná\", \"Pernambuco\", \"Piauí\", \"Rio de Janeiro\", \"Rio Grande do Norte\", \"Rio Grande do Sul\", \"Rondônia\", \"Roraima\", \"Santa Catarina\", \"São Paulo\", \"Sergipe\", \"Tocantins\"]\n",
        "viewof regiao = Inputs.select(regioes.sort(),\n",
        "  {\n",
        "        value: ['Brasil'],\n",
        "        label: \"Local: \"\n",
        "    })\n",
        "\n",
        "// faixa etária\n",
        "faixa_etaria_num =[0, 1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90]\n",
        "faixas_etaria = ['0', '1-4', '5-9', '10-14', '15-19', '20-24', '25-29', '30-34', '35-39', '40-44', '45-49', '50-54', '55-59', '60-64', '65-69', '70-74', '75-79', '80-84', '85-89', '90+']\n",
        "viewof faixa = Inputs.select(faixas_etaria.sort(),\n",
        "  {\n",
        "        value: ['0'],\n",
        "        label: \"Faixa Etária: \"\n",
        "    })\n",
        "\n",
        "// modelo\n",
        "viewof modelo = Inputs.checkbox(['Lee-Carter', 'Lee-Miler'],\n",
        "    {\n",
        "        value: ['Lee-Miler', 'Lee-Carter'],\n",
        "        label: 'Modelos:'\n",
        "    }\n",
        ")\n",
        "modelo\n",
        "```"
      ],
      "id": "e8cca726"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "\n",
        "dados = pd.read_csv(\"dados/dados2/erros.csv\")\n",
        "print(dados.head())"
      ],
      "id": "c145402f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "```{ojs}\n",
        "{\n",
        "  const width = 760;\n",
        "  const height = 500;\n",
        "  const margin = { top: 60, right: 30, bottom: 50, left: 50 };\n",
        "  const cores = {\n",
        "    mx_lc: \"steelblue\",\n",
        "    mx_lm: \"darkorange\"\n",
        "  };\n",
        "\n",
        "  const svg = d3.create(\"svg\")\n",
        "    .attr(\"width\", width)\n",
        "    .attr(\"height\", height);\n",
        "\n",
        "  // Título principal\n",
        "  svg.append(\"text\")\n",
        "    .attr(\"x\", width / 2)\n",
        "    .attr(\"y\", 30)\n",
        "    .attr(\"text-anchor\", \"middle\")\n",
        "    .text(\"Mortalidade por Faixa Etária no Brasil (2000 - 2023)\")\n",
        "    .attr(\"font-size\", \"16px\")\n",
        "    .attr(\"font-weight\", \"bold\");\n",
        "\n",
        "  // Legenda\n",
        "  const legend = svg.append(\"g\")\n",
        "    .attr(\"transform\", `translate(${width/2 - 120}, 50)`);\n",
        "\n",
        "  Object.entries(cores).forEach(([key, color], i) => {\n",
        "    legend.append(\"rect\")\n",
        "      .attr(\"x\", i * 100)\n",
        "      .attr(\"y\", 0)\n",
        "      .attr(\"width\", 15)\n",
        "      .attr(\"height\", 15)\n",
        "      .attr(\"fill\", color);\n",
        "\n",
        "    legend.append(\"text\")\n",
        "      .attr(\"x\", i * 100 + 20)\n",
        "      .attr(\"y\", 12)\n",
        "      .text(key.charAt(0).toUpperCase() + key.slice(1))\n",
        "      .attr(\"font-size\", \"12px\");\n",
        "  });\n",
        "\n",
        "  // Processamento dos dados para todo o Brasil\n",
        "  const filteredData = dados\n",
        "    .filter(d => d.regiao === regiao && d.faixa_etaria === faixa && d.taxa === 'Total')\n",
        "    .map(d => ({\n",
        "      ano: +d.ano,\n",
        "      mx_lm: Math.log(+d.mx_lm),\n",
        "      mx_lc: Math.log(+d.mx_lc) // Adiciona transformação\n",
        "      })).sort((a, b) => a.ano - b.ano);\n",
        "\n",
        "  // Escalas únicas para todo o gráfico\n",
        "  const xScale = d3.scaleLinear()\n",
        "    .domain(d3.extent(filteredData, d => d.ano))\n",
        "    .range([margin.left, width - margin.right]);\n",
        "\n",
        "  const yValues = filteredData.flatMap(d => [d.mx_lm, d.mx_lc]);\n",
        "  const yScale = d3.scaleLinear()\n",
        "    .domain([d3.min(yValues), d3.max(yValues)]).nice()\n",
        "    .range([height - margin.bottom, margin.top]);\n",
        "\n",
        "  // Eixos\n",
        "  svg.append(\"g\")\n",
        "    .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\n",
        "    .call(d3.axisBottom(xScale).ticks(10))\n",
        "    .append(\"text\")\n",
        "    .attr(\"x\", width / 2)\n",
        "    .attr(\"y\", 35)\n",
        "    .attr(\"text-anchor\", \"middle\")\n",
        "    .text(\"Ano\");\n",
        "\n",
        "  svg.append(\"g\")\n",
        "    .attr(\"transform\", `translate(${margin.left}, 0)`)\n",
        "    .call(d3.axisLeft(yScale).ticks(8))\n",
        "    .append(\"text\")\n",
        "    .attr(\"transform\", \"rotate(-90)\")\n",
        "    .attr(\"y\", -40)\n",
        "    .attr(\"x\", -height / 2)\n",
        "    .attr(\"text-anchor\", \"middle\")\n",
        "    .text(\"log(Mx)\");\n",
        "\n",
        "  // Função para gerar as linhas\n",
        "  const gerarLinha = (variavel, cor) => {\n",
        "    const linha = d3.line()\n",
        "      .x(d => xScale(d.ano))\n",
        "      .y(d => yScale(d[variavel]))\n",
        "      //.curve(d3.curveMonotoneX); //suaviza a linha\n",
        "\n",
        "    svg.append(\"path\")\n",
        "      .datum(filteredData)\n",
        "      .attr(\"d\", linha)\n",
        "      .attr(\"fill\", \"none\")\n",
        "      .attr(\"stroke\", cor)\n",
        "      .attr(\"stroke-width\", 2);\n",
        "  };\n",
        "\n",
        "  // Adiciona as três linhas principais\n",
        "  gerarLinha(\"mx_lm\", cores.mx_lc);\n",
        "  gerarLinha(\"mx_lc\", cores.mx_lm);\n",
        "\n",
        "  return svg.node();\n",
        "}\n",
        "```\n",
        "\n",
        "```{ojs}\n",
        "anos = Array.from({length: 2023 - 2000 + 1}, (_, i) => 2000 + i)\n",
        "viewof ano = Inputs.select(anos.sort(),\n",
        "  {\n",
        "        value: ['2000'],\n",
        "        label: \"Ano: \"\n",
        "    })\n",
        "{\n",
        "  const width = 760;\n",
        "  const height = 500;\n",
        "  const margin = { top: 60, right: 30, bottom: 120, left: 50 }; // Aumentei a margem inferior\n",
        "  const cores = {\n",
        "    mx_lc: \"steelblue\",\n",
        "    mx_lm: \"darkorange\"\n",
        "  };\n",
        "\n",
        "  // Ordem das faixas etárias\n",
        "  const faixaEtariaOrder = [\n",
        "    '0', '1-4', '5-9', '10-14', '15-19', '20-24', '25-29',\n",
        "    '30-34', '35-39', '40-44', '45-49', '50-54', '55-59',\n",
        "    '60-64', '65-69', '70-74', '75-79', '80-84', '85-89', '90+'\n",
        "  ];\n",
        "\n",
        "  const svg = d3.create(\"svg\")\n",
        "    .attr(\"width\", width)\n",
        "    .attr(\"height\", height);\n",
        "\n",
        "  // Título (mantido)\n",
        "  svg.append(\"text\")\n",
        "    .attr(\"x\", width / 2)\n",
        "    .attr(\"y\", 30)\n",
        "    .attr(\"text-anchor\", \"middle\")\n",
        "    .text(\"Mortalidade por Faixa Etária no Brasil (2000 - 2023)\")\n",
        "    .attr(\"font-size\", \"16px\")\n",
        "    .attr(\"font-weight\", \"bold\");\n",
        "\n",
        "  // Legenda (mantida)\n",
        "  const legend = svg.append(\"g\")\n",
        "    .attr(\"transform\", `translate(${width/2 - 120}, 50)`);\n",
        "\n",
        "  Object.entries(cores).forEach(([key, color], i) => {\n",
        "    legend.append(\"rect\")\n",
        "      .attr(\"x\", i * 100)\n",
        "      .attr(\"y\", 0)\n",
        "      .attr(\"width\", 15)\n",
        "      .attr(\"height\", 15)\n",
        "      .attr(\"fill\", color);\n",
        "\n",
        "    legend.append(\"text\")\n",
        "      .attr(\"x\", i * 100 + 20)\n",
        "      .attr(\"y\", 12)\n",
        "      .text(key.charAt(0).toUpperCase() + key.slice(1))\n",
        "      .attr(\"font-size\", \"12px\");\n",
        "  });\n",
        "\n",
        "  // Processamento dos dados agrupado por faixa etária\n",
        "  const groupedData = d3.rollup(\n",
        "    dados.filter(d => d.regiao === regiao && d.taxa === 'Total' && d.ano == ano),\n",
        "    v => ({\n",
        "      mx_lm: d3.mean(v, d => Math.log(+d.mx_lm)),\n",
        "      mx_lc: d3.mean(v, d => Math.log(+d.mx_lc))\n",
        "    }),\n",
        "    d => d.faixa_etaria\n",
        "  );\n",
        "\n",
        "  const filteredData = faixaEtariaOrder.map(faixa => ({\n",
        "    faixa_etaria: faixa,\n",
        "    ...(groupedData.get(faixa) || { mx_lm: 0, mx_lc: 0 })\n",
        "  }));\n",
        "\n",
        "  // Escalas\n",
        "  const xScale = d3.scalePoint()\n",
        "    .domain(faixaEtariaOrder)\n",
        "    .range([margin.left, width - margin.right])\n",
        "    .padding(0.5);\n",
        "\n",
        "  const yValues = filteredData.flatMap(d => [d.mx_lm, d.mx_lc]);\n",
        "  const yScale = d3.scaleLinear()\n",
        "    .domain([d3.min(yValues), d3.max(yValues)]).nice()\n",
        "    .range([height - margin.bottom, margin.top]);\n",
        "\n",
        "  // Eixo X com rotação\n",
        "  const xAxis = svg.append(\"g\")\n",
        "    .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\n",
        "    .call(d3.axisBottom(xScale));\n",
        "\n",
        "  xAxis.selectAll(\"text\")\n",
        "    .attr(\"transform\", \"rotate(-45)\")\n",
        "    .attr(\"text-anchor\", \"end\")\n",
        "    .attr(\"dx\", \"-0.5em\")\n",
        "    .attr(\"dy\", \"0.15em\");\n",
        "\n",
        "  xAxis.append(\"text\")\n",
        "    .attr(\"x\", width / 2)\n",
        "    .attr(\"y\", 60) // Ajuste para posicionar o label\n",
        "    .attr(\"text-anchor\", \"middle\")\n",
        "    .text(\"Faixa Etária\");\n",
        "\n",
        "  // Eixo Y (mantido)\n",
        "  svg.append(\"g\")\n",
        "    .attr(\"transform\", `translate(${margin.left}, 0)`)\n",
        "    .call(d3.axisLeft(yScale).ticks(8))\n",
        "    .append(\"text\")\n",
        "    .attr(\"transform\", \"rotate(-90)\")\n",
        "    .attr(\"y\", -40)\n",
        "    .attr(\"x\", -height / 2)\n",
        "    .attr(\"text-anchor\", \"middle\")\n",
        "    .text(\"log(Mx)\");\n",
        "\n",
        "  // Função para gerar as linhas\n",
        "  const gerarLinha = (variavel, cor) => {\n",
        "    const linha = d3.line()\n",
        "      .x(d => xScale(d.faixa_etaria))\n",
        "      .y(d => yScale(d[variavel]));\n",
        "\n",
        "    svg.append(\"path\")\n",
        "      .datum(filteredData)\n",
        "      .attr(\"d\", linha)\n",
        "      .attr(\"fill\", \"none\")\n",
        "      .attr(\"stroke\", cor)\n",
        "      .attr(\"stroke-width\", 2);\n",
        "  };\n",
        "\n",
        "  // Adiciona as linhas\n",
        "  gerarLinha(\"mx_lm\", cores.mx_lc);\n",
        "  gerarLinha(\"mx_lc\", cores.mx_lm);\n",
        "\n",
        "  return svg.node();\n",
        "}\n",
        "```"
      ],
      "id": "ccffba6a"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\isaias\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}