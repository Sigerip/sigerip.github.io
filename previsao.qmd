---
title: "Previsões"
execute: 
  echo: false
  panel: sidebar
---

```{ojs}

data = await FileAttachment("dados/dados2/erros.csv").csv()
tabua_comb = await FileAttachment("dados/dados1/previsoes_combinado.csv").csv()

```


## Taxa central de mortalidade de 2000 à 2023 para os modelos de Lee-Miler e Lee-Carter

```{ojs}
viewof qual = Inputs.checkbox(['Lee-Carter', 'Lee-Miler'], {value: ['Lee-Miler', 'Lee-Carter'], label: 'Modelos:'}) 

viewof regiao = Inputs.select([
  "Brasil",
  "Norte",
  "Nordeste",
  "Centro-Oeste",
  "Sudeste",
  "Sul",
  "Acre",
  "Alagoas",
  "Amapá",
  "Amazonas",
  "Bahia",
  "Ceará",
  "Distrito Federal",
  "Espírito Santo",
  "Goiás",
  "Maranhão",
  "Mato Grosso",
  "Mato Grosso do Sul",
  "Minas Gerais",
  "Pará",
  "Paraíba",
  "Paraná",
  "Pernambuco",
  "Piauí",
  "Rio de Janeiro",
  "Rio Grande do Norte",
  "Rio Grande do Sul",
  "Rondônia",
  "Roraima",
  "Santa Catarina",
  "São Paulo",
  "Sergipe",
  "Tocantins"],
  {
        value: ['Brasil'],
        label: "Local: "
    })
```
::: {.panel-tabset}

## Gráfico
```{ojs}
function lm_lc(){
  //lm e lc
  {
  const width = 800;
  const height = 700; // Aumentei a altura total para acomodar a legenda
  const legendHeight = 50; // Altura dedicada para a legenda
  const margin = { top: 30, right: 20, bottom: 40, left: 50 };
  const numRows = 5;
  const numCols = 4;
  
  // Cores para cada série
  const cores = {
    mx_lm: "blue",
    mx_lc: "darkred"
  };
  
  const estilos = {
  mx_lm: "solid",      // Linha sólida
  mx_lc: "dashed"      // Linha tracejada
  };

  const svg = d3.create("svg")
    .attr("width", width)
    .attr("height", height);

  const ageGroups = [...new Set(data.map(d => d.faixa_etaria))].sort();
  
  // Título geral
  svg.append("text")
    .attr("x", width / 2)
    .attr("y", 20)
    .attr("text-anchor", "middle")
    .text("Mortalidade por Faixa Etária no Brasil (2000 - 2023) por Modelos de Previsão")
    .attr("font-size", "16px")
    .attr("font-weight", "bold");
    
  // Adiciona legenda em linha horizontal acima dos gráficos
  const legend = svg.append("g")
    .attr("transform", `translate(${width/2 - 150}, 35)`);
    
  const legendItems = Object.entries(cores);
  const legendItemWidth = 100; // Largura de cada item da legenda
  
  legendItems.forEach(([key, color], i) => {
    const itemX = i * legendItemWidth;
    
    legend.append("rect")
      .attr("x", itemX)
      .attr("y", 0)
      .attr("width", 15)
      .attr("height", 15)
      .attr("fill", color);
      
    legend.append("text")
      .attr("x", itemX + 20)
      .attr("y", 12)
      .text(key.charAt(0).toUpperCase() + key.slice(1))
      .attr("font-size", "12px");
  });

  // Ajuste a área dos gráficos para começar após a legenda
  const graphsStartY = legendHeight + 10;
  
  const subplotWidth = width / numCols;
  const subplotHeight = (height - graphsStartY) / numRows;

  for (let row = 0; row < numRows; row++) {
    for (let col = 0; col < numCols; col++) {
      const index = row * numCols + col;
      if (index >= ageGroups.length) continue;
      
      const currentAge = ageGroups[index];
      const subplot = svg.append("g")
        .attr("transform", `translate(${col * subplotWidth}, ${graphsStartY + row * subplotHeight})`);
      
      // Processamento dos dados - filtrando por faixa etária
      const filteredData = data.filter(d => 
          d.faixa_etaria === currentAge && 
          d.regiao === regiao && 
          d.taxa === 'Total'
        ).map(d => ({
          ...d,
          ano: +d.ano,
          mx_lm: Math.log(+d.mx_lm),
          mx_lc: Math.log(+d.mx_lc)  // Adiciona transformação
        })).sort((a, b) => a.ano - b.ano);
      
      // Verifica se existem dados para esta faixa etária
      if (filteredData.length === 0) {
        subplot.append("text")
          .attr("x", subplotWidth / 2)
          .attr("y", subplotHeight / 2)
          .attr("text-anchor", "middle")
          .text(`Sem dados para: ${currentAge}`)
          .attr("font-size", "12px");
        continue;
      }
      
      // Escalas atualizadas
      const xScale = d3.scaleLinear()
        .domain(d3.extent(filteredData, d => d.ano))
        .range([margin.left, subplotWidth - margin.right]);

      const yValues = filteredData.flatMap(d => [d.mx_lm, d.mx_lc]);
      const yScale = d3.scaleLinear()
        .domain([d3.min(yValues), d3.max(yValues)]).nice()
        .range([subplotHeight - margin.bottom, margin.top]);
      
      // Eixos
      subplot.append("g")
        .attr("transform", `translate(0, ${subplotHeight - margin.bottom})`)
        .call(d3.axisBottom(xScale).ticks(5))
        .append("text")
        .attr("x", subplotWidth / 2)
        .attr("y", 30)
        .attr("text-anchor", "middle")
        .text("Ano")
        .attr("fill", "black");

      subplot.append("g")
        .attr("transform", `translate(${margin.left}, 0)`)
        .call(d3.axisLeft(yScale).ticks(5))
        .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", -30)
        .attr("x", -subplotHeight / 2)
        .attr("text-anchor", "middle")
        .text("log(Mx)")
        .attr("fill", "black");

      // Função para gerar linhas
      const gerarLinha = (variavel, cor, estilo) => {
        const linha = d3.line()
          .x(d => xScale(d.ano))
          .y(d => yScale(d[variavel]));
          //.curve(d3.curveMonotoneX); // Adiciona suavização para as linhas
        
        subplot.append("path")
          .datum(filteredData)
          .attr("d", linha)
          .attr("fill", "none")
          .attr("stroke", cor)
          .attr("stroke-dasharray", estilo === "dashed" ? "5,5" : "0")
          .attr("stroke-width", 2);

      };

      // Adiciona as três linhas
      gerarLinha("mx_lm", cores.mx_lm, estilos.mx_lm);
      gerarLinha("mx_lc", cores.mx_lc, estilos.mx_lc);
      
      // Título
      subplot.append("text")
        .attr("x", subplotWidth / 2)
        .attr("y", margin.top / 2)
        .attr("text-anchor", "middle")
        .text(`Faixa: ${currentAge}`)
        .attr("font-size", "12px")
        .attr("font-weight", "bold");
    }
  }
    
  return svg.node();
}}

function mx_lm(){
  //real e lm
  {
  const width = 800;
  const height = 700; // Aumentei a altura total para acomodar a legenda
  const legendHeight = 50; // Altura dedicada para a legenda
  const margin = { top: 30, right: 20, bottom: 40, left: 50 };
  const numRows = 5;
  const numCols = 4;
  
  // Cores para cada série
  const cores = {
    mx_lm: "blue",
    mx_lc: "darckred"
  };
  
  const estilos = {
  mx_lm: "solid",      // Linha sólida
  mx_lc: "dashed"      // Linha tracejada
  };

  const svg = d3.create("svg")
    .attr("width", width)
    .attr("height", height);

  const ageGroups = [...new Set(data.map(d => d.faixa_etaria))].sort();
  
  // Título geral
  svg.append("text")
    .attr("x", width / 2)
    .attr("y", 20)
    .attr("text-anchor", "middle")
    .text("Mortalidade por Faixa Etária no Brasil (2000 - 2023) por Modelos de Previsão")
    .attr("font-size", "16px")
    .attr("font-weight", "bold");
    
  // Adiciona legenda em linha horizontal acima dos gráficos
  const legend = svg.append("g")
    .attr("transform", `translate(${width/2 - 150}, 35)`);
    
  const legendItems = Object.entries(cores);
  const legendItemWidth = 100; // Largura de cada item da legenda
  
  legendItems.forEach(([key, color], i) => {
    const itemX = i * legendItemWidth;
    
    legend.append("rect")
      .attr("x", itemX)
      .attr("y", 0)
      .attr("width", 15)
      .attr("height", 15)
      .attr("fill", color);
      
    legend.append("text")
      .attr("x", itemX + 20)
      .attr("y", 12)
      .text(key.charAt(0).toUpperCase() + key.slice(1))
      .attr("font-size", "12px");
  });

  // Ajuste a área dos gráficos para começar após a legenda
  const graphsStartY = legendHeight + 10;
  
  const subplotWidth = width / numCols;
  const subplotHeight = (height - graphsStartY) / numRows;

  for (let row = 0; row < numRows; row++) {
    for (let col = 0; col < numCols; col++) {
      const index = row * numCols + col;
      if (index >= ageGroups.length) continue;
      
      const currentAge = ageGroups[index];
      const subplot = svg.append("g")
        .attr("transform", `translate(${col * subplotWidth}, ${graphsStartY + row * subplotHeight})`);
      
      // Processamento dos dados - filtrando por faixa etária
      const filteredData = data.filter(d => 
          d.faixa_etaria === currentAge && 
          d.regiao === regiao && 
          d.taxa === 'Total'
        ).map(d => ({
          ...d,
          ano: +d.ano,
          mx_lm: Math.log(+d.mx_lm),
          mx_lc: Math.log(+d.mx_lc)  // Adiciona transformação
        })).sort((a, b) => a.ano - b.ano);
      
      // Verifica se existem dados para esta faixa etária
      if (filteredData.length === 0) {
        subplot.append("text")
          .attr("x", subplotWidth / 2)
          .attr("y", subplotHeight / 2)
          .attr("text-anchor", "middle")
          .text(`Sem dados para: ${currentAge}`)
          .attr("font-size", "12px");
        continue;
      }
      
      // Escalas atualizadas
      const xScale = d3.scaleLinear()
        .domain(d3.extent(filteredData, d => d.ano))
        .range([margin.left, subplotWidth - margin.right]);

      const yValues = filteredData.flatMap(d => [d.mx_lm, d.mx_lc]);
      const yScale = d3.scaleLinear()
        .domain([d3.min(yValues), d3.max(yValues)]).nice()
        .range([subplotHeight - margin.bottom, margin.top]);
      
      // Eixos
      subplot.append("g")
        .attr("transform", `translate(0, ${subplotHeight - margin.bottom})`)
        .call(d3.axisBottom(xScale).ticks(5))
        .append("text")
        .attr("x", subplotWidth / 2)
        .attr("y", 30)
        .attr("text-anchor", "middle")
        .text("Ano")
        .attr("fill", "black");

      subplot.append("g")
        .attr("transform", `translate(${margin.left}, 0)`)
        .call(d3.axisLeft(yScale).ticks(5))
        .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", -30)
        .attr("x", -subplotHeight / 2)
        .attr("text-anchor", "middle")
        .text("log(Mx)")
        .attr("fill", "black");

      // Função para gerar linhas
      const gerarLinha = (variavel, cor, estilo) => {
        const linha = d3.line()
          .x(d => xScale(d.ano))
          .y(d => yScale(d[variavel]));
          //.curve(d3.curveMonotoneX); // Adiciona suavização para as linhas
        
        subplot.append("path")
          .datum(filteredData)
          .attr("d", linha)
          .attr("fill", "none")
          .attr("stroke", cor)
          .attr("stroke-dasharray", estilo === "dashed" ? "5,5" : "0")
          .attr("stroke-width", 2);

      };

      // Adiciona as três linhas
      gerarLinha("mx_lm", cores.mx_lm, estilos.mx_lm);
      //gerarLinha("mx_lc", cores.mx_lc, estilos.mx_lc);
      
      // Título
      subplot.append("text")
        .attr("x", subplotWidth / 2)
        .attr("y", margin.top / 2)
        .attr("text-anchor", "middle")
        .text(`Faixa: ${currentAge}`)
        .attr("font-size", "12px")
        .attr("font-weight", "bold");
    }
  }
    
  return svg.node();
}
}

function mx_lc(){
  //real e lc
  {
  const width = 800;
  const height = 700; // Aumentei a altura total para acomodar a legenda
  const legendHeight = 50; // Altura dedicada para a legenda
  const margin = { top: 30, right: 20, bottom: 40, left: 50 };
  const numRows = 5;
  const numCols = 4;
  
  // Cores para cada série
  const cores = {
    mx_lm: "blue",
    mx_lc: "darckred"
  };
  
  const estilos = {
  mx_lm: "solid",      // Linha sólida
  mx_lc: "solid"      // Linha tracejada
  };

  const svg = d3.create("svg")
    .attr("width", width)
    .attr("height", height);

  const ageGroups = [...new Set(data.map(d => d.faixa_etaria))].sort();
  
  // Título geral
  svg.append("text")
    .attr("x", width / 2)
    .attr("y", 20)
    .attr("text-anchor", "middle")
    .text("Mortalidade por Faixa Etária no Brasil (2000 - 2023) por Modelos de Previsão")
    .attr("font-size", "16px")
    .attr("font-weight", "bold");
    
  // Adiciona legenda em linha horizontal acima dos gráficos
  const legend = svg.append("g")
    .attr("transform", `translate(${width/2 - 150}, 35)`);
    
  const legendItems = Object.entries(cores);
  const legendItemWidth = 100; // Largura de cada item da legenda
  
  legendItems.forEach(([key, color], i) => {
    const itemX = i * legendItemWidth;
    
    legend.append("rect")
      .attr("x", itemX)
      .attr("y", 0)
      .attr("width", 15)
      .attr("height", 15)
      .attr("fill", color);
      
    legend.append("text")
      .attr("x", itemX + 20)
      .attr("y", 12)
      .text(key.charAt(0).toUpperCase() + key.slice(1))
      .attr("font-size", "12px");
  });

  // Ajuste a área dos gráficos para começar após a legenda
  const graphsStartY = legendHeight + 10;
  
  const subplotWidth = width / numCols;
  const subplotHeight = (height - graphsStartY) / numRows;

  for (let row = 0; row < numRows; row++) {
    for (let col = 0; col < numCols; col++) {
      const index = row * numCols + col;
      if (index >= ageGroups.length) continue;
      
      const currentAge = ageGroups[index];
      const subplot = svg.append("g")
        .attr("transform", `translate(${col * subplotWidth}, ${graphsStartY + row * subplotHeight})`);
      
      // Processamento dos dados - filtrando por faixa etária
      const filteredData = data.filter(d => 
          d.faixa_etaria === currentAge && 
          d.regiao === regiao && 
          d.taxa === 'Total'
        ).map(d => ({
          ...d,
          ano: +d.ano,
          mx_lm: Math.log(+d.mx_lm),
          mx_lc: Math.log(+d.mx_lc)  // Adiciona transformação
        })).sort((a, b) => a.ano - b.ano);
      
      // Verifica se existem dados para esta faixa etária
      if (filteredData.length === 0) {
        subplot.append("text")
          .attr("x", subplotWidth / 2)
          .attr("y", subplotHeight / 2)
          .attr("text-anchor", "middle")
          .text(`Sem dados para: ${currentAge}`)
          .attr("font-size", "12px");
        continue;
      }
      
      // Escalas atualizadas
      const xScale = d3.scaleLinear()
        .domain(d3.extent(filteredData, d => d.ano))
        .range([margin.left, subplotWidth - margin.right]);

      const yValues = filteredData.flatMap(d => [d.mx_lm, d.mx_lc]);
      const yScale = d3.scaleLinear()
        .domain([d3.min(yValues), d3.max(yValues)]).nice()
        .range([subplotHeight - margin.bottom, margin.top]);
      
      // Eixos
      subplot.append("g")
        .attr("transform", `translate(0, ${subplotHeight - margin.bottom})`)
        .call(d3.axisBottom(xScale).ticks(5))
        .append("text")
        .attr("x", subplotWidth / 2)
        .attr("y", 30)
        .attr("text-anchor", "middle")
        .text("Ano")
        .attr("fill", "black");

      subplot.append("g")
        .attr("transform", `translate(${margin.left}, 0)`)
        .call(d3.axisLeft(yScale).ticks(5))
        .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", -30)
        .attr("x", -subplotHeight / 2)
        .attr("text-anchor", "middle")
        .text("log(Mx)")
        .attr("fill", "black");

      // Função para gerar linhas
      const gerarLinha = (variavel, cor, estilo) => {
        const linha = d3.line()
          .x(d => xScale(d.ano))
          .y(d => yScale(d[variavel]));
          //.curve(d3.curveMonotoneX); // Adiciona suavização para as linhas
        
        subplot.append("path")
          .datum(filteredData)
          .attr("d", linha)
          .attr("fill", "none")
          .attr("stroke", cor)
          .attr("stroke-dasharray", estilo === "dashed" ? "5,5" : "0")
          .attr("stroke-width", 2);

      };

      // Adiciona as três linhas
      //gerarLinha("mx_lm", cores.mx_lm, estilos.mx_lm);
      gerarLinha("mx_lc", cores.mx_lc, estilos.mx_lc);
      
      // Título
      subplot.append("text")
        .attr("x", subplotWidth / 2)
        .attr("y", margin.top / 2)
        .attr("text-anchor", "middle")
        .text(`Faixa: ${currentAge}`)
        .attr("font-size", "12px")
        .attr("font-weight", "bold");
    }
  }
    
  return svg.node();
}}

```

```{ojs}
totalSelecionado = qual.length;
rea = qual.includes("Observado")
lm = qual.includes("Lee-Miler")
lc = qual.includes("Lee-Carter")

{
  if(totalSelecionado === 1 ){
    if (lm) return mx_lm();
    if (lc) return mx_lc();
  }else if (totalSelecionado === 2){
    if (lm && lc) return lm_lc();
  }else if (totalSelecionado == 0){
    return html`<p>Nenhum dado selecionado.</p>`
  }

}
```

## Dados

```{ojs}
html`<h1>Modelos</h1>`
Inputs.table(data)
html`
<body>
    <br>
    <p>Baixar 
    <a href="dados/dados2/erros.csv" download>
        dados.
    </a>
    </p>
</body>
`
```

:::{.panel-tabset}

## Gráficos
```{ojs}
d3 = require("d3@7")

// Dados e filtros
prev_comb = await FileAttachment('dados/dados1/previsoes_combinado.csv').csv()
prev_lm = await FileAttachment('dados/dados2/tabuas_lc.csv').csv() 
prev_lc = await FileAttachment('dados/dados2/tabuas_lm.csv').csv()

viewof sexo = Inputs.radio(["Ambos", "Homens", "Mulheres"], {label: "Sexo", value: "Homens"})

viewof regiao1 = Inputs.select([
  "Brasil",
  "Norte",
  "Nordeste",
  "Centro-Oeste",
  "Sudeste",
  "Sul",
  "Acre",
  "Alagoas",
  "Amapá",
  "Amazonas",
  "Bahia",
  "Ceará",
  "Distrito Federal",
  "Espírito Santo",
  "Goiás",
  "Maranhão",
  "Mato Grosso",
  "Mato Grosso do Sul",
  "Minas Gerais",
  "Pará",
  "Paraíba",
  "Paraná",
  "Pernambuco",
  "Piauí",
  "Rio de Janeiro",
  "Rio Grande do Norte",
  "Rio Grande do Sul",
  "Rondônia",
  "Roraima",
  "Santa Catarina",
  "São Paulo",
  "Sergipe",
  "Tocantins"],
  {
        value: ['Brasil'],
        label: "Local: "
    })

data_filter1 = prev_comb.filter(d => d.Local === regiao1 && d.Sexo === sexo).map(d => ({
  ano: +d.Ano,
  faixa: d.faixa_etaria,
  prev: Math.log(d.nMx_previsão)
}))

data_filter2 = prev_lm.filter(d => d.local === regiao1 && d.sexo === sexo).map(d => ({
  ano: +d.ano,
  faixa: d.faixa_etaria,
  prev: Math.log(d.mx_previsto)
}))

data_filter3 = prev_lc.filter(d => d.local === regiao1 && d.sexo === sexo).map(d => ({
  ano: +d.ano,
  faixa: d.faixa_etaria,
  prev: Math.log(d.mx_previsto)
}))

viewof qual1 = Inputs.checkbox(
  ['Combinado', 'Lee-Carter', 'Lee-Miler'], 
  {value: ['Combinado'], label: 'Modelos:'}
)

// Função principal para criar gráficos
function createChart(data, title) {
  const width = 800;
  const height = 550;
  const margin = {top: 30, right: 20, bottom: 40, left: 50};
  
  const svg = d3.create("svg")
    .attr("width", width)
    .attr("height", height)
    .attr("viewBox", [0, 0, width, height])
    .attr("style", "max-width: 100%; height: auto;");

  // Escalas
  const x = d3.scalePoint()
    .domain([...new Set(data.map(d => d.faixa))])
    .range([margin.left, width - margin.right])
    .padding(0.5);

  const y = d3.scaleLinear()
    .domain(d3.extent(data, d => d.prev)).nice()
    .range([height - margin.bottom, margin.top]);

  // Eixos
  svg.append("g")
    .attr("transform", `translate(0,${height - margin.bottom})`)
    .call(d3.axisBottom(x))
    .selectAll("text")
    .style("text-anchor", "end")
    .attr("dx", "-.8em")
    .attr("dy", ".15em")
    .attr("transform", "rotate(-45)");

  svg.append("g")
    .attr("transform", `translate(${margin.left},0)`)
    .call(d3.axisLeft(y).ticks(height / 40))
    .call(g => g.select(".domain").remove())
    .call(g => g.selectAll(".tick line").clone()
      .attr("x2", width - margin.left - margin.right)
      .attr("stroke-opacity", 0.1));

  // Gradiente e cores
  const colorScale = d3.scaleSequential(d3.interpolateViridis)
    .domain([2024, 2070]);

  const defs = svg.append("defs");
  const nestedData = d3.groups(data, d => d.ano);

  nestedData.forEach(([year, values]) => {
    const gradientId = `gradient-${title}-${year}`;
    
    const gradient = defs.append("linearGradient")
      .attr("id", gradientId)
      .attr("gradientUnits", "userSpaceOnUse")
      .attr("x1", margin.left)
      .attr("y1", 0)
      .attr("x2", width - margin.right)
      .attr("y2", 0);

    gradient.append("stop")
      .attr("offset", "0%")
      .attr("stop-color", colorScale(year));

    gradient.append("stop")
      .attr("offset", "100%")
      .attr("stop-color", colorScale(Math.min(year + 10, 2070)));
  });

  // Linhas
  const line = d3.line()
    .x(d => x(d.faixa))
    .y(d => y(d.prev));

  nestedData.forEach(([year, values]) => {
    svg.append("path")
      .datum(values)
      .attr("fill", "none")
      .attr("stroke", `url(#gradient-${title}-${year})`)
      .attr("stroke-width", 2.5)
      .attr("d", line);
  });

  // Legenda
  const legendWidth = 200;
  const legendHeight = 20;
  const legendX = width - margin.right - legendWidth;
  const legendY = margin.top;

  const legendGradient = defs.append("linearGradient")
    .attr("id", `legend-${title}`)
    .attr("x1", "0%")
    .attr("y1", "0%")
    .attr("x2", "100%")
    .attr("y2", "0%");

  const years = [2024, 2035, 2045, 2055, 2070];
  years.forEach((year, i) => {
    legendGradient.append("stop")
      .attr("offset", `${i * 100 / (years.length - 1)}%`)
      .attr("stop-color", colorScale(year));
  });

  svg.append("rect")
    .attr("x", legendX)
    .attr("y", legendY)
    .attr("width", legendWidth)
    .attr("height", legendHeight)
    .style("fill", `url(#legend-${title})`);

  svg.append("text")
    .attr("x", legendX)
    .attr("y", legendY - 5)
    .attr("font-size", "12px")
    .text("Anos (2024-2070)");

  years.forEach((year, i) => {
    svg.append("text")
      .attr("x", legendX + (i * legendWidth / (years.length - 1)))
      .attr("y", legendY + legendHeight + 15)
      .attr("text-anchor", "middle")
      .attr("font-size", "10px")
      .text(year);
  });

  // Título
  svg.append("text")
    .attr("x", width / 2)
    .attr("y", 20)
    .attr("text-anchor", "middle")
    .style("font-size", "1.2em")
    .text(title);

  return svg.node();
}

// Renderização dos gráficos
{
  const container = document.createElement('div');
  container.style.display = "grid";
  container.style.gap = "2rem";
  container.style.justifyContent = "center";

  if (qual1.includes("Combinado")) {
    container.appendChild(createChart(data_filter1, "Combinado"));
  }
  if (qual1.includes("Lee-Miler")) {
    container.appendChild(createChart(data_filter2, "Lee-Miller"));
  }
  if (qual1.includes("Lee-Carter")) {
    container.appendChild(createChart(data_filter3, "Lee-Carter"));
  }

  return qual1.length === 0 
    ? html`<p>Nenhum dado selecionado.</p>`
    : container;
}
```

## Dados

```{ojs}
html`<h1>Tábua Conbiada (Arima + ETS)</h1>`
Inputs.table(prev_comb)
html`
<body>
    <br>
    <p>Baixar 
    <a href="dados/dados1/tabuas_combinado.csv" download>
        dados combinado.
    </a>
    </p>
</body>
`
html`<h1>Tábua Lee-Miller</h1>`
Inputs.table(prev_lm)
html`
<body>
    <br>
    <p>Baixar 
    <a href="dados/dados2/tabuas_lm.csv" download>
        dados Lee-Miller.
    </a>
    </p>
</body>
`
html`<h1>Tábua Lee-Carter</h1>`
Inputs.table(prev_lc)
html`
<body>
    <br>
    <p>Baixar 
    <a href="dados/dados2/tabuas_lc.csv" download>
        dados Lee-Carter.
    </a>
    </p>
</body>
`
```